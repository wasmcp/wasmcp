// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod io {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Error {
                handle: _rt::Resource<Error>,
            }
            impl Error {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Error {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]error"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Error {
                #[allow(unused_unsafe, clippy::all)]
                pub fn to_debug_string(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]error.to-debug-string"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod streams {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::wasi::io::error::Error;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub enum StreamError {
                LastOperationFailed(Error),
                Closed,
            }
            impl ::core::fmt::Debug for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StreamError::LastOperationFailed(e) => {
                            f.debug_tuple("StreamError::LastOperationFailed")
                                .field(e)
                                .finish()
                        }
                        StreamError::Closed => {
                            f.debug_tuple("StreamError::Closed").finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for StreamError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InputStream {
                handle: _rt::Resource<InputStream>,
            }
            impl InputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]input-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutputStream {
                handle: _rt::Resource<OutputStream>,
            }
            impl OutputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for OutputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]output-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_read(
                    &self,
                    len: u64,
                ) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn check_write(&self) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.check-write"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_and_flush(
                    &self,
                    contents: &[u8],
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-and-flush"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_zeroes(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write-zeroes"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_zeroes_and_flush(
                    &self,
                    len: u64,
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core MCP data types and aliases
        ///
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Optional metadata for vendor-specific extensions.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
            pub type Meta = Option<_rt::Vec<(_rt::String, _rt::String)>>;
            /// Opaque pagination token.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#cursor>
            pub type Cursor = _rt::String;
            /// JSON-encoded data as a string.
            pub type Json = _rt::String;
            /// Uniform Resource Identifier.
            pub type Uri = _rt::String;
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Client capabilities (extensible)."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#clientcapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ClientCapabilities : u8 { const ELICITATION = 1 << 0; const ROOTS
                = 1 << 1; const SAMPLING = 1 << 2; const EXPERIMENTAL = 1 << 3; }
            }
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Capabilities that a server supports."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#servercapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ServerCapabilities : u8 { #[doc = " Argument autocompletion"]
                const COMPLETIONS = 1 << 0; #[doc = " Prompts"] const PROMPTS = 1 << 1;
                #[doc = " Resources"] const RESOURCES = 1 << 2; #[doc = " Tools"] const
                TOOLS = 1 << 3; #[doc = " Experimental features"] const EXPERIMENTAL = 1
                << 4; }
            }
            /// MCP protocol versions.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ProtocolVersion {
                /// Version 2025-06-18
                V20250618,
                /// Version 2025-03-26
                V20250326,
                /// Version 2024-11-05
                V20241105,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::V20250618 => {
                            f.debug_tuple("ProtocolVersion::V20250618").finish()
                        }
                        ProtocolVersion::V20250326 => {
                            f.debug_tuple("ProtocolVersion::V20250326").finish()
                        }
                        ProtocolVersion::V20241105 => {
                            f.debug_tuple("ProtocolVersion::V20241105").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::V20250618,
                        1 => ProtocolVersion::V20250326,
                        2 => ProtocolVersion::V20241105,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// MCP implementation metadata.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#implementation>
            #[derive(Clone)]
            pub struct Implementation {
                pub name: _rt::String,
                pub title: Option<_rt::String>,
                pub version: _rt::String,
            }
            impl ::core::fmt::Debug for Implementation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Implementation")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("version", &self.version)
                        .finish()
                }
            }
            /// JSON-RPC request ID (string or number).
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#requestid>
            #[derive(Clone)]
            pub enum Id {
                Number(i64),
                String(_rt::String),
            }
            impl ::core::fmt::Debug for Id {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Id::Number(e) => f.debug_tuple("Id::Number").field(e).finish(),
                        Id::String(e) => f.debug_tuple("Id::String").field(e).finish(),
                    }
                }
            }
        }
        /// Error handling for MCP operations.
        ///
        /// This interface provides error types that map to JSON-RPC error codes
        /// as defined in the MCP specification.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Standard JSON-RPC error codes.
            ///
            /// Maps to the error codes in JSONRPCError as defined in the MCP spec.
            /// Standard codes per JSON-RPC 2.0:
            /// - Parse error: -32700
            /// - Invalid request: -32600
            /// - Method not found: -32601
            /// - Invalid params: -32602
            /// - Internal error: -32603
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#jsonrpcerror>
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ErrorCode {
                /// Parse error (-32700)
                ParseError,
                /// Invalid request (-32600)
                InvalidRequest,
                /// Method not found (-32601)
                MethodNotFound,
                /// Invalid parameters (-32602)
                InvalidParams,
                /// Internal error (-32603)
                InternalError,
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                    }
                }
            }
            impl ErrorCode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ErrorCode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ErrorCode::ParseError,
                        1 => ErrorCode::InvalidRequest,
                        2 => ErrorCode::MethodNotFound,
                        3 => ErrorCode::InvalidParams,
                        4 => ErrorCode::InternalError,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Standard MCP error structure.
            ///
            /// Maps to JSONRPCError.error in the MCP spec:
            /// - code: number - "The error type that occurred"
            /// - message: string - "A short description of the error"
            /// - data?: unknown - "Additional information about the error"
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#jsonrpcerror>
            #[derive(Clone)]
            pub struct Error {
                pub code: ErrorCode,
                pub message: _rt::String,
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
        }
        /// Writes JSON-RPC error responses to an output stream.
        ///
        /// This interface provides a standardized way to write error responses
        /// that conform to the JSON-RPC 2.0 specification.
        ///
        /// See: <https://spec.json-rpc.org/specification>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod error_result {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type StreamError = super::super::super::wasi::io::streams::StreamError;
            pub type Id = super::super::super::wasmcp::mcp::types::Id;
            pub type McpError = super::super::super::wasmcp::mcp::error::Error;
            #[allow(unused_unsafe, clippy::all)]
            pub fn write(
                id: &Id,
                output: OutputStream,
                error: &McpError,
            ) -> Result<(), StreamError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::wasmcp::mcp::types::Id as V1;
                    let (result2_0, result2_1, result2_2) = match id {
                        V1::Number(e) => {
                            (
                                0i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V1::String(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                1i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                    };
                    let super::super::super::wasmcp::mcp::error::Error {
                        code: code3,
                        message: message3,
                        data: data3,
                    } = error;
                    let vec4 = message3;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let (result6_0, result6_1, result6_2) = match data3 {
                        Some(e) => {
                            let vec5 = e;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            (1i32, ptr5.cast_mut(), len5)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/error-result@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "write"]
                        fn wit_import8(
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            result2_0,
                            result2_1,
                            result2_2,
                            (&output).take_handle() as i32,
                            code3.clone() as i32,
                            ptr4.cast_mut(),
                            len4,
                            result6_0,
                            result6_1,
                            result6_2,
                            ptr7,
                        )
                    };
                    let l9 = i32::from(*ptr7.add(0).cast::<u8>());
                    let result13 = match l9 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = i32::from(*ptr7.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V12;
                                let v12 = match l10 {
                                    0 => {
                                        let e12 = {
                                            let l11 = *ptr7.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l11 as u32,
                                                )
                                            }
                                        };
                                        V12::LastOperationFailed(e12)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V12::Closed
                                    }
                                };
                                v12
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Writes tools/list results to an output stream.
        ///
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-list>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_list_result {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type StreamError = super::super::super::wasi::io::streams::StreamError;
            pub type Id = super::super::super::wasmcp::mcp::types::Id;
            pub type Cursor = super::super::super::wasmcp::mcp::types::Cursor;
            pub type Meta = super::super::super::wasmcp::mcp::types::Meta;
            pub type Json = super::super::super::wasmcp::mcp::types::Json;
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Hints about tool behavior."] #[derive(PartialEq, Eq,
                PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub struct ToolHints : u8 {
                const DESTRUCTIVE = 1 << 0; const IDEMPOTENT = 1 << 1; const OPEN_WORLD =
                1 << 2; const READ_ONLY = 1 << 3; }
            }
            /// Annotations for tool capabilities.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations>
            #[derive(Clone)]
            pub struct ToolAnnotations {
                pub hints: ToolHints,
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("hints", &self.hints)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Optional properties for tool definitions.
            #[derive(Clone)]
            pub struct ToolOptions {
                pub meta: Meta,
                pub annotations: Option<ToolAnnotations>,
                pub description: Option<_rt::String>,
                pub output_schema: Option<Json>,
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ToolOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolOptions")
                        .field("meta", &self.meta)
                        .field("annotations", &self.annotations)
                        .field("description", &self.description)
                        .field("output-schema", &self.output_schema)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Tool definition.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tool>
            #[derive(Clone)]
            pub struct Tool {
                pub name: _rt::String,
                pub input_schema: _rt::String,
                pub options: Option<ToolOptions>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("name", &self.name)
                        .field("input-schema", &self.input_schema)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Options for list-tools results.
            #[derive(Clone)]
            pub struct Options {
                pub meta: Meta,
                pub next_cursor: Option<Cursor>,
            }
            impl ::core::fmt::Debug for Options {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Options")
                        .field("meta", &self.meta)
                        .field("next-cursor", &self.next_cursor)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Writer {
                handle: _rt::Resource<Writer>,
            }
            impl Writer {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Writer {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-list-result@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]writer"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Writer {
                #[allow(unused_unsafe, clippy::all)]
                pub fn check_write(&self) -> Result<u32, StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-list-result@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[method]writer.check-write"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    l3 as u32
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V6;
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            V6::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V6::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl Writer {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write(&self, tool: &Tool) -> Result<(), StreamError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 23 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 23
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let Tool {
                            name: name1,
                            input_schema: input_schema1,
                            options: options1,
                        } = tool;
                        let vec2 = name1;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>() = len2;
                        *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>() = ptr2.cast_mut();
                        let vec3 = input_schema1;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        *ptr0
                            .add(4 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>() = len3;
                        *ptr0
                            .add(3 * ::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>() = ptr3.cast_mut();
                        match options1 {
                            Some(e) => {
                                *ptr0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>() = (1i32) as u8;
                                let ToolOptions {
                                    meta: meta4,
                                    annotations: annotations4,
                                    description: description4,
                                    output_schema: output_schema4,
                                    title: title4,
                                } = e;
                                match meta4 {
                                    Some(e) => {
                                        *ptr0
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let vec8 = e;
                                        let len8 = vec8.len();
                                        let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let result8 = if layout8.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout8);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec8.into_iter().enumerate() {
                                            let base = result8
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                let (t5_0, t5_1) = e;
                                                let vec6 = t5_0;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                                let vec7 = t5_1;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                        }
                                        *ptr0
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len8;
                                        *ptr0
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = result8;
                                        cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                    }
                                    None => {
                                        *ptr0
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match annotations4 {
                                    Some(e) => {
                                        *ptr0
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let ToolAnnotations { hints: hints9, title: title9 } = e;
                                        let flags10 = hints9;
                                        *ptr0
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = ((flags10.bits() >> 0) as i32) as u8;
                                        match title9 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec11 = e;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *ptr0
                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *ptr0
                                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = ptr11.cast_mut();
                                            }
                                            None => {
                                                *ptr0
                                                    .add(11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    None => {
                                        *ptr0
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match description4 {
                                    Some(e) => {
                                        *ptr0
                                            .add(14 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *ptr0
                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len12;
                                        *ptr0
                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    None => {
                                        *ptr0
                                            .add(14 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match output_schema4 {
                                    Some(e) => {
                                        *ptr0
                                            .add(17 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *ptr0
                                            .add(19 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len13;
                                        *ptr0
                                            .add(18 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    None => {
                                        *ptr0
                                            .add(17 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match title4 {
                                    Some(e) => {
                                        *ptr0
                                            .add(20 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *ptr0
                                            .add(22 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len14;
                                        *ptr0
                                            .add(21 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    None => {
                                        *ptr0
                                            .add(20 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            None => {
                                *ptr0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let ptr15 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-list-result@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[method]writer.write"]
                            fn wit_import16(_: *mut u8, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import16(_: *mut u8, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import16(ptr0, ptr15) };
                        let l17 = i32::from(*ptr15.add(0).cast::<u8>());
                        let result21 = match l17 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l18 = i32::from(*ptr15.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V20;
                                    let v20 = match l18 {
                                        0 => {
                                            let e20 = {
                                                let l19 = *ptr15.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l19 as u32,
                                                    )
                                                }
                                            };
                                            V20::LastOperationFailed(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V20::Closed
                                        }
                                    };
                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result21
                    }
                }
            }
            impl Writer {
                #[allow(unused_unsafe, clippy::all)]
                pub fn close(
                    &self,
                    options: Option<&Options>,
                ) -> Result<(), StreamError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let (
                            result8_0,
                            result8_1,
                            result8_2,
                            result8_3,
                            result8_4,
                            result8_5,
                            result8_6,
                        ) = match options {
                            Some(e) => {
                                let Options { meta: meta0, next_cursor: next_cursor0 } = e;
                                let (result5_0, result5_1, result5_2) = match meta0 {
                                    Some(e) => {
                                        let vec4 = e;
                                        let len4 = vec4.len();
                                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec4.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let result4 = if layout4.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout4);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec4.into_iter().enumerate() {
                                            let base = result4
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                let (t1_0, t1_1) = e;
                                                let vec2 = t1_0;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                                let vec3 = t1_1;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                        }
                                        cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                        (1i32, result4, len4)
                                    }
                                    None => (0i32, ::core::ptr::null_mut(), 0usize),
                                };
                                let (result7_0, result7_1, result7_2) = match next_cursor0 {
                                    Some(e) => {
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        (1i32, ptr6.cast_mut(), len6)
                                    }
                                    None => (0i32, ::core::ptr::null_mut(), 0usize),
                                };
                                (
                                    1i32,
                                    result5_0,
                                    result5_1,
                                    result5_2,
                                    result7_0,
                                    result7_1,
                                    result7_2,
                                )
                            }
                            None => {
                                (
                                    0i32,
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                        };
                        let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-list-result@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[method]writer.close"]
                            fn wit_import10(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import10(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import10(
                                (self).handle() as i32,
                                result8_0,
                                result8_1,
                                result8_2,
                                result8_3,
                                result8_4,
                                result8_5,
                                result8_6,
                                ptr9,
                            )
                        };
                        let l11 = i32::from(*ptr9.add(0).cast::<u8>());
                        let result15 = match l11 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l12 = i32::from(*ptr9.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V14;
                                    let v14 = match l12 {
                                        0 => {
                                            let e14 = {
                                                let l13 = *ptr9.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l13 as u32,
                                                    )
                                                }
                                            };
                                            V14::LastOperationFailed(e14)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V14::Closed
                                        }
                                    };
                                    v14
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result15
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn write(
                id: &Id,
                output: OutputStream,
                tools: &[Tool],
                options: Option<&Options>,
            ) -> Result<(), StreamError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::wasmcp::mcp::types::Id as V1;
                    let (result2_0, result2_1, result2_2) = match id {
                        V1::Number(e) => {
                            (
                                0i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V1::String(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                1i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                    };
                    let vec17 = tools;
                    let len17 = vec17.len();
                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec17.len() * (22 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result17 = if layout17.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout17);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec17.into_iter().enumerate() {
                        let base = result17
                            .add(i * (22 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Tool {
                                name: name3,
                                input_schema: input_schema3,
                                options: options3,
                            } = e;
                            let vec4 = name3;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = input_schema3;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                            match options3 {
                                Some(e) => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let ToolOptions {
                                        meta: meta6,
                                        annotations: annotations6,
                                        description: description6,
                                        output_schema: output_schema6,
                                        title: title6,
                                    } = e;
                                    match meta6 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec10 = e;
                                            let len10 = vec10.len();
                                            let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec10.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result10 = if layout10.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout10);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec10.into_iter().enumerate() {
                                                let base = result10
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t7_0, t7_1) = e;
                                                    let vec8 = t7_0;
                                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                                    let len8 = vec8.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len8;
                                                    *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                                    let vec9 = t7_1;
                                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                                    let len9 = vec9.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len9;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result10;
                                            cleanup_list.extend_from_slice(&[(result10, layout10)]);
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations6 {
                                        Some(e) => {
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let ToolAnnotations { hints: hints11, title: title11 } = e;
                                            let flags12 = hints11;
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = ((flags12.bits() >> 0) as i32) as u8;
                                            match title11 {
                                                Some(e) => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec13 = e;
                                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                                    let len13 = vec13.len();
                                                    *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len13;
                                                    *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description6 {
                                        Some(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec14 = e;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len14;
                                            *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr14.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match output_schema6 {
                                        Some(e) => {
                                            *base
                                                .add(16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = e;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            *base
                                                .add(18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match title6 {
                                        Some(e) => {
                                            *base
                                                .add(19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = e;
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            *base
                                                .add(21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    let (
                        result26_0,
                        result26_1,
                        result26_2,
                        result26_3,
                        result26_4,
                        result26_5,
                        result26_6,
                    ) = match options {
                        Some(e) => {
                            let Options { meta: meta18, next_cursor: next_cursor18 } = e;
                            let (result23_0, result23_1, result23_2) = match meta18 {
                                Some(e) => {
                                    let vec22 = e;
                                    let len22 = vec22.len();
                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec22.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result22 = if layout22.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout22);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec22.into_iter().enumerate() {
                                        let base = result22
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t19_0, t19_1) = e;
                                            let vec20 = t19_0;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len20;
                                            *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                            let vec21 = t19_1;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len21;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                    (1i32, result22, len22)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            let (result25_0, result25_1, result25_2) = match next_cursor18 {
                                Some(e) => {
                                    let vec24 = e;
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    (1i32, ptr24.cast_mut(), len24)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                1i32,
                                result23_0,
                                result23_1,
                                result23_2,
                                result25_0,
                                result25_1,
                                result25_2,
                            )
                        }
                        None => {
                            (
                                0i32,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                    };
                    let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/tools-list-result@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "write"]
                        fn wit_import28(
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import28(
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import28(
                            result2_0,
                            result2_1,
                            result2_2,
                            (&output).take_handle() as i32,
                            result17,
                            len17,
                            result26_0,
                            result26_1,
                            result26_2,
                            result26_3,
                            result26_4,
                            result26_5,
                            result26_6,
                            ptr27,
                        )
                    };
                    let l29 = i32::from(*ptr27.add(0).cast::<u8>());
                    let result33 = match l29 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l30 = i32::from(*ptr27.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V32;
                                let v32 = match l30 {
                                    0 => {
                                        let e32 = {
                                            let l31 = *ptr27.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l31 as u32,
                                                )
                                            }
                                        };
                                        V32::LastOperationFailed(e32)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V32::Closed
                                    }
                                };
                                v32
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout17.size() != 0 {
                        _rt::alloc::dealloc(result17.cast(), layout17);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result33
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn open(
                id: &Id,
                output: OutputStream,
                initial: &[Tool],
            ) -> Result<Writer, StreamError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::wasmcp::mcp::types::Id as V1;
                    let (result2_0, result2_1, result2_2) = match id {
                        V1::Number(e) => {
                            (
                                0i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V1::String(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                1i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                    };
                    let vec17 = initial;
                    let len17 = vec17.len();
                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec17.len() * (22 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result17 = if layout17.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout17);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec17.into_iter().enumerate() {
                        let base = result17
                            .add(i * (22 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Tool {
                                name: name3,
                                input_schema: input_schema3,
                                options: options3,
                            } = e;
                            let vec4 = name3;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = input_schema3;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                            match options3 {
                                Some(e) => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let ToolOptions {
                                        meta: meta6,
                                        annotations: annotations6,
                                        description: description6,
                                        output_schema: output_schema6,
                                        title: title6,
                                    } = e;
                                    match meta6 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec10 = e;
                                            let len10 = vec10.len();
                                            let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec10.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result10 = if layout10.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout10);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec10.into_iter().enumerate() {
                                                let base = result10
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t7_0, t7_1) = e;
                                                    let vec8 = t7_0;
                                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                                    let len8 = vec8.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len8;
                                                    *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                                    let vec9 = t7_1;
                                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                                    let len9 = vec9.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len9;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result10;
                                            cleanup_list.extend_from_slice(&[(result10, layout10)]);
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations6 {
                                        Some(e) => {
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let ToolAnnotations { hints: hints11, title: title11 } = e;
                                            let flags12 = hints11;
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = ((flags12.bits() >> 0) as i32) as u8;
                                            match title11 {
                                                Some(e) => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec13 = e;
                                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                                    let len13 = vec13.len();
                                                    *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len13;
                                                    *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description6 {
                                        Some(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec14 = e;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len14;
                                            *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr14.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match output_schema6 {
                                        Some(e) => {
                                            *base
                                                .add(16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = e;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            *base
                                                .add(18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match title6 {
                                        Some(e) => {
                                            *base
                                                .add(19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = e;
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            *base
                                                .add(21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/tools-list-result@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "open"]
                        fn wit_import19(
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import19(
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import19(
                            result2_0,
                            result2_1,
                            result2_2,
                            (&output).take_handle() as i32,
                            result17,
                            len17,
                            ptr18,
                        )
                    };
                    let l20 = i32::from(*ptr18.add(0).cast::<u8>());
                    let result25 = match l20 {
                        0 => {
                            let e = {
                                let l21 = *ptr18.add(4).cast::<i32>();
                                unsafe { Writer::from_handle(l21 as u32) }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l22 = i32::from(*ptr18.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V24;
                                let v24 = match l22 {
                                    0 => {
                                        let e24 = {
                                            let l23 = *ptr18.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l23 as u32,
                                                )
                                            }
                                        };
                                        V24::LastOperationFailed(e24)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V24::Closed
                                    }
                                };
                                v24
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout17.size() != 0 {
                        _rt::alloc::dealloc(result17.cast(), layout17);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result25
                }
            }
        }
        /// Content types and structures for MCP messages.
        ///
        /// This interface defines the content blocks that can be included in MCP messages,
        /// mapping directly to the ContentBlock type union in the MCP specification.
        ///
        /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod content {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Meta = super::super::super::wasmcp::mcp::types::Meta;
            /// Role in a conversation.
            ///
            /// Maps to the Role type in the MCP spec:
            /// "The sender or recipient of messages and data in a conversation."
            /// Valid values: "user" | "assistant"
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#role>
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Optional annotations for the client.
            ///
            /// The client can use annotations to inform how objects are used or displayed.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#annotations>
            #[derive(Clone)]
            pub struct Annotations {
                /// Describes who the intended customer of this object or data is.
                ///
                /// It can include multiple entries to indicate content useful for multiple audiences (e.g., [“user”, “assistant”]).
                pub audience: Option<_rt::Vec<Role>>,
                /// The moment the resource was last modified, as an ISO 8601 formatted string.
                ///
                /// Should be an ISO 8601 formatted string (e.g., “2025-01-12T15:00:58Z”).
                ///
                /// Examples: last activity timestamp in an open file, timestamp when the resource was attached, etc.
                pub last_modified: Option<_rt::String>,
                /// Describes how important this data is for operating the server.
                ///
                /// A value of 1 means “most important,” and indicates that the data is effectively required, while 0 means “least important,” and indicates that the data is entirely optional.
                pub priority: f64,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("last-modified", &self.last_modified)
                        .field("priority", &self.priority)
                        .finish()
                }
            }
            /// Options for content blocks.
            #[derive(Clone)]
            pub struct ContentOptions {
                /// Optional annotations for the client.
                pub annotations: Option<Annotations>,
                /// Optional metadata.
                ///
                /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for ContentOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ContentOptions")
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Text provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#textcontent>
            #[derive(Clone)]
            pub struct TextContent {
                /// The text content of the message.
                pub text: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// An image provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#imagecontent>
            #[derive(Clone)]
            pub struct ImageContent {
                /// The base64-encoded image data.
                pub data: _rt::Vec<u8>,
                /// The MIME type of the image. Different providers may support different image types.
                pub mime_type: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Audio provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#audiocontent>
            #[derive(Clone)]
            pub struct AudioContent {
                /// The base64-encoded audio data.
                pub data: _rt::Vec<u8>,
                /// The MIME type of the audio. Different providers may support different audio types.
                pub mime_type: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Options for resource link content.
            #[derive(Clone)]
            pub struct ResourceLinkContentOptions {
                pub title: Option<_rt::String>,
                pub description: Option<_rt::String>,
                pub size: Option<u64>,
                pub mime_type: Option<_rt::String>,
                /// Optional annotations for the client.
                pub annotations: Option<Annotations>,
                /// Optional metadata.
                ///
                /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for ResourceLinkContentOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLinkContentOptions")
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("size", &self.size)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// A resource that the server is capable of reading, included in a prompt or tool call result.
            ///
            /// Note: resource links returned by tools are not guaranteed to appear in the results of resources/list requests.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcelink>
            #[derive(Clone)]
            pub struct ResourceLinkContent {
                /// The URI of this resource.
                pub uri: _rt::String,
                /// Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn’t present).
                pub name: _rt::String,
                pub options: Option<ResourceLinkContentOptions>,
            }
            impl ::core::fmt::Debug for ResourceLinkContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLinkContent")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Options for embedded resources.
            #[derive(Clone)]
            pub struct EmbeddedResourceOptions {
                pub mime_type: Option<_rt::String>,
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for EmbeddedResourceOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResourceOptions")
                        .field("mime-type", &self.mime_type)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Text resource contents.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#textresourcecontents>
            #[derive(Clone)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub text: _rt::String,
                pub options: Option<EmbeddedResourceOptions>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("text", &self.text)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Binary resource contents.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#blobresourcecontents>
            #[derive(Clone)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub blob: _rt::Vec<u8>,
                pub options: Option<EmbeddedResourceOptions>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("blob", &self.blob)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Embedded resource data.
            #[derive(Clone)]
            pub enum EmbeddedResource {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        EmbeddedResource::Text(e) => {
                            f.debug_tuple("EmbeddedResource::Text").field(e).finish()
                        }
                        EmbeddedResource::Blob(e) => {
                            f.debug_tuple("EmbeddedResource::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource with content options.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#embeddedresource>
            #[derive(Clone)]
            pub struct EmbeddedResourceContent {
                pub resource: EmbeddedResource,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for EmbeddedResourceContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResourceContent")
                        .field("resource", &self.resource)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Content blocks that can be included in messages.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
            #[derive(Clone)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLinkContent),
                EmbeddedResource(EmbeddedResourceContent),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
        }
        /// Writes tools/call content results (unstructured).
        ///
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-call>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_call_content {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type StreamError = super::super::super::wasi::io::streams::StreamError;
            pub type ContentBlock = super::super::super::wasmcp::mcp::content::ContentBlock;
            pub type Id = super::super::super::wasmcp::mcp::types::Id;
            pub type Meta = super::super::super::wasmcp::mcp::types::Meta;
            #[derive(Clone)]
            pub struct Options {
                pub is_error: bool,
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for Options {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Options")
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Writer {
                handle: _rt::Resource<Writer>,
            }
            impl Writer {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Writer {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]writer"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Writer {
                #[allow(unused_unsafe, clippy::all)]
                pub fn check_write(&self) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[method]writer.check-write"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V6;
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            V6::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V6::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl Writer {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[method]writer.write"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V6;
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            V6::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V6::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl Writer {
                #[allow(unused_unsafe, clippy::all)]
                pub fn next(&self, content: &ContentBlock) -> Result<(), StreamError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 72 + 20 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 72
                                + 20 * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        use super::super::super::wasmcp::mcp::content::ContentBlock as V75;
                        match content {
                            V75::Text(e) => {
                                *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                let super::super::super::wasmcp::mcp::content::TextContent {
                                    text: text1,
                                    options: options1,
                                } = e;
                                let vec2 = text1;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *ptr0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len2;
                                *ptr0.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                match options1 {
                                    Some(e) => {
                                        *ptr0
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasmcp::mcp::content::ContentOptions {
                                            annotations: annotations3,
                                            meta: meta3,
                                        } = e;
                                        match annotations3 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let super::super::super::wasmcp::mcp::content::Annotations {
                                                    audience: audience4,
                                                    last_modified: last_modified4,
                                                    priority: priority4,
                                                } = e;
                                                match audience4 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec5 = e;
                                                        let len5 = vec5.len();
                                                        let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec5.len() * 1,
                                                            1,
                                                        );
                                                        let result5 = if layout5.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout5);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec5.into_iter().enumerate() {
                                                            let base = result5.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                            }
                                                        }
                                                        *ptr0
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len5;
                                                        *ptr0
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = result5;
                                                        cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match last_modified4 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec6 = e;
                                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                                        let len6 = vec6.len();
                                                        *ptr0
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len6;
                                                        *ptr0
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr6.cast_mut();
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                *ptr0
                                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f64>() = _rt::as_f64(priority4);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match meta3 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec10 = e;
                                                let len10 = vec10.len();
                                                let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec10.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                let result10 = if layout10.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout10);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec10.into_iter().enumerate() {
                                                    let base = result10
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    {
                                                        let (t7_0, t7_1) = e;
                                                        let vec8 = t7_0;
                                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                                        let len8 = vec8.len();
                                                        *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len8;
                                                        *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                                        let vec9 = t7_1;
                                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                                        let len9 = vec9.len();
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len9;
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr9.cast_mut();
                                                    }
                                                }
                                                *ptr0
                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *ptr0
                                                    .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = result10;
                                                cleanup_list.extend_from_slice(&[(result10, layout10)]);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    None => {
                                        *ptr0
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            V75::Image(e) => {
                                *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                let super::super::super::wasmcp::mcp::content::ImageContent {
                                    data: data11,
                                    mime_type: mime_type11,
                                    options: options11,
                                } = e;
                                let vec12 = data11;
                                let ptr12 = vec12.as_ptr().cast::<u8>();
                                let len12 = vec12.len();
                                *ptr0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *ptr0.add(16).cast::<*mut u8>() = ptr12.cast_mut();
                                let vec13 = mime_type11;
                                let ptr13 = vec13.as_ptr().cast::<u8>();
                                let len13 = vec13.len();
                                *ptr0
                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len13;
                                *ptr0
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>() = ptr13.cast_mut();
                                match options11 {
                                    Some(e) => {
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasmcp::mcp::content::ContentOptions {
                                            annotations: annotations14,
                                            meta: meta14,
                                        } = e;
                                        match annotations14 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let super::super::super::wasmcp::mcp::content::Annotations {
                                                    audience: audience15,
                                                    last_modified: last_modified15,
                                                    priority: priority15,
                                                } = e;
                                                match audience15 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec16 = e;
                                                        let len16 = vec16.len();
                                                        let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec16.len() * 1,
                                                            1,
                                                        );
                                                        let result16 = if layout16.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout16);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec16.into_iter().enumerate() {
                                                            let base = result16.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                            }
                                                        }
                                                        *ptr0
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len16;
                                                        *ptr0
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = result16;
                                                        cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match last_modified15 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec17 = e;
                                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                                        let len17 = vec17.len();
                                                        *ptr0
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len17;
                                                        *ptr0
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr17.cast_mut();
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                *ptr0
                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f64>() = _rt::as_f64(priority15);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match meta14 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec21 = e;
                                                let len21 = vec21.len();
                                                let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec21.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                let result21 = if layout21.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout21);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec21.into_iter().enumerate() {
                                                    let base = result21
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    {
                                                        let (t18_0, t18_1) = e;
                                                        let vec19 = t18_0;
                                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                                        let len19 = vec19.len();
                                                        *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len19;
                                                        *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                        let vec20 = t18_1;
                                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                                        let len20 = vec20.len();
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len20;
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr20.cast_mut();
                                                    }
                                                }
                                                *ptr0
                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len21;
                                                *ptr0
                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = result21;
                                                cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    None => {
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            V75::Audio(e) => {
                                *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                                let super::super::super::wasmcp::mcp::content::AudioContent {
                                    data: data22,
                                    mime_type: mime_type22,
                                    options: options22,
                                } = e;
                                let vec23 = data22;
                                let ptr23 = vec23.as_ptr().cast::<u8>();
                                let len23 = vec23.len();
                                *ptr0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len23;
                                *ptr0.add(16).cast::<*mut u8>() = ptr23.cast_mut();
                                let vec24 = mime_type22;
                                let ptr24 = vec24.as_ptr().cast::<u8>();
                                let len24 = vec24.len();
                                *ptr0
                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len24;
                                *ptr0
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>() = ptr24.cast_mut();
                                match options22 {
                                    Some(e) => {
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasmcp::mcp::content::ContentOptions {
                                            annotations: annotations25,
                                            meta: meta25,
                                        } = e;
                                        match annotations25 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let super::super::super::wasmcp::mcp::content::Annotations {
                                                    audience: audience26,
                                                    last_modified: last_modified26,
                                                    priority: priority26,
                                                } = e;
                                                match audience26 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec27 = e;
                                                        let len27 = vec27.len();
                                                        let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec27.len() * 1,
                                                            1,
                                                        );
                                                        let result27 = if layout27.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout27);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec27.into_iter().enumerate() {
                                                            let base = result27.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                            }
                                                        }
                                                        *ptr0
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len27;
                                                        *ptr0
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = result27;
                                                        cleanup_list.extend_from_slice(&[(result27, layout27)]);
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match last_modified26 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec28 = e;
                                                        let ptr28 = vec28.as_ptr().cast::<u8>();
                                                        let len28 = vec28.len();
                                                        *ptr0
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len28;
                                                        *ptr0
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr28.cast_mut();
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                *ptr0
                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f64>() = _rt::as_f64(priority26);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match meta25 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec32 = e;
                                                let len32 = vec32.len();
                                                let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec32.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                let result32 = if layout32.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout32);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec32.into_iter().enumerate() {
                                                    let base = result32
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    {
                                                        let (t29_0, t29_1) = e;
                                                        let vec30 = t29_0;
                                                        let ptr30 = vec30.as_ptr().cast::<u8>();
                                                        let len30 = vec30.len();
                                                        *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len30;
                                                        *base.add(0).cast::<*mut u8>() = ptr30.cast_mut();
                                                        let vec31 = t29_1;
                                                        let ptr31 = vec31.as_ptr().cast::<u8>();
                                                        let len31 = vec31.len();
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len31;
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr31.cast_mut();
                                                    }
                                                }
                                                *ptr0
                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len32;
                                                *ptr0
                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = result32;
                                                cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    None => {
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            V75::ResourceLink(e) => {
                                *ptr0.add(8).cast::<u8>() = (3i32) as u8;
                                let super::super::super::wasmcp::mcp::content::ResourceLinkContent {
                                    uri: uri33,
                                    name: name33,
                                    options: options33,
                                } = e;
                                let vec34 = uri33;
                                let ptr34 = vec34.as_ptr().cast::<u8>();
                                let len34 = vec34.len();
                                *ptr0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len34;
                                *ptr0.add(16).cast::<*mut u8>() = ptr34.cast_mut();
                                let vec35 = name33;
                                let ptr35 = vec35.as_ptr().cast::<u8>();
                                let len35 = vec35.len();
                                *ptr0
                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len35;
                                *ptr0
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>() = ptr35.cast_mut();
                                match options33 {
                                    Some(e) => {
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasmcp::mcp::content::ResourceLinkContentOptions {
                                            title: title36,
                                            description: description36,
                                            size: size36,
                                            mime_type: mime_type36,
                                            annotations: annotations36,
                                            meta: meta36,
                                        } = e;
                                        match title36 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec37 = e;
                                                let ptr37 = vec37.as_ptr().cast::<u8>();
                                                let len37 = vec37.len();
                                                *ptr0
                                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len37;
                                                *ptr0
                                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = ptr37.cast_mut();
                                            }
                                            None => {
                                                *ptr0
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match description36 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec38 = e;
                                                let ptr38 = vec38.as_ptr().cast::<u8>();
                                                let len38 = vec38.len();
                                                *ptr0
                                                    .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len38;
                                                *ptr0
                                                    .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = ptr38.cast_mut();
                                            }
                                            None => {
                                                *ptr0
                                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match size36 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                *ptr0
                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(e);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match mime_type36 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec39 = e;
                                                let ptr39 = vec39.as_ptr().cast::<u8>();
                                                let len39 = vec39.len();
                                                *ptr0
                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len39;
                                                *ptr0
                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = ptr39.cast_mut();
                                            }
                                            None => {
                                                *ptr0
                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match annotations36 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let super::super::super::wasmcp::mcp::content::Annotations {
                                                    audience: audience40,
                                                    last_modified: last_modified40,
                                                    priority: priority40,
                                                } = e;
                                                match audience40 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec41 = e;
                                                        let len41 = vec41.len();
                                                        let layout41 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec41.len() * 1,
                                                            1,
                                                        );
                                                        let result41 = if layout41.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout41).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout41);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec41.into_iter().enumerate() {
                                                            let base = result41.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                            }
                                                        }
                                                        *ptr0
                                                            .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len41;
                                                        *ptr0
                                                            .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = result41;
                                                        cleanup_list.extend_from_slice(&[(result41, layout41)]);
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match last_modified40 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec42 = e;
                                                        let ptr42 = vec42.as_ptr().cast::<u8>();
                                                        let len42 = vec42.len();
                                                        *ptr0
                                                            .add(56 + 17 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len42;
                                                        *ptr0
                                                            .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr42.cast_mut();
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                *ptr0
                                                    .add(56 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f64>() = _rt::as_f64(priority40);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match meta36 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec46 = e;
                                                let len46 = vec46.len();
                                                let layout46 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec46.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                let result46 = if layout46.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout46).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout46);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec46.into_iter().enumerate() {
                                                    let base = result46
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    {
                                                        let (t43_0, t43_1) = e;
                                                        let vec44 = t43_0;
                                                        let ptr44 = vec44.as_ptr().cast::<u8>();
                                                        let len44 = vec44.len();
                                                        *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len44;
                                                        *base.add(0).cast::<*mut u8>() = ptr44.cast_mut();
                                                        let vec45 = t43_1;
                                                        let ptr45 = vec45.as_ptr().cast::<u8>();
                                                        let len45 = vec45.len();
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len45;
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr45.cast_mut();
                                                    }
                                                }
                                                *ptr0
                                                    .add(64 + 20 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len46;
                                                *ptr0
                                                    .add(64 + 19 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = result46;
                                                cleanup_list.extend_from_slice(&[(result46, layout46)]);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    None => {
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            V75::EmbeddedResource(e) => {
                                *ptr0.add(8).cast::<u8>() = (4i32) as u8;
                                let super::super::super::wasmcp::mcp::content::EmbeddedResourceContent {
                                    resource: resource47,
                                    options: options47,
                                } = e;
                                use super::super::super::wasmcp::mcp::content::EmbeddedResource as V66;
                                match resource47 {
                                    V66::Text(e) => {
                                        *ptr0.add(16).cast::<u8>() = (0i32) as u8;
                                        let super::super::super::wasmcp::mcp::content::TextResourceContents {
                                            uri: uri48,
                                            text: text48,
                                            options: options48,
                                        } = e;
                                        let vec49 = uri48;
                                        let ptr49 = vec49.as_ptr().cast::<u8>();
                                        let len49 = vec49.len();
                                        *ptr0
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len49;
                                        *ptr0
                                            .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr49.cast_mut();
                                        let vec50 = text48;
                                        let ptr50 = vec50.as_ptr().cast::<u8>();
                                        let len50 = vec50.len();
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len50;
                                        *ptr0
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr50.cast_mut();
                                        match options48 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                    mime_type: mime_type51,
                                                    meta: meta51,
                                                } = e;
                                                match mime_type51 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec52 = e;
                                                        let ptr52 = vec52.as_ptr().cast::<u8>();
                                                        let len52 = vec52.len();
                                                        *ptr0
                                                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len52;
                                                        *ptr0
                                                            .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr52.cast_mut();
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match meta51 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec56 = e;
                                                        let len56 = vec56.len();
                                                        let layout56 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec56.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let result56 = if layout56.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout56).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout56);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec56.into_iter().enumerate() {
                                                            let base = result56
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            {
                                                                let (t53_0, t53_1) = e;
                                                                let vec54 = t53_0;
                                                                let ptr54 = vec54.as_ptr().cast::<u8>();
                                                                let len54 = vec54.len();
                                                                *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>() = len54;
                                                                *base.add(0).cast::<*mut u8>() = ptr54.cast_mut();
                                                                let vec55 = t53_1;
                                                                let ptr55 = vec55.as_ptr().cast::<u8>();
                                                                let len55 = vec55.len();
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>() = len55;
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>() = ptr55.cast_mut();
                                                            }
                                                        }
                                                        *ptr0
                                                            .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len56;
                                                        *ptr0
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = result56;
                                                        cleanup_list.extend_from_slice(&[(result56, layout56)]);
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            None => {
                                                *ptr0
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V66::Blob(e) => {
                                        *ptr0.add(16).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasmcp::mcp::content::BlobResourceContents {
                                            uri: uri57,
                                            blob: blob57,
                                            options: options57,
                                        } = e;
                                        let vec58 = uri57;
                                        let ptr58 = vec58.as_ptr().cast::<u8>();
                                        let len58 = vec58.len();
                                        *ptr0
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len58;
                                        *ptr0
                                            .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr58.cast_mut();
                                        let vec59 = blob57;
                                        let ptr59 = vec59.as_ptr().cast::<u8>();
                                        let len59 = vec59.len();
                                        *ptr0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len59;
                                        *ptr0
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr59.cast_mut();
                                        match options57 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                    mime_type: mime_type60,
                                                    meta: meta60,
                                                } = e;
                                                match mime_type60 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec61 = e;
                                                        let ptr61 = vec61.as_ptr().cast::<u8>();
                                                        let len61 = vec61.len();
                                                        *ptr0
                                                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len61;
                                                        *ptr0
                                                            .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr61.cast_mut();
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match meta60 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec65 = e;
                                                        let len65 = vec65.len();
                                                        let layout65 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec65.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let result65 = if layout65.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout65).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout65);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec65.into_iter().enumerate() {
                                                            let base = result65
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            {
                                                                let (t62_0, t62_1) = e;
                                                                let vec63 = t62_0;
                                                                let ptr63 = vec63.as_ptr().cast::<u8>();
                                                                let len63 = vec63.len();
                                                                *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>() = len63;
                                                                *base.add(0).cast::<*mut u8>() = ptr63.cast_mut();
                                                                let vec64 = t62_1;
                                                                let ptr64 = vec64.as_ptr().cast::<u8>();
                                                                let len64 = vec64.len();
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>() = len64;
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>() = ptr64.cast_mut();
                                                            }
                                                        }
                                                        *ptr0
                                                            .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len65;
                                                        *ptr0
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = result65;
                                                        cleanup_list.extend_from_slice(&[(result65, layout65)]);
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            None => {
                                                *ptr0
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                }
                                match options47 {
                                    Some(e) => {
                                        *ptr0
                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasmcp::mcp::content::ContentOptions {
                                            annotations: annotations67,
                                            meta: meta67,
                                        } = e;
                                        match annotations67 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let super::super::super::wasmcp::mcp::content::Annotations {
                                                    audience: audience68,
                                                    last_modified: last_modified68,
                                                    priority: priority68,
                                                } = e;
                                                match audience68 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec69 = e;
                                                        let len69 = vec69.len();
                                                        let layout69 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec69.len() * 1,
                                                            1,
                                                        );
                                                        let result69 = if layout69.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout69).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout69);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec69.into_iter().enumerate() {
                                                            let base = result69.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                            }
                                                        }
                                                        *ptr0
                                                            .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len69;
                                                        *ptr0
                                                            .add(32 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = result69;
                                                        cleanup_list.extend_from_slice(&[(result69, layout69)]);
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match last_modified68 {
                                                    Some(e) => {
                                                        *ptr0
                                                            .add(32 + 15 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (1i32) as u8;
                                                        let vec70 = e;
                                                        let ptr70 = vec70.as_ptr().cast::<u8>();
                                                        let len70 = vec70.len();
                                                        *ptr0
                                                            .add(32 + 17 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len70;
                                                        *ptr0
                                                            .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr70.cast_mut();
                                                    }
                                                    None => {
                                                        *ptr0
                                                            .add(32 + 15 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                *ptr0
                                                    .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f64>() = _rt::as_f64(priority68);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        match meta67 {
                                            Some(e) => {
                                                *ptr0
                                                    .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (1i32) as u8;
                                                let vec74 = e;
                                                let len74 = vec74.len();
                                                let layout74 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec74.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                let result74 = if layout74.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout74).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout74);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec74.into_iter().enumerate() {
                                                    let base = result74
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    {
                                                        let (t71_0, t71_1) = e;
                                                        let vec72 = t71_0;
                                                        let ptr72 = vec72.as_ptr().cast::<u8>();
                                                        let len72 = vec72.len();
                                                        *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len72;
                                                        *base.add(0).cast::<*mut u8>() = ptr72.cast_mut();
                                                        let vec73 = t71_1;
                                                        let ptr73 = vec73.as_ptr().cast::<u8>();
                                                        let len73 = vec73.len();
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len73;
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr73.cast_mut();
                                                    }
                                                }
                                                *ptr0
                                                    .add(40 + 20 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len74;
                                                *ptr0
                                                    .add(40 + 19 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = result74;
                                                cleanup_list.extend_from_slice(&[(result74, layout74)]);
                                            }
                                            None => {
                                                *ptr0
                                                    .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    None => {
                                        *ptr0
                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        let ptr76 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[method]writer.next"]
                            fn wit_import77(_: *mut u8, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import77(_: *mut u8, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import77(ptr0, ptr76) };
                        let l78 = i32::from(*ptr76.add(0).cast::<u8>());
                        let result82 = match l78 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l79 = i32::from(*ptr76.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V81;
                                    let v81 = match l79 {
                                        0 => {
                                            let e81 = {
                                                let l80 = *ptr76.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l80 as u32,
                                                    )
                                                }
                                            };
                                            V81::LastOperationFailed(e81)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V81::Closed
                                        }
                                    };
                                    v81
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result82
                    }
                }
            }
            impl Writer {
                #[allow(unused_unsafe, clippy::all)]
                pub fn close(
                    &self,
                    options: Option<&Options>,
                ) -> Result<(), StreamError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let (result6_0, result6_1, result6_2, result6_3, result6_4) = match options {
                            Some(e) => {
                                let Options { is_error: is_error0, meta: meta0 } = e;
                                let (result5_0, result5_1, result5_2) = match meta0 {
                                    Some(e) => {
                                        let vec4 = e;
                                        let len4 = vec4.len();
                                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec4.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let result4 = if layout4.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout4);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec4.into_iter().enumerate() {
                                            let base = result4
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                let (t1_0, t1_1) = e;
                                                let vec2 = t1_0;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                                let vec3 = t1_1;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                        }
                                        cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                        (1i32, result4, len4)
                                    }
                                    None => (0i32, ::core::ptr::null_mut(), 0usize),
                                };
                                (
                                    1i32,
                                    match is_error0 {
                                        true => 1,
                                        false => 0,
                                    },
                                    result5_0,
                                    result5_1,
                                    result5_2,
                                )
                            }
                            None => (0i32, 0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                        )]
                        unsafe extern "C" {
                            #[link_name = "[method]writer.close"]
                            fn wit_import8(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import8(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import8(
                                (self).handle() as i32,
                                result6_0,
                                result6_1,
                                result6_2,
                                result6_3,
                                result6_4,
                                ptr7,
                            )
                        };
                        let l9 = i32::from(*ptr7.add(0).cast::<u8>());
                        let result13 = match l9 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l10 = i32::from(*ptr7.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V12;
                                    let v12 = match l10 {
                                        0 => {
                                            let e12 = {
                                                let l11 = *ptr7.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l11 as u32,
                                                    )
                                                }
                                            };
                                            V12::LastOperationFailed(e12)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V12::Closed
                                        }
                                    };
                                    v12
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result13
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn write_text(
                id: &Id,
                output: OutputStream,
                text: &str,
                options: Option<&Options>,
            ) -> Result<(), StreamError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::wasmcp::mcp::types::Id as V1;
                    let (result2_0, result2_1, result2_2) = match id {
                        V1::Number(e) => {
                            (
                                0i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V1::String(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                1i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                    };
                    let vec3 = text;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result10_0, result10_1, result10_2, result10_3, result10_4) = match options {
                        Some(e) => {
                            let Options { is_error: is_error4, meta: meta4 } = e;
                            let (result9_0, result9_1, result9_2) = match meta4 {
                                Some(e) => {
                                    let vec8 = e;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t5_0, t5_1) = e;
                                            let vec6 = t5_0;
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                            let vec7 = t5_1;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                    (1i32, result8, len8)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                1i32,
                                match is_error4 {
                                    true => 1,
                                    false => 0,
                                },
                                result9_0,
                                result9_1,
                                result9_2,
                            )
                        }
                        None => (0i32, 0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "write-text"]
                        fn wit_import12(
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import12(
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import12(
                            result2_0,
                            result2_1,
                            result2_2,
                            (&output).take_handle() as i32,
                            ptr3.cast_mut(),
                            len3,
                            result10_0,
                            result10_1,
                            result10_2,
                            result10_3,
                            result10_4,
                            ptr11,
                        )
                    };
                    let l13 = i32::from(*ptr11.add(0).cast::<u8>());
                    let result17 = match l13 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l14 = i32::from(*ptr11.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V16;
                                let v16 = match l14 {
                                    0 => {
                                        let e16 = {
                                            let l15 = *ptr11.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l15 as u32,
                                                )
                                            }
                                        };
                                        V16::LastOperationFailed(e16)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V16::Closed
                                    }
                                };
                                v16
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result17
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn write_error(
                id: &Id,
                output: OutputStream,
                reason: &str,
            ) -> Result<(), StreamError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::wasmcp::mcp::types::Id as V1;
                    let (result2_0, result2_1, result2_2) = match id {
                        V1::Number(e) => {
                            (
                                0i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V1::String(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                1i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                    };
                    let vec3 = reason;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "write-error"]
                        fn wit_import5(
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            result2_0,
                            result2_1,
                            result2_2,
                            (&output).take_handle() as i32,
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        )
                    };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result10 = match l6 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l7 = i32::from(*ptr4.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V9;
                                let v9 = match l7 {
                                    0 => {
                                        let e9 = {
                                            let l8 = *ptr4.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l8 as u32,
                                                )
                                            }
                                        };
                                        V9::LastOperationFailed(e9)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V9::Closed
                                    }
                                };
                                v9
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn write(
                id: &Id,
                output: OutputStream,
                content: &[ContentBlock],
                options: Option<&Options>,
            ) -> Result<(), StreamError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::wasmcp::mcp::types::Id as V1;
                    let (result2_0, result2_1, result2_2) = match id {
                        V1::Number(e) => {
                            (
                                0i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V1::String(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                1i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                    };
                    let vec78 = content;
                    let len78 = vec78.len();
                    let layout78 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec78.len() * (64 + 20 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result78 = if layout78.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout78).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout78);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec78.into_iter().enumerate() {
                        let base = result78
                            .add(i * (64 + 20 * ::core::mem::size_of::<*const u8>()));
                        {
                            use super::super::super::wasmcp::mcp::content::ContentBlock as V77;
                            match e {
                                V77::Text(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::TextContent {
                                        text: text3,
                                        options: options3,
                                    } = e;
                                    let vec4 = text3;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    match options3 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::ContentOptions {
                                                annotations: annotations5,
                                                meta: meta5,
                                            } = e;
                                            match annotations5 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::wasmcp::mcp::content::Annotations {
                                                        audience: audience6,
                                                        last_modified: last_modified6,
                                                        priority: priority6,
                                                    } = e;
                                                    match audience6 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec7 = e;
                                                            let len7 = vec7.len();
                                                            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec7.len() * 1,
                                                                1,
                                                            );
                                                            let result7 = if layout7.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout7);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec7.into_iter().enumerate() {
                                                                let base = result7.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len7;
                                                            *base
                                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result7;
                                                            cleanup_list.extend_from_slice(&[(result7, layout7)]);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified6 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec8 = e;
                                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                                            let len8 = vec8.len();
                                                            *base
                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len8;
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr8.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    *base
                                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(priority6);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta5 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec12 = e;
                                                    let len12 = vec12.len();
                                                    let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec12.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result12 = if layout12.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout12);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec12.into_iter().enumerate() {
                                                        let base = result12
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t9_0, t9_1) = e;
                                                            let vec10 = t9_0;
                                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                                            let len10 = vec10.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len10;
                                                            *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                                            let vec11 = t9_1;
                                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                                            let len11 = vec11.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len11;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr11.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len12;
                                                    *base
                                                        .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result12;
                                                    cleanup_list.extend_from_slice(&[(result12, layout12)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V77::Image(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::ImageContent {
                                        data: data13,
                                        mime_type: mime_type13,
                                        options: options13,
                                    } = e;
                                    let vec14 = data13;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    let vec15 = mime_type13;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                    match options13 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::ContentOptions {
                                                annotations: annotations16,
                                                meta: meta16,
                                            } = e;
                                            match annotations16 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::wasmcp::mcp::content::Annotations {
                                                        audience: audience17,
                                                        last_modified: last_modified17,
                                                        priority: priority17,
                                                    } = e;
                                                    match audience17 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec18 = e;
                                                            let len18 = vec18.len();
                                                            let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec18.len() * 1,
                                                                1,
                                                            );
                                                            let result18 = if layout18.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout18);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec18.into_iter().enumerate() {
                                                                let base = result18.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len18;
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result18;
                                                            cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified17 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec19 = e;
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            *base
                                                                .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len19;
                                                            *base
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr19.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    *base
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(priority17);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta16 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec23 = e;
                                                    let len23 = vec23.len();
                                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec23.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result23 = if layout23.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout23);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec23.into_iter().enumerate() {
                                                        let base = result23
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t20_0, t20_1) = e;
                                                            let vec21 = t20_0;
                                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                                            let len21 = vec21.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len21;
                                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                                            let vec22 = t20_1;
                                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                                            let len22 = vec22.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len22;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr22.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len23;
                                                    *base
                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result23;
                                                    cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V77::Audio(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::AudioContent {
                                        data: data24,
                                        mime_type: mime_type24,
                                        options: options24,
                                    } = e;
                                    let vec25 = data24;
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    let vec26 = mime_type24;
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                    match options24 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::ContentOptions {
                                                annotations: annotations27,
                                                meta: meta27,
                                            } = e;
                                            match annotations27 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::wasmcp::mcp::content::Annotations {
                                                        audience: audience28,
                                                        last_modified: last_modified28,
                                                        priority: priority28,
                                                    } = e;
                                                    match audience28 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec29 = e;
                                                            let len29 = vec29.len();
                                                            let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec29.len() * 1,
                                                                1,
                                                            );
                                                            let result29 = if layout29.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout29);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec29.into_iter().enumerate() {
                                                                let base = result29.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len29;
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result29;
                                                            cleanup_list.extend_from_slice(&[(result29, layout29)]);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified28 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec30 = e;
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            *base
                                                                .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len30;
                                                            *base
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr30.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    *base
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(priority28);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta27 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec34 = e;
                                                    let len34 = vec34.len();
                                                    let layout34 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec34.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result34 = if layout34.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout34).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout34);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec34.into_iter().enumerate() {
                                                        let base = result34
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t31_0, t31_1) = e;
                                                            let vec32 = t31_0;
                                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                                            let len32 = vec32.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len32;
                                                            *base.add(0).cast::<*mut u8>() = ptr32.cast_mut();
                                                            let vec33 = t31_1;
                                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                                            let len33 = vec33.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len33;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr33.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len34;
                                                    *base
                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result34;
                                                    cleanup_list.extend_from_slice(&[(result34, layout34)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V77::ResourceLink(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::ResourceLinkContent {
                                        uri: uri35,
                                        name: name35,
                                        options: options35,
                                    } = e;
                                    let vec36 = uri35;
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len36;
                                    *base.add(8).cast::<*mut u8>() = ptr36.cast_mut();
                                    let vec37 = name35;
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len37;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr37.cast_mut();
                                    match options35 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::ResourceLinkContentOptions {
                                                title: title38,
                                                description: description38,
                                                size: size38,
                                                mime_type: mime_type38,
                                                annotations: annotations38,
                                                meta: meta38,
                                            } = e;
                                            match title38 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec39 = e;
                                                    let ptr39 = vec39.as_ptr().cast::<u8>();
                                                    let len39 = vec39.len();
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len39;
                                                    *base
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr39.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match description38 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec40 = e;
                                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                                    let len40 = vec40.len();
                                                    *base
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len40;
                                                    *base
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr40.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match size38 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match mime_type38 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec41 = e;
                                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                                    let len41 = vec41.len();
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len41;
                                                    *base
                                                        .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr41.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match annotations38 {
                                                Some(e) => {
                                                    *base
                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::wasmcp::mcp::content::Annotations {
                                                        audience: audience42,
                                                        last_modified: last_modified42,
                                                        priority: priority42,
                                                    } = e;
                                                    match audience42 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec43 = e;
                                                            let len43 = vec43.len();
                                                            let layout43 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec43.len() * 1,
                                                                1,
                                                            );
                                                            let result43 = if layout43.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout43).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout43);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec43.into_iter().enumerate() {
                                                                let base = result43.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len43;
                                                            *base
                                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result43;
                                                            cleanup_list.extend_from_slice(&[(result43, layout43)]);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified42 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec44 = e;
                                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                                            let len44 = vec44.len();
                                                            *base
                                                                .add(48 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len44;
                                                            *base
                                                                .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr44.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    *base
                                                        .add(48 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(priority42);
                                                }
                                                None => {
                                                    *base
                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta38 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec48 = e;
                                                    let len48 = vec48.len();
                                                    let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec48.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result48 = if layout48.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout48);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec48.into_iter().enumerate() {
                                                        let base = result48
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t45_0, t45_1) = e;
                                                            let vec46 = t45_0;
                                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                                            let len46 = vec46.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len46;
                                                            *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                                            let vec47 = t45_1;
                                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                                            let len47 = vec47.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len47;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(56 + 20 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len48;
                                                    *base
                                                        .add(56 + 19 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result48;
                                                    cleanup_list.extend_from_slice(&[(result48, layout48)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V77::EmbeddedResource(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::EmbeddedResourceContent {
                                        resource: resource49,
                                        options: options49,
                                    } = e;
                                    use super::super::super::wasmcp::mcp::content::EmbeddedResource as V68;
                                    match resource49 {
                                        V68::Text(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::TextResourceContents {
                                                uri: uri50,
                                                text: text50,
                                                options: options50,
                                            } = e;
                                            let vec51 = uri50;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len51;
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr51.cast_mut();
                                            let vec52 = text50;
                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                            let len52 = vec52.len();
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len52;
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr52.cast_mut();
                                            match options50 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                        mime_type: mime_type53,
                                                        meta: meta53,
                                                    } = e;
                                                    match mime_type53 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec54 = e;
                                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                                            let len54 = vec54.len();
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len54;
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr54.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match meta53 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec58 = e;
                                                            let len58 = vec58.len();
                                                            let layout58 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec58.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result58 = if layout58.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout58).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout58);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec58.into_iter().enumerate() {
                                                                let base = result58
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t55_0, t55_1) = e;
                                                                    let vec56 = t55_0;
                                                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                                                    let len56 = vec56.len();
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len56;
                                                                    *base.add(0).cast::<*mut u8>() = ptr56.cast_mut();
                                                                    let vec57 = t55_1;
                                                                    let ptr57 = vec57.as_ptr().cast::<u8>();
                                                                    let len57 = vec57.len();
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len57;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr57.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len58;
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result58;
                                                            cleanup_list.extend_from_slice(&[(result58, layout58)]);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V68::Blob(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::BlobResourceContents {
                                                uri: uri59,
                                                blob: blob59,
                                                options: options59,
                                            } = e;
                                            let vec60 = uri59;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len60;
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr60.cast_mut();
                                            let vec61 = blob59;
                                            let ptr61 = vec61.as_ptr().cast::<u8>();
                                            let len61 = vec61.len();
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len61;
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr61.cast_mut();
                                            match options59 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                        mime_type: mime_type62,
                                                        meta: meta62,
                                                    } = e;
                                                    match mime_type62 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec63 = e;
                                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                                            let len63 = vec63.len();
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len63;
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr63.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match meta62 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec67 = e;
                                                            let len67 = vec67.len();
                                                            let layout67 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec67.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result67 = if layout67.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout67).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout67);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec67.into_iter().enumerate() {
                                                                let base = result67
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t64_0, t64_1) = e;
                                                                    let vec65 = t64_0;
                                                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                                                    let len65 = vec65.len();
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len65;
                                                                    *base.add(0).cast::<*mut u8>() = ptr65.cast_mut();
                                                                    let vec66 = t64_1;
                                                                    let ptr66 = vec66.as_ptr().cast::<u8>();
                                                                    let len66 = vec66.len();
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len66;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr66.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len67;
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result67;
                                                            cleanup_list.extend_from_slice(&[(result67, layout67)]);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    match options49 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::ContentOptions {
                                                annotations: annotations69,
                                                meta: meta69,
                                            } = e;
                                            match annotations69 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::wasmcp::mcp::content::Annotations {
                                                        audience: audience70,
                                                        last_modified: last_modified70,
                                                        priority: priority70,
                                                    } = e;
                                                    match audience70 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec71 = e;
                                                            let len71 = vec71.len();
                                                            let layout71 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec71.len() * 1,
                                                                1,
                                                            );
                                                            let result71 = if layout71.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout71).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout71);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec71.into_iter().enumerate() {
                                                                let base = result71.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len71;
                                                            *base
                                                                .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result71;
                                                            cleanup_list.extend_from_slice(&[(result71, layout71)]);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified70 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec72 = e;
                                                            let ptr72 = vec72.as_ptr().cast::<u8>();
                                                            let len72 = vec72.len();
                                                            *base
                                                                .add(24 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len72;
                                                            *base
                                                                .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr72.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    *base
                                                        .add(24 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(priority70);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta69 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec76 = e;
                                                    let len76 = vec76.len();
                                                    let layout76 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec76.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result76 = if layout76.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout76).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout76);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec76.into_iter().enumerate() {
                                                        let base = result76
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t73_0, t73_1) = e;
                                                            let vec74 = t73_0;
                                                            let ptr74 = vec74.as_ptr().cast::<u8>();
                                                            let len74 = vec74.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len74;
                                                            *base.add(0).cast::<*mut u8>() = ptr74.cast_mut();
                                                            let vec75 = t73_1;
                                                            let ptr75 = vec75.as_ptr().cast::<u8>();
                                                            let len75 = vec75.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len75;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr75.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(32 + 20 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len76;
                                                    *base
                                                        .add(32 + 19 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result76;
                                                    cleanup_list.extend_from_slice(&[(result76, layout76)]);
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                        }
                    }
                    let (result85_0, result85_1, result85_2, result85_3, result85_4) = match options {
                        Some(e) => {
                            let Options { is_error: is_error79, meta: meta79 } = e;
                            let (result84_0, result84_1, result84_2) = match meta79 {
                                Some(e) => {
                                    let vec83 = e;
                                    let len83 = vec83.len();
                                    let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec83.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result83 = if layout83.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout83);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec83.into_iter().enumerate() {
                                        let base = result83
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t80_0, t80_1) = e;
                                            let vec81 = t80_0;
                                            let ptr81 = vec81.as_ptr().cast::<u8>();
                                            let len81 = vec81.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len81;
                                            *base.add(0).cast::<*mut u8>() = ptr81.cast_mut();
                                            let vec82 = t80_1;
                                            let ptr82 = vec82.as_ptr().cast::<u8>();
                                            let len82 = vec82.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len82;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr82.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result83, layout83)]);
                                    (1i32, result83, len83)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                1i32,
                                match is_error79 {
                                    true => 1,
                                    false => 0,
                                },
                                result84_0,
                                result84_1,
                                result84_2,
                            )
                        }
                        None => (0i32, 0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr86 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "write"]
                        fn wit_import87(
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import87(
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import87(
                            result2_0,
                            result2_1,
                            result2_2,
                            (&output).take_handle() as i32,
                            result78,
                            len78,
                            result85_0,
                            result85_1,
                            result85_2,
                            result85_3,
                            result85_4,
                            ptr86,
                        )
                    };
                    let l88 = i32::from(*ptr86.add(0).cast::<u8>());
                    let result92 = match l88 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l89 = i32::from(*ptr86.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V91;
                                let v91 = match l89 {
                                    0 => {
                                        let e91 = {
                                            let l90 = *ptr86.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l90 as u32,
                                                )
                                            }
                                        };
                                        V91::LastOperationFailed(e91)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V91::Closed
                                    }
                                };
                                v91
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout78.size() != 0 {
                        _rt::alloc::dealloc(result78.cast(), layout78);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result92
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn open(
                id: &Id,
                output: OutputStream,
                initial: &ContentBlock,
            ) -> Result<Writer, StreamError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 80 + 22 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 80
                            + 22 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    use super::super::super::wasmcp::mcp::types::Id as V2;
                    match id {
                        V2::Number(e) => {
                            *ptr0.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr0.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        V2::String(e) => {
                            *ptr0.add(0).cast::<u8>() = (1i32) as u8;
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *ptr0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len1;
                            *ptr0.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                    }
                    *ptr0
                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = (&output).take_handle() as i32;
                    use super::super::super::wasmcp::mcp::content::ContentBlock as V77;
                    match initial {
                        V77::Text(e) => {
                            *ptr0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                            let super::super::super::wasmcp::mcp::content::TextContent {
                                text: text3,
                                options: options3,
                            } = e;
                            let vec4 = text3;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr0
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match options3 {
                                Some(e) => {
                                    *ptr0
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::ContentOptions {
                                        annotations: annotations5,
                                        meta: meta5,
                                    } = e;
                                    match annotations5 {
                                        Some(e) => {
                                            *ptr0
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::Annotations {
                                                audience: audience6,
                                                last_modified: last_modified6,
                                                priority: priority6,
                                            } = e;
                                            match audience6 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec7 = e;
                                                    let len7 = vec7.len();
                                                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec7.len() * 1,
                                                        1,
                                                    );
                                                    let result7 = if layout7.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout7);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec7.into_iter().enumerate() {
                                                        let base = result7.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *ptr0
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len7;
                                                    *ptr0
                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result7;
                                                    cleanup_list.extend_from_slice(&[(result7, layout7)]);
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified6 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec8 = e;
                                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                                    let len8 = vec8.len();
                                                    *ptr0
                                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len8;
                                                    *ptr0
                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            *ptr0
                                                .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(priority6);
                                        }
                                        None => {
                                            *ptr0
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta5 {
                                        Some(e) => {
                                            *ptr0
                                                .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec12 = e;
                                            let len12 = vec12.len();
                                            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec12.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result12 = if layout12.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout12);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec12.into_iter().enumerate() {
                                                let base = result12
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t9_0, t9_1) = e;
                                                    let vec10 = t9_0;
                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                    let len10 = vec10.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len10;
                                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                                    let vec11 = t9_1;
                                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                                    let len11 = vec11.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len11;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                                }
                                            }
                                            *ptr0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len12;
                                            *ptr0
                                                .add(48 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result12;
                                            cleanup_list.extend_from_slice(&[(result12, layout12)]);
                                        }
                                        None => {
                                            *ptr0
                                                .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr0
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        V77::Image(e) => {
                            *ptr0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::wasmcp::mcp::content::ImageContent {
                                data: data13,
                                mime_type: mime_type13,
                                options: options13,
                            } = e;
                            let vec14 = data13;
                            let ptr14 = vec14.as_ptr().cast::<u8>();
                            let len14 = vec14.len();
                            *ptr0
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len14;
                            *ptr0
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr14.cast_mut();
                            let vec15 = mime_type13;
                            let ptr15 = vec15.as_ptr().cast::<u8>();
                            let len15 = vec15.len();
                            *ptr0
                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr0
                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr15.cast_mut();
                            match options13 {
                                Some(e) => {
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::ContentOptions {
                                        annotations: annotations16,
                                        meta: meta16,
                                    } = e;
                                    match annotations16 {
                                        Some(e) => {
                                            *ptr0
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::Annotations {
                                                audience: audience17,
                                                last_modified: last_modified17,
                                                priority: priority17,
                                            } = e;
                                            match audience17 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec18 = e;
                                                    let len18 = vec18.len();
                                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec18.len() * 1,
                                                        1,
                                                    );
                                                    let result18 = if layout18.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout18);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec18.into_iter().enumerate() {
                                                        let base = result18.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *ptr0
                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len18;
                                                    *ptr0
                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result18;
                                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified17 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec19 = e;
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    *ptr0
                                                        .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len19;
                                                    *ptr0
                                                        .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            *ptr0
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(priority17);
                                        }
                                        None => {
                                            *ptr0
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta16 {
                                        Some(e) => {
                                            *ptr0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec23 = e;
                                            let len23 = vec23.len();
                                            let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec23.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result23 = if layout23.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout23);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec23.into_iter().enumerate() {
                                                let base = result23
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t20_0, t20_1) = e;
                                                    let vec21 = t20_0;
                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                    let len21 = vec21.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len21;
                                                    *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                                    let vec22 = t20_1;
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len22;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr22.cast_mut();
                                                }
                                            }
                                            *ptr0
                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *ptr0
                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result23;
                                            cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                        }
                                        None => {
                                            *ptr0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        V77::Audio(e) => {
                            *ptr0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (2i32) as u8;
                            let super::super::super::wasmcp::mcp::content::AudioContent {
                                data: data24,
                                mime_type: mime_type24,
                                options: options24,
                            } = e;
                            let vec25 = data24;
                            let ptr25 = vec25.as_ptr().cast::<u8>();
                            let len25 = vec25.len();
                            *ptr0
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len25;
                            *ptr0
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr25.cast_mut();
                            let vec26 = mime_type24;
                            let ptr26 = vec26.as_ptr().cast::<u8>();
                            let len26 = vec26.len();
                            *ptr0
                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len26;
                            *ptr0
                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr26.cast_mut();
                            match options24 {
                                Some(e) => {
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::ContentOptions {
                                        annotations: annotations27,
                                        meta: meta27,
                                    } = e;
                                    match annotations27 {
                                        Some(e) => {
                                            *ptr0
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::Annotations {
                                                audience: audience28,
                                                last_modified: last_modified28,
                                                priority: priority28,
                                            } = e;
                                            match audience28 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec29 = e;
                                                    let len29 = vec29.len();
                                                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec29.len() * 1,
                                                        1,
                                                    );
                                                    let result29 = if layout29.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout29);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec29.into_iter().enumerate() {
                                                        let base = result29.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *ptr0
                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *ptr0
                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result29;
                                                    cleanup_list.extend_from_slice(&[(result29, layout29)]);
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified28 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec30 = e;
                                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                                    let len30 = vec30.len();
                                                    *ptr0
                                                        .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len30;
                                                    *ptr0
                                                        .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            *ptr0
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(priority28);
                                        }
                                        None => {
                                            *ptr0
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta27 {
                                        Some(e) => {
                                            *ptr0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec34 = e;
                                            let len34 = vec34.len();
                                            let layout34 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec34.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result34 = if layout34.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout34).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout34);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec34.into_iter().enumerate() {
                                                let base = result34
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t31_0, t31_1) = e;
                                                    let vec32 = t31_0;
                                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                                    let len32 = vec32.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len32;
                                                    *base.add(0).cast::<*mut u8>() = ptr32.cast_mut();
                                                    let vec33 = t31_1;
                                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                                    let len33 = vec33.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len33;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                                }
                                            }
                                            *ptr0
                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len34;
                                            *ptr0
                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result34;
                                            cleanup_list.extend_from_slice(&[(result34, layout34)]);
                                        }
                                        None => {
                                            *ptr0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        V77::ResourceLink(e) => {
                            *ptr0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (3i32) as u8;
                            let super::super::super::wasmcp::mcp::content::ResourceLinkContent {
                                uri: uri35,
                                name: name35,
                                options: options35,
                            } = e;
                            let vec36 = uri35;
                            let ptr36 = vec36.as_ptr().cast::<u8>();
                            let len36 = vec36.len();
                            *ptr0
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len36;
                            *ptr0
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr36.cast_mut();
                            let vec37 = name35;
                            let ptr37 = vec37.as_ptr().cast::<u8>();
                            let len37 = vec37.len();
                            *ptr0
                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len37;
                            *ptr0
                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr37.cast_mut();
                            match options35 {
                                Some(e) => {
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::ResourceLinkContentOptions {
                                        title: title38,
                                        description: description38,
                                        size: size38,
                                        mime_type: mime_type38,
                                        annotations: annotations38,
                                        meta: meta38,
                                    } = e;
                                    match title38 {
                                        Some(e) => {
                                            *ptr0
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec39 = e;
                                            let ptr39 = vec39.as_ptr().cast::<u8>();
                                            let len39 = vec39.len();
                                            *ptr0
                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len39;
                                            *ptr0
                                                .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr39.cast_mut();
                                        }
                                        None => {
                                            *ptr0
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description38 {
                                        Some(e) => {
                                            *ptr0
                                                .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec40 = e;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            *ptr0
                                                .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len40;
                                            *ptr0
                                                .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr40.cast_mut();
                                        }
                                        None => {
                                            *ptr0
                                                .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match size38 {
                                        Some(e) => {
                                            *ptr0
                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr0
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *ptr0
                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match mime_type38 {
                                        Some(e) => {
                                            *ptr0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec41 = e;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();
                                            *ptr0
                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len41;
                                            *ptr0
                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr41.cast_mut();
                                        }
                                        None => {
                                            *ptr0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations38 {
                                        Some(e) => {
                                            *ptr0
                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::Annotations {
                                                audience: audience42,
                                                last_modified: last_modified42,
                                                priority: priority42,
                                            } = e;
                                            match audience42 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec43 = e;
                                                    let len43 = vec43.len();
                                                    let layout43 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec43.len() * 1,
                                                        1,
                                                    );
                                                    let result43 = if layout43.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout43).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout43);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec43.into_iter().enumerate() {
                                                        let base = result43.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *ptr0
                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len43;
                                                    *ptr0
                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result43;
                                                    cleanup_list.extend_from_slice(&[(result43, layout43)]);
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified42 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(64 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec44 = e;
                                                    let ptr44 = vec44.as_ptr().cast::<u8>();
                                                    let len44 = vec44.len();
                                                    *ptr0
                                                        .add(64 + 19 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len44;
                                                    *ptr0
                                                        .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr44.cast_mut();
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(64 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            *ptr0
                                                .add(64 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(priority42);
                                        }
                                        None => {
                                            *ptr0
                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta38 {
                                        Some(e) => {
                                            *ptr0
                                                .add(72 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec48 = e;
                                            let len48 = vec48.len();
                                            let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec48.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result48 = if layout48.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout48);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec48.into_iter().enumerate() {
                                                let base = result48
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t45_0, t45_1) = e;
                                                    let vec46 = t45_0;
                                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                                    let len46 = vec46.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len46;
                                                    *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                                    let vec47 = t45_1;
                                                    let ptr47 = vec47.as_ptr().cast::<u8>();
                                                    let len47 = vec47.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len47;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr47.cast_mut();
                                                }
                                            }
                                            *ptr0
                                                .add(72 + 22 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len48;
                                            *ptr0
                                                .add(72 + 21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result48;
                                            cleanup_list.extend_from_slice(&[(result48, layout48)]);
                                        }
                                        None => {
                                            *ptr0
                                                .add(72 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        V77::EmbeddedResource(e) => {
                            *ptr0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (4i32) as u8;
                            let super::super::super::wasmcp::mcp::content::EmbeddedResourceContent {
                                resource: resource49,
                                options: options49,
                            } = e;
                            use super::super::super::wasmcp::mcp::content::EmbeddedResource as V68;
                            match resource49 {
                                V68::Text(e) => {
                                    *ptr0
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::TextResourceContents {
                                        uri: uri50,
                                        text: text50,
                                        options: options50,
                                    } = e;
                                    let vec51 = uri50;
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    *ptr0
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len51;
                                    *ptr0
                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr51.cast_mut();
                                    let vec52 = text50;
                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                    let len52 = vec52.len();
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len52;
                                    *ptr0
                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr52.cast_mut();
                                    match options50 {
                                        Some(e) => {
                                            *ptr0
                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                mime_type: mime_type53,
                                                meta: meta53,
                                            } = e;
                                            match mime_type53 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec54 = e;
                                                    let ptr54 = vec54.as_ptr().cast::<u8>();
                                                    let len54 = vec54.len();
                                                    *ptr0
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len54;
                                                    *ptr0
                                                        .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr54.cast_mut();
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta53 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec58 = e;
                                                    let len58 = vec58.len();
                                                    let layout58 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec58.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result58 = if layout58.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout58).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout58);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec58.into_iter().enumerate() {
                                                        let base = result58
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t55_0, t55_1) = e;
                                                            let vec56 = t55_0;
                                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                                            let len56 = vec56.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len56;
                                                            *base.add(0).cast::<*mut u8>() = ptr56.cast_mut();
                                                            let vec57 = t55_1;
                                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                                            let len57 = vec57.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len57;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr57.cast_mut();
                                                        }
                                                    }
                                                    *ptr0
                                                        .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len58;
                                                    *ptr0
                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result58;
                                                    cleanup_list.extend_from_slice(&[(result58, layout58)]);
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *ptr0
                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                V68::Blob(e) => {
                                    *ptr0
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::BlobResourceContents {
                                        uri: uri59,
                                        blob: blob59,
                                        options: options59,
                                    } = e;
                                    let vec60 = uri59;
                                    let ptr60 = vec60.as_ptr().cast::<u8>();
                                    let len60 = vec60.len();
                                    *ptr0
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len60;
                                    *ptr0
                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr60.cast_mut();
                                    let vec61 = blob59;
                                    let ptr61 = vec61.as_ptr().cast::<u8>();
                                    let len61 = vec61.len();
                                    *ptr0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len61;
                                    *ptr0
                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr61.cast_mut();
                                    match options59 {
                                        Some(e) => {
                                            *ptr0
                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                mime_type: mime_type62,
                                                meta: meta62,
                                            } = e;
                                            match mime_type62 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec63 = e;
                                                    let ptr63 = vec63.as_ptr().cast::<u8>();
                                                    let len63 = vec63.len();
                                                    *ptr0
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len63;
                                                    *ptr0
                                                        .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr63.cast_mut();
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta62 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec67 = e;
                                                    let len67 = vec67.len();
                                                    let layout67 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec67.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result67 = if layout67.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout67).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout67);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec67.into_iter().enumerate() {
                                                        let base = result67
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t64_0, t64_1) = e;
                                                            let vec65 = t64_0;
                                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                                            let len65 = vec65.len();
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len65;
                                                            *base.add(0).cast::<*mut u8>() = ptr65.cast_mut();
                                                            let vec66 = t64_1;
                                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                                            let len66 = vec66.len();
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len66;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr66.cast_mut();
                                                        }
                                                    }
                                                    *ptr0
                                                        .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len67;
                                                    *ptr0
                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result67;
                                                    cleanup_list.extend_from_slice(&[(result67, layout67)]);
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *ptr0
                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            match options49 {
                                Some(e) => {
                                    *ptr0
                                        .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasmcp::mcp::content::ContentOptions {
                                        annotations: annotations69,
                                        meta: meta69,
                                    } = e;
                                    match annotations69 {
                                        Some(e) => {
                                            *ptr0
                                                .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::wasmcp::mcp::content::Annotations {
                                                audience: audience70,
                                                last_modified: last_modified70,
                                                priority: priority70,
                                            } = e;
                                            match audience70 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec71 = e;
                                                    let len71 = vec71.len();
                                                    let layout71 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec71.len() * 1,
                                                        1,
                                                    );
                                                    let result71 = if layout71.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout71).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout71);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec71.into_iter().enumerate() {
                                                        let base = result71.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                        }
                                                    }
                                                    *ptr0
                                                        .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len71;
                                                    *ptr0
                                                        .add(40 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result71;
                                                    cleanup_list.extend_from_slice(&[(result71, layout71)]);
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match last_modified70 {
                                                Some(e) => {
                                                    *ptr0
                                                        .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec72 = e;
                                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                                    let len72 = vec72.len();
                                                    *ptr0
                                                        .add(40 + 19 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len72;
                                                    *ptr0
                                                        .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr72.cast_mut();
                                                }
                                                None => {
                                                    *ptr0
                                                        .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            *ptr0
                                                .add(40 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(priority70);
                                        }
                                        None => {
                                            *ptr0
                                                .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta69 {
                                        Some(e) => {
                                            *ptr0
                                                .add(48 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec76 = e;
                                            let len76 = vec76.len();
                                            let layout76 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec76.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result76 = if layout76.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout76).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout76);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec76.into_iter().enumerate() {
                                                let base = result76
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t73_0, t73_1) = e;
                                                    let vec74 = t73_0;
                                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                                    let len74 = vec74.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len74;
                                                    *base.add(0).cast::<*mut u8>() = ptr74.cast_mut();
                                                    let vec75 = t73_1;
                                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                                    let len75 = vec75.len();
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len75;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr75.cast_mut();
                                                }
                                            }
                                            *ptr0
                                                .add(48 + 22 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len76;
                                            *ptr0
                                                .add(48 + 21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result76;
                                            cleanup_list.extend_from_slice(&[(result76, layout76)]);
                                        }
                                        None => {
                                            *ptr0
                                                .add(48 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr0
                                        .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    let ptr78 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/tools-call-content@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "open"]
                        fn wit_import79(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import79(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import79(ptr0, ptr78) };
                    let l80 = i32::from(*ptr78.add(0).cast::<u8>());
                    let result85 = match l80 {
                        0 => {
                            let e = {
                                let l81 = *ptr78.add(4).cast::<i32>();
                                unsafe { Writer::from_handle(l81 as u32) }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l82 = i32::from(*ptr78.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V84;
                                let v84 = match l82 {
                                    0 => {
                                        let e84 = {
                                            let l83 = *ptr78.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l83 as u32,
                                                )
                                            }
                                        };
                                        V84::LastOperationFailed(e84)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V84::Closed
                                    }
                                };
                                v84
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result85
                }
            }
        }
        /// Writes tools/call structured results.
        ///
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-call>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_call_structured {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type StreamError = super::super::super::wasi::io::streams::StreamError;
            pub type Id = super::super::super::wasmcp::mcp::types::Id;
            pub type Meta = super::super::super::wasmcp::mcp::types::Meta;
            pub type Json = super::super::super::wasmcp::mcp::types::Json;
            #[derive(Clone)]
            pub struct Options {
                pub is_error: bool,
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for Options {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Options")
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn write(
                id: &Id,
                output: OutputStream,
                structured: &str,
                options: Option<&Options>,
            ) -> Result<(), StreamError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    use super::super::super::wasmcp::mcp::types::Id as V1;
                    let (result2_0, result2_1, result2_2) = match id {
                        V1::Number(e) => {
                            (
                                0i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V1::String(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                1i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                    };
                    let vec3 = structured;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result10_0, result10_1, result10_2, result10_3, result10_4) = match options {
                        Some(e) => {
                            let Options { is_error: is_error4, meta: meta4 } = e;
                            let (result9_0, result9_1, result9_2) = match meta4 {
                                Some(e) => {
                                    let vec8 = e;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t5_0, t5_1) = e;
                                            let vec6 = t5_0;
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                            let vec7 = t5_1;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                    (1i32, result8, len8)
                                }
                                None => (0i32, ::core::ptr::null_mut(), 0usize),
                            };
                            (
                                1i32,
                                match is_error4 {
                                    true => 1,
                                    false => 0,
                                },
                                result9_0,
                                result9_1,
                                result9_2,
                            )
                        }
                        None => (0i32, 0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/tools-call-structured@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "write"]
                        fn wit_import12(
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import12(
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import12(
                            result2_0,
                            result2_1,
                            result2_2,
                            (&output).take_handle() as i32,
                            ptr3.cast_mut(),
                            len3,
                            result10_0,
                            result10_1,
                            result10_2,
                            result10_3,
                            result10_4,
                            ptr11,
                        )
                    };
                    let l13 = i32::from(*ptr11.add(0).cast::<u8>());
                    let result17 = match l13 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l14 = i32::from(*ptr11.add(4).cast::<u8>());
                                use super::super::super::wasi::io::streams::StreamError as V16;
                                let v16 = match l14 {
                                    0 => {
                                        let e16 = {
                                            let l15 = *ptr11.add(8).cast::<i32>();
                                            unsafe {
                                                super::super::super::wasi::io::error::Error::from_handle(
                                                    l15 as u32,
                                                )
                                            }
                                        };
                                        V16::LastOperationFailed(e16)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        V16::Closed
                                    }
                                };
                                v16
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result17
                }
            }
        }
        /// MCP request types
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod request {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type InputStream = super::super::super::wasi::io::streams::InputStream;
            pub type StreamError = super::super::super::wasi::io::streams::StreamError;
            pub type Id = super::super::super::wasmcp::mcp::types::Id;
            pub type Implementation = super::super::super::wasmcp::mcp::types::Implementation;
            pub type Json = super::super::super::wasmcp::mcp::types::Json;
            pub type Uri = super::super::super::wasmcp::mcp::types::Uri;
            pub type Cursor = super::super::super::wasmcp::mcp::types::Cursor;
            pub type ClientCapabilities = super::super::super::wasmcp::mcp::types::ClientCapabilities;
            pub type ProtocolVersion = super::super::super::wasmcp::mcp::types::ProtocolVersion;
            pub type ServerCapabilities = super::super::super::wasmcp::mcp::types::ServerCapabilities;
            pub type McpError = super::super::super::wasmcp::mcp::error::Error;
            /// Arguments for tool calls and prompt requests.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#calltoolrequest>
            #[derive(Clone)]
            pub struct Arguments {
                pub name: _rt::String,
                pub arguments: Option<Json>,
            }
            impl ::core::fmt::Debug for Arguments {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Arguments")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            /// Argument for completion requests.
            #[derive(Clone)]
            pub struct CompletionArgument {
                pub name: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for CompletionArgument {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionArgument")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Context for completion requests.
            #[derive(Clone)]
            pub struct CompletionContext {
                pub arguments: Option<Json>,
            }
            impl ::core::fmt::Debug for CompletionContext {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionContext")
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            /// Reference to a prompt for completion.
            #[derive(Clone)]
            pub struct CompletionPromptReference {
                pub name: _rt::String,
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for CompletionPromptReference {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionPromptReference")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Reference types for completions.
            #[derive(Clone)]
            pub enum CompletionRef {
                /// Prompt reference.
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#promptreference>
                Prompt(CompletionPromptReference),
                /// Resource template reference.
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcetemplatereference>
                ResourceTemplate(Uri),
            }
            impl ::core::fmt::Debug for CompletionRef {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        CompletionRef::Prompt(e) => {
                            f.debug_tuple("CompletionRef::Prompt").field(e).finish()
                        }
                        CompletionRef::ResourceTemplate(e) => {
                            f.debug_tuple("CompletionRef::ResourceTemplate")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Initialize request parameters.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#initializerequest>
            #[derive(Clone)]
            pub struct InitializeParams {
                pub capabilities: ClientCapabilities,
                pub client_info: Implementation,
                pub protocol_version: ProtocolVersion,
            }
            impl ::core::fmt::Debug for InitializeParams {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeParams")
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .field("protocol-version", &self.protocol_version)
                        .finish()
                }
            }
            /// Parameters for listing tools.
            pub type ListToolsParams = Cursor;
            /// Parameters for calling a tool.
            pub type CallToolParams = Arguments;
            /// Parameters for listing resources.
            pub type ListResourcesParams = Cursor;
            /// Parameters for reading a resource.
            pub type ReadResourceParams = Uri;
            /// Parameters for listing resource templates.
            pub type ListResourceTemplatesParams = Cursor;
            /// Parameters for listing prompts.
            pub type ListPromptsParams = Cursor;
            /// Parameters for getting a prompt.
            pub type GetPromptParams = Arguments;
            /// Parameters for completion requests.
            #[derive(Clone)]
            pub struct CompletionParams {
                pub argument: CompletionArgument,
                pub ref_: CompletionRef,
                pub context: Option<CompletionContext>,
            }
            impl ::core::fmt::Debug for CompletionParams {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionParams")
                        .field("argument", &self.argument)
                        .field("ref", &self.ref_)
                        .field("context", &self.context)
                        .finish()
                }
            }
            /// Parameters for different MCP methods.
            #[derive(Clone)]
            pub enum Params {
                /// initialize
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#initializerequest>
                Initialize(InitializeParams),
                /// tools/list
                ToolsList(ListToolsParams),
                /// tools/call
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#calltoolrequest>
                ToolsCall(CallToolParams),
                /// resources/list
                ResourcesList(ListResourcesParams),
                /// resources/read
                ResourcesRead(ReadResourceParams),
                /// resources/templates/list
                ResourcesTemplatesList(ListResourceTemplatesParams),
                /// prompts/list
                PromptsList(ListPromptsParams),
                /// prompts/get
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#getpromptrequest>
                PromptsGet(GetPromptParams),
                /// completion/complete
                CompletionComplete(CompletionParams),
            }
            impl ::core::fmt::Debug for Params {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Params::Initialize(e) => {
                            f.debug_tuple("Params::Initialize").field(e).finish()
                        }
                        Params::ToolsList(e) => {
                            f.debug_tuple("Params::ToolsList").field(e).finish()
                        }
                        Params::ToolsCall(e) => {
                            f.debug_tuple("Params::ToolsCall").field(e).finish()
                        }
                        Params::ResourcesList(e) => {
                            f.debug_tuple("Params::ResourcesList").field(e).finish()
                        }
                        Params::ResourcesRead(e) => {
                            f.debug_tuple("Params::ResourcesRead").field(e).finish()
                        }
                        Params::ResourcesTemplatesList(e) => {
                            f.debug_tuple("Params::ResourcesTemplatesList")
                                .field(e)
                                .finish()
                        }
                        Params::PromptsList(e) => {
                            f.debug_tuple("Params::PromptsList").field(e).finish()
                        }
                        Params::PromptsGet(e) => {
                            f.debug_tuple("Params::PromptsGet").field(e).finish()
                        }
                        Params::CompletionComplete(e) => {
                            f.debug_tuple("Params::CompletionComplete").field(e).finish()
                        }
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Feature {
                Initialize,
                Tools,
                Resources,
                Prompts,
                Completion,
            }
            impl ::core::fmt::Debug for Feature {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Feature::Initialize => {
                            f.debug_tuple("Feature::Initialize").finish()
                        }
                        Feature::Tools => f.debug_tuple("Feature::Tools").finish(),
                        Feature::Resources => {
                            f.debug_tuple("Feature::Resources").finish()
                        }
                        Feature::Prompts => f.debug_tuple("Feature::Prompts").finish(),
                        Feature::Completion => {
                            f.debug_tuple("Feature::Completion").finish()
                        }
                    }
                }
            }
            impl Feature {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Feature {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Feature::Initialize,
                        1 => Feature::Tools,
                        2 => Feature::Resources,
                        3 => Feature::Prompts,
                        4 => Feature::Completion,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// MCP request resource providing lazy access to request data
            /// and request-scoped context storage.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Request {
                handle: _rt::Resource<Request>,
            }
            impl Request {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Request {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]request"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Parse a JSON-RPC 2.0 request from an HTTP request body stream.
                /// Reads until EOF (stream closes). The entire request body is buffered.
                /// Used by the HTTP transport which provides complete request bodies.
                pub fn from_http_stream(
                    input: &InputStream,
                ) -> Result<Request, StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[static]request.from-http-stream"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((input).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    unsafe { Request::from_handle(l3 as u32) }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V6;
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            V6::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V6::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Parse a JSON-RPC 2.0 request from a stdio stream.
                /// Reads until newline delimiter (\n or \r\n). Supports persistent connections
                /// with multiple newline-delimited messages on the same stream.
                /// Used by the stdio transport which provides newline-delimited JSON-RPC messages.
                pub fn from_stdio_stream(
                    input: &InputStream,
                ) -> Result<Request, StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[static]request.from-stdio-stream"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((input).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    unsafe { Request::from_handle(l3 as u32) }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasi::io::streams::StreamError as V6;
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            V6::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            V6::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the request ID.
                pub fn id(&self) -> Id {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8
                                + 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]request.id"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        use super::super::super::wasmcp::mcp::types::Id as V7;
                        let v7 = match l2 {
                            0 => {
                                let e7 = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3
                                };
                                V7::Number(e7)
                            }
                            n => {
                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                let e7 = {
                                    let l4 = *ptr0.add(8).cast::<*mut u8>();
                                    let l5 = *ptr0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        l4.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                V7::String(e7)
                            }
                        };
                        let result8 = v7;
                        result8
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the capability required for this request.
                pub fn feature(&self) -> Feature {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]request.feature"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        Feature::_lift(ret as u8)
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the request parameters.
                pub fn params(&self) -> Result<Params, McpError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 16 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]request.params"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result77 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v68 = match l3 {
                                        0 => {
                                            let e68 = {
                                                let l4 = i32::from(
                                                    *ptr0
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l5 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l6 = *ptr0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                let l8 = i32::from(
                                                    *ptr0
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l12 = *ptr0
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l13 = *ptr0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                let l15 = i32::from(
                                                    *ptr0
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                InitializeParams {
                                                    capabilities: super::super::super::wasmcp::mcp::types::ClientCapabilities::empty()
                                                        | super::super::super::wasmcp::mcp::types::ClientCapabilities::from_bits_retain(
                                                            ((l4 as u8) << 0) as _,
                                                        ),
                                                    client_info: super::super::super::wasmcp::mcp::types::Implementation {
                                                        name: _rt::string_lift(bytes7),
                                                        title: match l8 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l9 = *ptr0
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l10 = *ptr0
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len11 = l10;
                                                                    let bytes11 = _rt::Vec::from_raw_parts(
                                                                        l9.cast(),
                                                                        len11,
                                                                        len11,
                                                                    );
                                                                    _rt::string_lift(bytes11)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        version: _rt::string_lift(bytes14),
                                                    },
                                                    protocol_version: super::super::super::wasmcp::mcp::types::ProtocolVersion::_lift(
                                                        l15 as u8,
                                                    ),
                                                }
                                            };
                                            Params::Initialize(e68)
                                        }
                                        1 => {
                                            let e68 = {
                                                let l16 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l17 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            Params::ToolsList(e68)
                                        }
                                        2 => {
                                            let e68 = {
                                                let l19 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l20 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                let l22 = i32::from(
                                                    *ptr0
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                Arguments {
                                                    name: _rt::string_lift(bytes21),
                                                    arguments: match l22 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l23 = *ptr0
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l24 = *ptr0
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len25 = l24;
                                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                                    l23.cast(),
                                                                    len25,
                                                                    len25,
                                                                );
                                                                _rt::string_lift(bytes25)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Params::ToolsCall(e68)
                                        }
                                        3 => {
                                            let e68 = {
                                                let l26 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            Params::ResourcesList(e68)
                                        }
                                        4 => {
                                            let e68 = {
                                                let l29 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l30 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            Params::ResourcesRead(e68)
                                        }
                                        5 => {
                                            let e68 = {
                                                let l32 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l33 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );
                                                _rt::string_lift(bytes34)
                                            };
                                            Params::ResourcesTemplatesList(e68)
                                        }
                                        6 => {
                                            let e68 = {
                                                let l35 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l36 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );
                                                _rt::string_lift(bytes37)
                                            };
                                            Params::PromptsList(e68)
                                        }
                                        7 => {
                                            let e68 = {
                                                let l38 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l39 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                let l41 = i32::from(
                                                    *ptr0
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                Arguments {
                                                    name: _rt::string_lift(bytes40),
                                                    arguments: match l41 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l42 = *ptr0
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l43 = *ptr0
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len44 = l43;
                                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                                    l42.cast(),
                                                                    len44,
                                                                    len44,
                                                                );
                                                                _rt::string_lift(bytes44)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Params::PromptsGet(e68)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 8, "invalid enum discriminant");
                                            let e68 = {
                                                let l45 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l46 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                let l48 = *ptr0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l49 = *ptr0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                let l51 = i32::from(
                                                    *ptr0
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let v62 = match l51 {
                                                    0 => {
                                                        let e62 = {
                                                            let l52 = *ptr0
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l53 = *ptr0
                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );
                                                            let l55 = i32::from(
                                                                *ptr0
                                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            CompletionPromptReference {
                                                                name: _rt::string_lift(bytes54),
                                                                title: match l55 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l56 = *ptr0
                                                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l57 = *ptr0
                                                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len58 = l57;
                                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                                l56.cast(),
                                                                                len58,
                                                                                len58,
                                                                            );
                                                                            _rt::string_lift(bytes58)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        CompletionRef::Prompt(e62)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                        let e62 = {
                                                            let l59 = *ptr0
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l60 = *ptr0
                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        CompletionRef::ResourceTemplate(e62)
                                                    }
                                                };
                                                let l63 = i32::from(
                                                    *ptr0
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                CompletionParams {
                                                    argument: CompletionArgument {
                                                        name: _rt::string_lift(bytes47),
                                                        value: _rt::string_lift(bytes50),
                                                    },
                                                    ref_: v62,
                                                    context: match l63 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l64 = i32::from(
                                                                    *ptr0
                                                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                CompletionContext {
                                                                    arguments: match l64 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l65 = *ptr0
                                                                                    .add(14 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l66 = *ptr0
                                                                                    .add(15 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len67 = l66;
                                                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                                                    l65.cast(),
                                                                                    len67,
                                                                                    len67,
                                                                                );
                                                                                _rt::string_lift(bytes67)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Params::CompletionComplete(e68)
                                        }
                                    };
                                    v68
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l69 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let l70 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l71 = *ptr0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len72 = l71;
                                    let bytes72 = _rt::Vec::from_raw_parts(
                                        l70.cast(),
                                        len72,
                                        len72,
                                    );
                                    let l73 = i32::from(
                                        *ptr0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::wasmcp::mcp::error::Error {
                                        code: super::super::super::wasmcp::mcp::error::ErrorCode::_lift(
                                            l69 as u8,
                                        ),
                                        message: _rt::string_lift(bytes72),
                                        data: match l73 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l74 = *ptr0
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l75 = *ptr0
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len76 = l75;
                                                    let bytes76 = _rt::Vec::from_raw_parts(
                                                        l74.cast(),
                                                        len76,
                                                        len76,
                                                    );
                                                    _rt::string_lift(bytes76)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result77
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Get a context value by key.
                pub fn get(&self, key: &str) -> Result<Option<_rt::Vec<u8>>, ()> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]request.get"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result8 = match l3 {
                            0 => {
                                let e = {
                                    let l4 = i32::from(
                                        *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l4 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l5 = *ptr1
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l6 = *ptr1
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result8
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Set a context value by key.
                pub fn set(&self, key: &str, value: &[u8]) -> Result<(), ()> {
                    unsafe {
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = value;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]request.set"]
                            fn wit_import2(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1.cast_mut(),
                                len1,
                            )
                        };
                        match ret {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Check if this request needs the provided capabilities.
                /// Registers capabilities during initialize requests and returns false (forward to next handler).
                /// For other requests, returns true if the request feature matches the provided capabilities.
                pub fn needs(&self, capabilities: ServerCapabilities) -> bool {
                    unsafe {
                        let flags0 = capabilities;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]request.needs"]
                            fn wit_import1(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (flags0.bits() >> 0) as i32,
                            )
                        };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Request {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the server capabilities associated with this request.
                pub fn get_capabilities(
                    &self,
                ) -> Result<Option<ServerCapabilities>, ()> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 3]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:mcp/request@0.3.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]request.get-capabilities"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result5 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(1).cast::<u8>());
                                    match l3 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l4 = i32::from(*ptr0.add(2).cast::<u8>());
                                                super::super::super::wasmcp::mcp::types::ServerCapabilities::empty()
                                                    | super::super::super::wasmcp::mcp::types::ServerCapabilities::from_bits_retain(
                                                        ((l4 as u8) << 0) as _,
                                                    )
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = ();
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result5
                    }
                }
            }
        }
        /// Handler interface for incoming MCP requests.
        ///
        /// This interface defines the contract for handling MCP requests
        /// and writing responses to an output stream.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod incoming_handler {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
            pub type Request = super::super::super::wasmcp::mcp::request::Request;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle an incoming MCP request and write the response to the output stream.
            /// The handler receives ownership of the request resource, allowing it to
            /// either process the request or forward it to the next handler in the chain.
            pub fn handle(request: Request, output: OutputStream) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasmcp:mcp/incoming-handler@0.3.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "handle"]
                        fn wit_import0(_: i32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32, _: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            (&request).take_handle() as i32,
                            (&output).take_handle() as i32,
                        )
                    };
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod mcp {
            /// Handler interface for incoming MCP requests.
            ///
            /// This interface defines the contract for handling MCP requests
            /// and writing responses to an output stream.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod incoming_handler {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type Request = super::super::super::super::wasmcp::mcp::request::Request;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_cabi<T: Guest>(arg0: i32, arg1: i32) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::handle(
                        unsafe {
                            super::super::super::super::wasmcp::mcp::request::Request::from_handle(
                                arg0 as u32,
                            )
                        },
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg1 as u32,
                            )
                        },
                    );
                }
                pub trait Guest {
                    /// Handle an incoming MCP request and write the response to the output stream.
                    /// The handler receives ownership of the request resource, allowing it to
                    /// either process the request or forward it to the next handler in the chain.
                    fn handle(request: Request, output: OutputStream) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_incoming_handler_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/incoming-handler@0.3.0#handle")] unsafe
                        extern "C" fn export_handle(arg0 : i32, arg1 : i32,) { unsafe {
                        $($path_to_types)*:: _export_handle_cabi::<$ty > (arg0, arg1) } }
                        };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_incoming_handler_0_3_0_alpha_59_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_tools_handler_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::mcp::incoming_handler::__export_wasmcp_mcp_incoming_handler_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::incoming_handler);
    };
}
#[doc(inline)]
pub(crate) use __export_tools_handler_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:rust-tools:tools-handler:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6316] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa80\x01A\x02\x01A+\x01\
B\x04\x04\0\x05error\x03\x01\x01h\0\x01@\x01\x04self\x01\0s\x04\0\x1d[method]err\
or.to-debug-string\x01\x02\x03\0\x13wasi:io/error@0.2.3\x05\0\x01B\x0a\x04\0\x08\
pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[method]pollable.rea\
dy\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollable.block\x01\x03\x01\
p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\0\x12wasi:io/poll\
@0.2.3\x05\x01\x02\x03\0\0\x05error\x02\x03\0\x01\x08pollable\x01B(\x02\x03\x02\x01\
\x02\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\x02\x01i\
\x01\x01q\x02\x15last-operation-failed\x01\x04\0\x06closed\0\0\x04\0\x0cstream-e\
rror\x03\0\x05\x04\0\x0cinput-stream\x03\x01\x04\0\x0doutput-stream\x03\x01\x01h\
\x07\x01p}\x01j\x01\x0a\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0b\x04\0\x19[met\
hod]input-stream.read\x01\x0c\x04\0\"[method]input-stream.blocking-read\x01\x0c\x01\
j\x01w\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0d\x04\0\x19[method]input-stream.\
skip\x01\x0e\x04\0\"[method]input-stream.blocking-skip\x01\x0e\x01i\x03\x01@\x01\
\x04self\x09\0\x0f\x04\0\x1e[method]input-stream.subscribe\x01\x10\x01h\x08\x01@\
\x01\x04self\x11\0\x0d\x04\0![method]output-stream.check-write\x01\x12\x01j\0\x01\
\x06\x01@\x02\x04self\x11\x08contents\x0a\0\x13\x04\0\x1b[method]output-stream.w\
rite\x01\x14\x04\0.[method]output-stream.blocking-write-and-flush\x01\x14\x01@\x01\
\x04self\x11\0\x13\x04\0\x1b[method]output-stream.flush\x01\x15\x04\0$[method]ou\
tput-stream.blocking-flush\x01\x15\x01@\x01\x04self\x11\0\x0f\x04\0\x1f[method]o\
utput-stream.subscribe\x01\x16\x01@\x02\x04self\x11\x03lenw\0\x13\x04\0\"[method\
]output-stream.write-zeroes\x01\x17\x04\05[method]output-stream.blocking-write-z\
eroes-and-flush\x01\x17\x01@\x03\x04self\x11\x03src\x09\x03lenw\0\x0d\x04\0\x1c[\
method]output-stream.splice\x01\x18\x04\0%[method]output-stream.blocking-splice\x01\
\x18\x03\0\x15wasi:io/streams@0.2.3\x05\x04\x01B\x15\x01o\x02ss\x01p\0\x01k\x01\x04\
\0\x04meta\x03\0\x02\x01s\x04\0\x06cursor\x03\0\x04\x01s\x04\0\x04json\x03\0\x06\
\x01s\x04\0\x03uri\x03\0\x08\x01n\x04\x0belicitation\x05roots\x08sampling\x0cexp\
erimental\x04\0\x13client-capabilities\x03\0\x0a\x01n\x05\x0bcompletions\x07prom\
pts\x09resources\x05tools\x0cexperimental\x04\0\x13server-capabilities\x03\0\x0c\
\x01m\x03\x09v20250618\x09v20250326\x09v20241105\x04\0\x10protocol-version\x03\0\
\x0e\x01ks\x01r\x03\x04names\x05title\x10\x07versions\x04\0\x0eimplementation\x03\
\0\x11\x01q\x02\x06number\x01x\0\x06string\x01s\0\x04\0\x02id\x03\0\x13\x03\0\x1f\
wasmcp:mcp/types@0.3.0\x05\x05\x01B\x05\x01m\x05\x0bparse-error\x0finva\
lid-request\x10method-not-found\x0einvalid-params\x0einternal-error\x04\0\x0aerr\
or-code\x03\0\0\x01ks\x01r\x03\x04code\x01\x07messages\x04data\x02\x04\0\x05erro\
r\x03\0\x03\x03\0\x1fwasmcp:mcp/error@0.3.0\x05\x06\x02\x03\0\x02\x0dou\
tput-stream\x02\x03\0\x02\x0cstream-error\x02\x03\0\x03\x02id\x02\x03\0\x04\x05e\
rror\x01B\x0c\x02\x03\x02\x01\x07\x04\0\x0doutput-stream\x03\0\0\x02\x03\x02\x01\
\x08\x04\0\x0cstream-error\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x02id\x03\0\x04\x02\
\x03\x02\x01\x0a\x04\0\x09mcp-error\x03\0\x06\x01i\x01\x01j\0\x01\x03\x01@\x03\x02\
id\x05\x06output\x08\x05error\x07\0\x09\x04\0\x05write\x01\x0a\x03\0&wasmcp:mcp/\
error-result@0.3.0\x05\x0b\x02\x03\0\x03\x06cursor\x02\x03\0\x03\x04met\
a\x02\x03\0\x03\x04json\x01B.\x02\x03\x02\x01\x07\x04\0\x0doutput-stream\x03\0\0\
\x02\x03\x02\x01\x08\x04\0\x0cstream-error\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x02\
id\x03\0\x04\x02\x03\x02\x01\x0c\x04\0\x06cursor\x03\0\x06\x02\x03\x02\x01\x0d\x04\
\0\x04meta\x03\0\x08\x02\x03\x02\x01\x0e\x04\0\x04json\x03\0\x0a\x01n\x04\x0bdes\
tructive\x0aidempotent\x0aopen-world\x09read-only\x04\0\x0atool-hints\x03\0\x0c\x01\
ks\x01r\x02\x05hints\x0d\x05title\x0e\x04\0\x10tool-annotations\x03\0\x0f\x01k\x10\
\x01k\x0b\x01r\x05\x04meta\x09\x0bannotations\x11\x0bdescription\x0e\x0doutput-s\
chema\x12\x05title\x0e\x04\0\x0ctool-options\x03\0\x13\x01k\x14\x01r\x03\x04name\
s\x0cinput-schemas\x07options\x15\x04\0\x04tool\x03\0\x16\x01k\x07\x01r\x02\x04m\
eta\x09\x0bnext-cursor\x18\x04\0\x07options\x03\0\x19\x04\0\x06writer\x03\x01\x01\
h\x1b\x01j\x01y\x01\x03\x01@\x01\x04self\x1c\0\x1d\x04\0\x1a[method]writer.check\
-write\x01\x1e\x01j\0\x01\x03\x01@\x02\x04self\x1c\x04tool\x17\0\x1f\x04\0\x14[m\
ethod]writer.write\x01\x20\x01k\x1a\x01@\x02\x04self\x1c\x07options!\0\x1f\x04\0\
\x14[method]writer.close\x01\"\x01i\x01\x01p\x17\x01@\x04\x02id\x05\x06output#\x05\
tools$\x07options!\0\x1f\x04\0\x05write\x01%\x01i\x1b\x01j\x01&\x01\x03\x01@\x03\
\x02id\x05\x06output#\x07initial$\0'\x04\0\x04open\x01(\x03\0+wasmcp:mcp/tools-l\
ist-result@0.3.0\x05\x0f\x01B'\x02\x03\x02\x01\x0d\x04\0\x04meta\x03\0\0\
\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\x02\x01p\x03\x01k\x04\x01ks\x01\
r\x03\x08audience\x05\x0dlast-modified\x06\x08priorityu\x04\0\x0bannotations\x03\
\0\x07\x01k\x08\x01r\x02\x0bannotations\x09\x04meta\x01\x04\0\x0fcontent-options\
\x03\0\x0a\x01k\x0b\x01r\x02\x04texts\x07options\x0c\x04\0\x0ctext-content\x03\0\
\x0d\x01p}\x01r\x03\x04data\x0f\x09mime-types\x07options\x0c\x04\0\x0dimage-cont\
ent\x03\0\x10\x01r\x03\x04data\x0f\x09mime-types\x07options\x0c\x04\0\x0daudio-c\
ontent\x03\0\x12\x01kw\x01r\x06\x05title\x06\x0bdescription\x06\x04size\x14\x09m\
ime-type\x06\x0bannotations\x09\x04meta\x01\x04\0\x1dresource-link-content-optio\
ns\x03\0\x15\x01k\x16\x01r\x03\x03uris\x04names\x07options\x17\x04\0\x15resource\
-link-content\x03\0\x18\x01r\x02\x09mime-type\x06\x04meta\x01\x04\0\x19embedded-\
resource-options\x03\0\x1a\x01k\x1b\x01r\x03\x03uris\x04texts\x07options\x1c\x04\
\0\x16text-resource-contents\x03\0\x1d\x01r\x03\x03uris\x04blob\x0f\x07options\x1c\
\x04\0\x16blob-resource-contents\x03\0\x1f\x01q\x02\x04text\x01\x1e\0\x04blob\x01\
\x20\0\x04\0\x11embedded-resource\x03\0!\x01r\x02\x08resource\"\x07options\x0c\x04\
\0\x19embedded-resource-content\x03\0#\x01q\x05\x04text\x01\x0e\0\x05image\x01\x11\
\0\x05audio\x01\x13\0\x0dresource-link\x01\x19\0\x11embedded-resource\x01$\0\x04\
\0\x0dcontent-block\x03\0%\x03\0!wasmcp:mcp/content@0.3.0\x05\x10\x02\x03\
\0\x07\x0dcontent-block\x01B&\x02\x03\x02\x01\x07\x04\0\x0doutput-stream\x03\0\0\
\x02\x03\x02\x01\x08\x04\0\x0cstream-error\x03\0\x02\x02\x03\x02\x01\x11\x04\0\x0d\
content-block\x03\0\x04\x02\x03\x02\x01\x09\x04\0\x02id\x03\0\x06\x02\x03\x02\x01\
\x0d\x04\0\x04meta\x03\0\x08\x01r\x02\x08is-error\x7f\x04meta\x09\x04\0\x07optio\
ns\x03\0\x0a\x04\0\x06writer\x03\x01\x01h\x0c\x01j\x01w\x01\x03\x01@\x01\x04self\
\x0d\0\x0e\x04\0\x1a[method]writer.check-write\x01\x0f\x01p}\x01j\0\x01\x03\x01@\
\x02\x04self\x0d\x08contents\x10\0\x11\x04\0\x14[method]writer.write\x01\x12\x01\
@\x02\x04self\x0d\x07content\x05\0\x11\x04\0\x13[method]writer.next\x01\x13\x01k\
\x0b\x01@\x02\x04self\x0d\x07options\x14\0\x11\x04\0\x14[method]writer.close\x01\
\x15\x01i\x01\x01@\x04\x02id\x07\x06output\x16\x04texts\x07options\x14\0\x11\x04\
\0\x0awrite-text\x01\x17\x01@\x03\x02id\x07\x06output\x16\x06reasons\0\x11\x04\0\
\x0bwrite-error\x01\x18\x01p\x05\x01@\x04\x02id\x07\x06output\x16\x07content\x19\
\x07options\x14\0\x11\x04\0\x05write\x01\x1a\x01i\x0c\x01j\x01\x1b\x01\x03\x01@\x03\
\x02id\x07\x06output\x16\x07initial\x05\0\x1c\x04\0\x04open\x01\x1d\x03\0,wasmcp\
:mcp/tools-call-content@0.3.0\x05\x12\x01B\x11\x02\x03\x02\x01\x07\x04\0\
\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x08\x04\0\x0cstream-error\x03\0\x02\x02\
\x03\x02\x01\x09\x04\0\x02id\x03\0\x04\x02\x03\x02\x01\x0d\x04\0\x04meta\x03\0\x06\
\x02\x03\x02\x01\x0e\x04\0\x04json\x03\0\x08\x01r\x02\x08is-error\x7f\x04meta\x07\
\x04\0\x07options\x03\0\x0a\x01i\x01\x01k\x0b\x01j\0\x01\x03\x01@\x04\x02id\x05\x06\
output\x0c\x0astructured\x09\x07options\x0d\0\x0e\x04\0\x05write\x01\x0f\x03\0/w\
asmcp:mcp/tools-call-structured@0.3.0\x05\x13\x02\x03\0\x02\x0cinput-st\
ream\x02\x03\0\x03\x0eimplementation\x02\x03\0\x03\x03uri\x02\x03\0\x03\x13clien\
t-capabilities\x02\x03\0\x03\x10protocol-version\x02\x03\0\x03\x13server-capabil\
ities\x01BO\x02\x03\x02\x01\x14\x04\0\x0cinput-stream\x03\0\0\x02\x03\x02\x01\x08\
\x04\0\x0cstream-error\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x02id\x03\0\x04\x02\x03\
\x02\x01\x15\x04\0\x0eimplementation\x03\0\x06\x02\x03\x02\x01\x0e\x04\0\x04json\
\x03\0\x08\x02\x03\x02\x01\x16\x04\0\x03uri\x03\0\x0a\x02\x03\x02\x01\x0c\x04\0\x06\
cursor\x03\0\x0c\x02\x03\x02\x01\x17\x04\0\x13client-capabilities\x03\0\x0e\x02\x03\
\x02\x01\x18\x04\0\x10protocol-version\x03\0\x10\x02\x03\x02\x01\x19\x04\0\x13se\
rver-capabilities\x03\0\x12\x02\x03\x02\x01\x0a\x04\0\x09mcp-error\x03\0\x14\x01\
k\x09\x01r\x02\x04names\x09arguments\x16\x04\0\x09arguments\x03\0\x17\x01r\x02\x04\
names\x05values\x04\0\x13completion-argument\x03\0\x19\x01r\x01\x09arguments\x16\
\x04\0\x12completion-context\x03\0\x1b\x01ks\x01r\x02\x04names\x05title\x1d\x04\0\
\x1bcompletion-prompt-reference\x03\0\x1e\x01q\x02\x06prompt\x01\x1f\0\x11resour\
ce-template\x01\x0b\0\x04\0\x0ecompletion-ref\x03\0\x20\x01r\x03\x0ccapabilities\
\x0f\x0bclient-info\x07\x10protocol-version\x11\x04\0\x11initialize-params\x03\0\
\"\x04\0\x11list-tools-params\x03\0\x0d\x04\0\x10call-tool-params\x03\0\x18\x04\0\
\x15list-resources-params\x03\0\x0d\x04\0\x14read-resource-params\x03\0\x0b\x04\0\
\x1elist-resource-templates-params\x03\0\x0d\x04\0\x13list-prompts-params\x03\0\x0d\
\x04\0\x11get-prompt-params\x03\0\x18\x01k\x1c\x01r\x03\x08argument\x1a\x03ref!\x07\
context+\x04\0\x11completion-params\x03\0,\x01q\x09\x0ainitialize\x01#\0\x0atool\
s-list\x01$\0\x0atools-call\x01%\0\x0eresources-list\x01&\0\x0eresources-read\x01\
'\0\x18resources-templates-list\x01(\0\x0cprompts-list\x01)\0\x0bprompts-get\x01\
*\0\x13completion-complete\x01-\0\x04\0\x06params\x03\0.\x01m\x05\x0ainitialize\x05\
tools\x09resources\x07prompts\x0acompletion\x04\0\x07feature\x03\00\x04\0\x07req\
uest\x03\x01\x01h\x01\x01i2\x01j\x014\x01\x03\x01@\x01\x05input3\05\x04\0\x20[st\
atic]request.from-http-stream\x016\x04\0![static]request.from-stdio-stream\x016\x01\
h2\x01@\x01\x04self7\0\x05\x04\0\x12[method]request.id\x018\x01@\x01\x04self7\01\
\x04\0\x17[method]request.feature\x019\x01j\x01/\x01\x15\x01@\x01\x04self7\0:\x04\
\0\x16[method]request.params\x01;\x01p}\x01k<\x01j\x01=\0\x01@\x02\x04self7\x03k\
eys\0>\x04\0\x13[method]request.get\x01?\x01j\0\0\x01@\x03\x04self7\x03keys\x05v\
alue<\0\xc0\0\x04\0\x13[method]request.set\x01A\x01@\x02\x04self7\x0ccapabilitie\
s\x13\0\x7f\x04\0\x15[method]request.needs\x01B\x01k\x13\x01j\x01\xc3\0\0\x01@\x01\
\x04self7\0\xc4\0\x04\0\x20[method]request.get-capabilities\x01E\x03\0!wasmcp:mc\
p/request@0.3.0\x05\x1a\x02\x03\0\x0a\x07request\x01B\x08\x02\x03\x02\x01\
\x07\x04\0\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x1b\x04\0\x07request\x03\0\x02\
\x01i\x03\x01i\x01\x01@\x02\x07request\x04\x06output\x05\x01\0\x04\0\x06handle\x01\
\x06\x03\0*wasmcp:mcp/incoming-handler@0.3.0\x05\x1c\x01B\x08\x02\x03\x02\
\x01\x07\x04\0\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x1b\x04\0\x07request\x03\
\0\x02\x01i\x03\x01i\x01\x01@\x02\x07request\x04\x06output\x05\x01\0\x04\0\x06ha\
ndle\x01\x06\x04\0*wasmcp:mcp/incoming-handler@0.3.0\x05\x1d\x04\0\"com\
ponent:rust-tools/tools-handler\x04\0\x0b\x13\x01\0\x0dtools-handler\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
