// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol, shared by other interfaces.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod mcp_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            pub type JsonValue = _rt::String;
            /// JSON object as a string
            /// This is a JSON-encoded object that should be parsed/validated by implementations
            pub type JsonObject = _rt::String;
            /// Metadata fields for extensibility
            /// Key-value pairs where values are JSON-encoded strings
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Icon specification for visual representation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Icon {
                /// A standard URI pointing to an icon resource
                pub src: _rt::String,
                /// Optional override if the server's MIME type is missing or generic
                pub mime_type: Option<_rt::String>,
                /// Size specification (e.g., "48x48", "any" for SVG, or "48x48 96x96")
                pub sizes: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Icon {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Icon")
                        .field("src", &self.src)
                        .field("mime-type", &self.mime_type)
                        .field("sizes", &self.sizes)
                        .finish()
                }
            }
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                /// Implementations SHOULD validate this is within [0.0, 1.0] range
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                /// Format: YYYY-MM-DDTHH:mm:ss[.sss]Z or Â±HH:MM offset
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub text: _rt::String,
                /// Optional protocol-level metadata for this content block
                pub meta: Option<JsonObject>,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Image content as base64-encoded string
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::String,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                /// Optional protocol-level metadata for this content block
                pub meta: Option<JsonObject>,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("meta", &self.meta)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Audio content as base64-encoded string
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::String,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Raw resource representation (for resource links)
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct RawResource {
                /// URI representing the resource location
                pub uri: _rt::String,
                /// Name of the resource
                pub name: _rt::String,
                /// Human-readable title of the resource
                pub title: Option<_rt::String>,
                /// Optional description of the resource
                pub description: Option<_rt::String>,
                /// MIME type of the resource content
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding), if known
                pub size: Option<u32>,
                /// Optional list of icons for the resource
                pub icons: Option<_rt::Vec<Icon>>,
            }
            impl ::core::fmt::Debug for RawResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RawResource")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("icons", &self.icons)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Base64-encoded binary data
                pub blob: _rt::String,
                pub meta: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct EmbeddedResource {
                /// Optional protocol-level metadata for this content block
                pub meta: Option<JsonObject>,
                /// The actual resource contents
                pub resource: ResourceContents,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("meta", &self.meta)
                        .field("resource", &self.resource)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                Resource(EmbeddedResource),
                ResourceLink(RawResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::Resource(e) => {
                            f.debug_tuple("ContentBlock::Resource").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                    }
                }
            }
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
        }
        /// Type definitions for the MCP lifecycle
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod lifecycle_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type JsonObject = super::super::super::wasmcp::mcp::mcp_types::JsonObject;
            pub type Icon = super::super::super::wasmcp::mcp::mcp_types::Icon;
            /// Protocol version string
            /// Common values: "2024-11-05", "2025-03-26", "2025-06-18"
            pub type ProtocolVersion = _rt::String;
            /// Information about an MCP implementation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Implementation {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional website URL for more information
                pub website_url: Option<_rt::String>,
                /// Optional list of icons for the implementation
                pub icons: Option<_rt::Vec<Icon>>,
            }
            impl ::core::fmt::Debug for Implementation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Implementation")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("version", &self.version)
                        .field("website-url", &self.website_url)
                        .field("icons", &self.icons)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Elicitation capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ElicitationCapability {
                /// Whether the client supports JSON Schema validation
                pub schema_validation: Option<bool>,
            }
            impl ::core::fmt::Debug for ElicitationCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ElicitationCapability")
                        .field("schema-validation", &self.schema_validation)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities as JSON objects
                pub experimental: Option<JsonObject>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling (empty object when enabled)
                pub sampling: Option<JsonObject>,
                /// Support for user elicitation
                pub elicitation: Option<ElicitationCapability>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities as JSON objects
                pub experimental: Option<JsonObject>,
                /// Server can send log messages (empty object when enabled)
                pub logging: Option<JsonObject>,
                /// Server supports argument autocompletion (empty object when enabled)
                pub completions: Option<JsonObject>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: Implementation,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeResult {
                /// Protocol version the server supports
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: Implementation,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for InitializeResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResult")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .finish()
                }
            }
        }
        /// Type definitions for authentication and authorization
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod authorization_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MetaFields = super::super::super::wasmcp::mcp::mcp_types::MetaFields;
            /// Provider declares its authorization requirements
            /// This is returned by get-auth-config()
            /// and used by the transport to enforce authorization
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ProviderAuthConfig {
                /// Expected JWT issuer (REQUIRED for auth)
                pub expected_issuer: _rt::String,
                /// Expected JWT audiences (REQUIRED for auth - must have at least one)
                pub expected_audiences: _rt::Vec<_rt::String>,
                /// JWKS URI for key discovery (REQUIRED for auth)
                pub jwks_uri: _rt::String,
                /// Pass raw JWT token to tools via "jwt.token" meta field.
                pub pass_jwt: bool,
                /// Expected JWT subject - if set, only this exact subject is allowed
                pub expected_subject: Option<_rt::String>,
                /// Optional Rego policy for complex authorization rules
                pub policy: Option<_rt::String>,
                /// Optional data for policy evaluation
                pub policy_data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ProviderAuthConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProviderAuthConfig")
                        .field("expected-issuer", &self.expected_issuer)
                        .field("expected-audiences", &self.expected_audiences)
                        .field("jwks-uri", &self.jwks_uri)
                        .field("pass-jwt", &self.pass_jwt)
                        .field("expected-subject", &self.expected_subject)
                        .field("policy", &self.policy)
                        .field("policy-data", &self.policy_data)
                        .finish()
                }
            }
            /// Authorization context passed between components after successful authorization
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AuthContext {
                /// OAuth client ID that made the request
                pub client_id: Option<_rt::String>,
                /// Subject claim from the token - always present from validated JWT
                pub sub: _rt::String,
                /// OAuth scopes granted to this token
                pub scopes: _rt::Vec<_rt::String>,
                /// Issuer claim from the token - always present from validated JWT
                pub iss: _rt::String,
                /// Audience claim from token (aud) - always validated, can be multiple values
                pub aud: _rt::Vec<_rt::String>,
                /// Additional claims from token as key-value pairs
                pub claims: MetaFields,
                /// Expiration timestamp (Unix seconds) - always validated and required for security
                pub exp: u64,
                /// Issued at timestamp (Unix seconds)
                pub iat: Option<u64>,
                /// Not before timestamp (Unix seconds)
                pub nbf: Option<u64>,
                /// Raw JWT iff enabled by pass-jwt flag in provider-auth-config
                pub jwt: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for AuthContext {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AuthContext")
                        .field("client-id", &self.client_id)
                        .field("sub", &self.sub)
                        .field("scopes", &self.scopes)
                        .field("iss", &self.iss)
                        .field("aud", &self.aud)
                        .field("claims", &self.claims)
                        .field("exp", &self.exp)
                        .field("iat", &self.iat)
                        .field("nbf", &self.nbf)
                        .field("jwt", &self.jwt)
                        .finish()
                }
            }
        }
        /// Type definitions for tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::wasmcp::mcp::mcp_types::ContentBlock;
            pub type JsonValue = super::super::super::wasmcp::mcp::mcp_types::JsonValue;
            pub type JsonObject = super::super::super::wasmcp::mcp::mcp_types::JsonObject;
            pub type Icon = super::super::super::wasmcp::mcp::mcp_types::Icon;
            /// Behavioral hints about tool operations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment (default: false)
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (default: true)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect (default: false)
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities (default: true)
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                /// The name of the tool
                pub name: _rt::String,
                /// A human-readable title for the tool
                pub title: Option<_rt::String>,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema object for input parameters
                pub input_schema: JsonObject,
                /// Optional JSON Schema object for structured output
                pub output_schema: Option<JsonObject>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Optional list of icons for the tool
                pub icons: Option<_rt::Vec<Icon>>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("icons", &self.icons)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object (must match the tool's input schema)
                pub arguments: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                pub is_error: Option<bool>,
                /// Optional metadata
                pub meta: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for CallToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResult {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ListToolsResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResult")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod mcp {
            /// A lifecycle for client-server connections that ensures proper capability negotiation and state management.
            /// Initialization: Capability negotiation and protocol version agreement
            /// Operation: Normal protocol communication
            /// Shutdown: Graceful termination of the connection
            ///
            /// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod lifecycle {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type McpError = super::super::super::super::wasmcp::mcp::mcp_types::McpError;
                pub type InitializeRequest = super::super::super::super::wasmcp::mcp::lifecycle_types::InitializeRequest;
                pub type InitializeResult = super::super::super::super::wasmcp::mcp::lifecycle_types::InitializeResult;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l7 = i32::from(
                        *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l10 = i32::from(
                        *arg0.add(6 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l14 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l17 = *arg0
                        .add(10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l18 = *arg0
                        .add(11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len19 = l18;
                    let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);
                    let l20 = i32::from(
                        *arg0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l24 = *arg0
                        .add(15 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l25 = *arg0
                        .add(16 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len26 = l25;
                    let bytes26 = _rt::Vec::from_raw_parts(l24.cast(), len26, len26);
                    let l27 = i32::from(
                        *arg0.add(17 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l31 = i32::from(
                        *arg0.add(20 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let result46 = T::initialize(super::super::super::super::wasmcp::mcp::lifecycle_types::InitializeRequest {
                        protocol_version: _rt::string_lift(bytes2),
                        capabilities: super::super::super::super::wasmcp::mcp::lifecycle_types::ClientCapabilities {
                            experimental: match l3 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l4 = *arg0
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l5 = *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len6 = l5;
                                        let bytes6 = _rt::Vec::from_raw_parts(
                                            l4.cast(),
                                            len6,
                                            len6,
                                        );
                                        _rt::string_lift(bytes6)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            roots: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = i32::from(
                                            *arg0
                                                .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::lifecycle_types::RootsCapability {
                                            list_changed: match l8 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l9 = i32::from(
                                                            *arg0
                                                                .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l9 as u8)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            sampling: match l10 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l11 = *arg0
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l12 = *arg0
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 = _rt::Vec::from_raw_parts(
                                            l11.cast(),
                                            len13,
                                            len13,
                                        );
                                        _rt::string_lift(bytes13)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            elicitation: match l14 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l15 = i32::from(
                                            *arg0
                                                .add(1 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::lifecycle_types::ElicitationCapability {
                                            schema_validation: match l15 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l16 = i32::from(
                                                            *arg0
                                                                .add(2 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l16 as u8)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        client_info: super::super::super::super::wasmcp::mcp::lifecycle_types::Implementation {
                            name: _rt::string_lift(bytes19),
                            title: match l20 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l21 = *arg0
                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l22 = *arg0
                                            .add(14 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len23 = l22;
                                        let bytes23 = _rt::Vec::from_raw_parts(
                                            l21.cast(),
                                            len23,
                                            len23,
                                        );
                                        _rt::string_lift(bytes23)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            version: _rt::string_lift(bytes26),
                            website_url: match l27 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l28 = *arg0
                                            .add(18 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l29 = *arg0
                                            .add(19 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len30 = l29;
                                        let bytes30 = _rt::Vec::from_raw_parts(
                                            l28.cast(),
                                            len30,
                                            len30,
                                        );
                                        _rt::string_lift(bytes30)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            icons: match l31 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l32 = *arg0
                                            .add(21 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l33 = *arg0
                                            .add(22 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base45 = l32;
                                        let len45 = l33;
                                        let mut result45 = _rt::Vec::with_capacity(len45);
                                        for i in 0..len45 {
                                            let base = base45
                                                .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                            let e45 = {
                                                let l34 = *base.add(0).cast::<*mut u8>();
                                                let l35 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                let l37 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l41 = i32::from(
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::mcp_types::Icon {
                                                    src: _rt::string_lift(bytes36),
                                                    mime_type: match l37 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l38 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l39 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len40 = l39;
                                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                                    l38.cast(),
                                                                    len40,
                                                                    len40,
                                                                );
                                                                _rt::string_lift(bytes40)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    sizes: match l41 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l42 = *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l43 = *base
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len44 = l43;
                                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                                    l42.cast(),
                                                                    len44,
                                                                    len44,
                                                                );
                                                                _rt::string_lift(bytes44)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            result45.push(e45);
                                        }
                                        _rt::cabi_dealloc(
                                            base45,
                                            len45 * (8 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result45
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    });
                    _rt::cabi_dealloc(
                        arg0,
                        23 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr47 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result46 {
                        Ok(e) => {
                            *ptr47.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::wasmcp::mcp::lifecycle_types::InitializeResult {
                                protocol_version: protocol_version48,
                                capabilities: capabilities48,
                                server_info: server_info48,
                                instructions: instructions48,
                            } = e;
                            let vec49 = (protocol_version48.into_bytes())
                                .into_boxed_slice();
                            let ptr49 = vec49.as_ptr().cast::<u8>();
                            let len49 = vec49.len();
                            ::core::mem::forget(vec49);
                            *ptr47
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len49;
                            *ptr47
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr49.cast_mut();
                            let super::super::super::super::wasmcp::mcp::lifecycle_types::ServerCapabilities {
                                experimental: experimental50,
                                logging: logging50,
                                completions: completions50,
                                prompts: prompts50,
                                resources: resources50,
                                tools: tools50,
                            } = capabilities48;
                            match experimental50 {
                                Some(e) => {
                                    *ptr47
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec51 = (e.into_bytes()).into_boxed_slice();
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    ::core::mem::forget(vec51);
                                    *ptr47
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len51;
                                    *ptr47
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr51.cast_mut();
                                }
                                None => {
                                    *ptr47
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match logging50 {
                                Some(e) => {
                                    *ptr47
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                    let len52 = vec52.len();
                                    ::core::mem::forget(vec52);
                                    *ptr47
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len52;
                                    *ptr47
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr52.cast_mut();
                                }
                                None => {
                                    *ptr47
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match completions50 {
                                Some(e) => {
                                    *ptr47
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    ::core::mem::forget(vec53);
                                    *ptr47
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len53;
                                    *ptr47
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr53.cast_mut();
                                }
                                None => {
                                    *ptr47
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match prompts50 {
                                Some(e) => {
                                    *ptr47
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasmcp::mcp::lifecycle_types::PromptsCapability {
                                        list_changed: list_changed54,
                                    } = e;
                                    match list_changed54 {
                                        Some(e) => {
                                            *ptr47
                                                .add(1 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr47
                                                .add(2 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr47
                                                .add(1 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr47
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match resources50 {
                                Some(e) => {
                                    *ptr47
                                        .add(3 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasmcp::mcp::lifecycle_types::ResourcesCapability {
                                        subscribe: subscribe55,
                                        list_changed: list_changed55,
                                    } = e;
                                    match subscribe55 {
                                        Some(e) => {
                                            *ptr47
                                                .add(4 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr47
                                                .add(5 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr47
                                                .add(4 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match list_changed55 {
                                        Some(e) => {
                                            *ptr47
                                                .add(6 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr47
                                                .add(7 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr47
                                                .add(6 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr47
                                        .add(3 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match tools50 {
                                Some(e) => {
                                    *ptr47
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasmcp::mcp::lifecycle_types::ToolsCapability {
                                        list_changed: list_changed56,
                                    } = e;
                                    match list_changed56 {
                                        Some(e) => {
                                            *ptr47
                                                .add(9 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr47
                                                .add(10 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr47
                                                .add(9 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr47
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let super::super::super::super::wasmcp::mcp::lifecycle_types::Implementation {
                                name: name57,
                                title: title57,
                                version: version57,
                                website_url: website_url57,
                                icons: icons57,
                            } = server_info48;
                            let vec58 = (name57.into_bytes()).into_boxed_slice();
                            let ptr58 = vec58.as_ptr().cast::<u8>();
                            let len58 = vec58.len();
                            ::core::mem::forget(vec58);
                            *ptr47
                                .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len58;
                            *ptr47
                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr58.cast_mut();
                            match title57 {
                                Some(e) => {
                                    *ptr47
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec59 = (e.into_bytes()).into_boxed_slice();
                                    let ptr59 = vec59.as_ptr().cast::<u8>();
                                    let len59 = vec59.len();
                                    ::core::mem::forget(vec59);
                                    *ptr47
                                        .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len59;
                                    *ptr47
                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr59.cast_mut();
                                }
                                None => {
                                    *ptr47
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec60 = (version57.into_bytes()).into_boxed_slice();
                            let ptr60 = vec60.as_ptr().cast::<u8>();
                            let len60 = vec60.len();
                            ::core::mem::forget(vec60);
                            *ptr47
                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len60;
                            *ptr47
                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr60.cast_mut();
                            match website_url57 {
                                Some(e) => {
                                    *ptr47
                                        .add(8 + 20 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec61 = (e.into_bytes()).into_boxed_slice();
                                    let ptr61 = vec61.as_ptr().cast::<u8>();
                                    let len61 = vec61.len();
                                    ::core::mem::forget(vec61);
                                    *ptr47
                                        .add(8 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len61;
                                    *ptr47
                                        .add(8 + 21 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr61.cast_mut();
                                }
                                None => {
                                    *ptr47
                                        .add(8 + 20 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match icons57 {
                                Some(e) => {
                                    *ptr47
                                        .add(8 + 23 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec66 = e;
                                    let len66 = vec66.len();
                                    let layout66 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec66.len() * (8 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result66 = if layout66.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout66).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout66);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec66.into_iter().enumerate() {
                                        let base = result66
                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::wasmcp::mcp::mcp_types::Icon {
                                                src: src62,
                                                mime_type: mime_type62,
                                                sizes: sizes62,
                                            } = e;
                                            let vec63 = (src62.into_bytes()).into_boxed_slice();
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();
                                            ::core::mem::forget(vec63);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len63;
                                            *base.add(0).cast::<*mut u8>() = ptr63.cast_mut();
                                            match mime_type62 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec64 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr64 = vec64.as_ptr().cast::<u8>();
                                                    let len64 = vec64.len();
                                                    ::core::mem::forget(vec64);
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len64;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr64.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match sizes62 {
                                                Some(e) => {
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec65 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                                    let len65 = vec65.len();
                                                    ::core::mem::forget(vec65);
                                                    *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len65;
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr65.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *ptr47
                                        .add(8 + 25 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len66;
                                    *ptr47
                                        .add(8 + 24 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result66;
                                }
                                None => {
                                    *ptr47
                                        .add(8 + 23 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match instructions48 {
                                Some(e) => {
                                    *ptr47
                                        .add(8 + 26 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec67 = (e.into_bytes()).into_boxed_slice();
                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                    let len67 = vec67.len();
                                    ::core::mem::forget(vec67);
                                    *ptr47
                                        .add(8 + 28 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len67;
                                    *ptr47
                                        .add(8 + 27 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr67.cast_mut();
                                }
                                None => {
                                    *ptr47
                                        .add(8 + 26 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr47.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::mcp_types::McpError {
                                code: code68,
                                message: message68,
                                data: data68,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V69;
                            match code68 {
                                V69::ParseError => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V69::InvalidRequest => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V69::MethodNotFound => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V69::InvalidParams => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V69::InternalError => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V69::ResourceNotFound => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V69::ToolNotFound => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V69::PromptNotFound => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V69::Unauthorized => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V69::RateLimited => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V69::Timeout => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V69::Cancelled => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V69::CustomCode(e) => {
                                    *ptr47
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr47
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec70 = (message68.into_bytes()).into_boxed_slice();
                            let ptr70 = vec70.as_ptr().cast::<u8>();
                            let len70 = vec70.len();
                            ::core::mem::forget(vec70);
                            *ptr47
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len70;
                            *ptr47
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr70.cast_mut();
                            match data68 {
                                Some(e) => {
                                    *ptr47
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec71 = (e.into_bytes()).into_boxed_slice();
                                    let ptr71 = vec71.as_ptr().cast::<u8>();
                                    let len71 = vec71.len();
                                    ::core::mem::forget(vec71);
                                    *ptr47
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len71;
                                    *ptr47
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr71.cast_mut();
                                }
                                None => {
                                    *ptr47
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr47
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                            let l6 = i32::from(
                                *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            let l9 = i32::from(
                                *arg0
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l9 {
                                0 => {}
                                _ => {
                                    let l10 = *arg0
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                            let l12 = *arg0
                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l13 = *arg0
                                .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l12, l13, 1);
                            let l14 = i32::from(
                                *arg0
                                    .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l14 {
                                0 => {}
                                _ => {
                                    let l15 = *arg0
                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *arg0
                                        .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                }
                            }
                            let l17 = *arg0
                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l18 = *arg0
                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l17, l18, 1);
                            let l19 = i32::from(
                                *arg0
                                    .add(8 + 20 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l19 {
                                0 => {}
                                _ => {
                                    let l20 = *arg0
                                        .add(8 + 21 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(8 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                            let l22 = i32::from(
                                *arg0
                                    .add(8 + 23 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l22 {
                                0 => {}
                                _ => {
                                    let l23 = *arg0
                                        .add(8 + 24 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l24 = *arg0
                                        .add(8 + 25 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base33 = l23;
                                    let len33 = l24;
                                    for i in 0..len33 {
                                        let base = base33
                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l25 = *base.add(0).cast::<*mut u8>();
                                            let l26 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l25, l26, 1);
                                            let l27 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l27 {
                                                0 => {}
                                                _ => {
                                                    let l28 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l29 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l28, l29, 1);
                                                }
                                            }
                                            let l30 = i32::from(
                                                *base
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l30 {
                                                0 => {}
                                                _ => {
                                                    let l31 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l32 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base33,
                                        len33 * (8 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l34 = i32::from(
                                *arg0
                                    .add(8 + 26 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l34 {
                                0 => {}
                                _ => {
                                    let l35 = *arg0
                                        .add(8 + 27 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l36 = *arg0
                                        .add(8 + 28 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l35, l36, 1);
                                }
                            }
                        }
                        _ => {
                            let l37 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l38 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l37, l38, 1);
                            let l39 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l39 {
                                0 => {}
                                _ => {
                                    let l40 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l41 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l40, l41, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_client_initialized_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::client_initialized();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::mcp_types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_client_initialized<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_shutdown_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::shutdown();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::mcp_types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_shutdown<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Handle session initialization
                    /// Implementations should declare their capabilities here
                    fn initialize(
                        request: InitializeRequest,
                    ) -> Result<InitializeResult, McpError>;
                    /// Handle initialization complete notification
                    fn client_initialized() -> Result<(), McpError>;
                    /// Handle shutdown request
                    fn shutdown() -> Result<(), McpError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_lifecycle_0_2_0_alpha_27_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/lifecycle@0.2.0-alpha.27#initialize")] unsafe extern
                        "C" fn export_initialize(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_initialize_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/lifecycle@0.2.0-alpha.27#initialize")]
                        unsafe extern "C" fn _post_return_initialize(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_initialize::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/lifecycle@0.2.0-alpha.27#client-initialized")] unsafe
                        extern "C" fn export_client_initialized() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_client_initialized_cabi::<$ty > () }
                        } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/lifecycle@0.2.0-alpha.27#client-initialized")]
                        unsafe extern "C" fn _post_return_client_initialized(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_client_initialized::<$ty > (arg0) } } #[unsafe
                        (export_name = "wasmcp:mcp/lifecycle@0.2.0-alpha.27#shutdown")]
                        unsafe extern "C" fn export_shutdown() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_shutdown_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/lifecycle@0.2.0-alpha.27#shutdown")] unsafe
                        extern "C" fn _post_return_shutdown(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_shutdown::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_lifecycle_0_2_0_alpha_27_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 8 + 29 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8
                        + 29 * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Authorization capabilities are provided at the transport level, enabling MCP clients to make requests to restricted MCP servers on behalf of resource owners.
            ///
            /// https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod authorization {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type ProviderAuthConfig = super::super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_auth_config_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_auth_config();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig {
                                expected_issuer: expected_issuer2,
                                expected_audiences: expected_audiences2,
                                jwks_uri: jwks_uri2,
                                pass_jwt: pass_jwt2,
                                expected_subject: expected_subject2,
                                policy: policy2,
                                policy_data: policy_data2,
                            } = e;
                            let vec3 = (expected_issuer2.into_bytes())
                                .into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                            let vec5 = expected_audiences2;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr1
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result5;
                            let vec6 = (jwks_uri2.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr1
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr1
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                            *ptr1
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match pass_jwt2 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            match expected_subject2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr1
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match policy2 {
                                Some(e) => {
                                    *ptr1
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr1
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match policy_data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1
                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr1
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_auth_config<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base7 = l3;
                            let len7 = l4;
                            for i in 0..len7 {
                                let base = base7
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l5 = *base.add(0).cast::<*mut u8>();
                                    let l6 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base7,
                                len7 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l8 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l9 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l8, l9, 1);
                            let l10 = i32::from(
                                *arg0
                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l10 {
                                0 => {}
                                _ => {
                                    let l11 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *arg0
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                            }
                            let l13 = i32::from(
                                *arg0
                                    .add(11 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l13 {
                                0 => {}
                                _ => {
                                    let l14 = *arg0
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                            }
                            let l16 = i32::from(
                                *arg0
                                    .add(14 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l16 {
                                0 => {}
                                _ => {
                                    let l17 = *arg0
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_jwks_cache_get_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::jwks_cache_get(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Some(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_jwks_cache_get<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_jwks_cache_set_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    T::jwks_cache_set(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                }
                pub trait Guest {
                    /// Get provider's auth configuration
                    /// The transport should enforce authorization
                    fn get_auth_config() -> Option<ProviderAuthConfig>;
                    /// Get cached JWKS for a given URI (optional - return none if not cached or not implemented)
                    /// Allows providers to implement JWKS caching via WASI-KV or other persistence mechanisms
                    /// The transport will call this before fetching from jwks-uri to check for cached keys
                    fn jwks_cache_get(jwks_uri: _rt::String) -> Option<_rt::String>;
                    /// Cache JWKS for a given URI (optional - no-op if caching not implemented)
                    /// The transport calls this after successfully fetching JWKS from jwks-uri
                    /// Providers can implement caching via WASI-KV or other persistence mechanisms
                    /// The jwks parameter contains the raw JWKS JSON string to cache
                    fn jwks_cache_set(jwks_uri: _rt::String, jwks: _rt::String) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_authorization_0_2_0_alpha_27_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/authorization@0.2.0-alpha.27#get-auth-config")]
                        unsafe extern "C" fn export_get_auth_config() -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_get_auth_config_cabi::<$ty
                        > () } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/authorization@0.2.0-alpha.27#get-auth-config")]
                        unsafe extern "C" fn _post_return_get_auth_config(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_auth_config::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/authorization@0.2.0-alpha.27#jwks-cache-get")] unsafe
                        extern "C" fn export_jwks_cache_get(arg0 : * mut u8, arg1 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_jwks_cache_get_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_wasmcp:mcp/authorization@0.2.0-alpha.27#jwks-cache-get")]
                        unsafe extern "C" fn _post_return_jwks_cache_get(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_jwks_cache_get::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/authorization@0.2.0-alpha.27#jwks-cache-set")] unsafe
                        extern "C" fn export_jwks_cache_set(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize,) { unsafe {
                        $($path_to_types)*:: _export_jwks_cache_set_cabi::<$ty > (arg0,
                        arg1, arg2, arg3) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_authorization_0_2_0_alpha_27_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 17 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 17
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Tools enable models to interact with external systems, such as querying databases, calling APIs, or performing computations.
            /// Each tool is uniquely identified by a name and includes metadata describing its schema.
            ///
            /// https://modelcontextprotocol.io/specification/2025-06-18/server/tools
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod tools {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type McpError = super::super::super::super::wasmcp::mcp::mcp_types::McpError;
                pub type AuthContext = super::super::super::super::wasmcp::mcp::authorization_types::AuthContext;
                pub type ListToolsRequest = super::super::super::super::wasmcp::mcp::tools_types::ListToolsRequest;
                pub type ListToolsResult = super::super::super::super::wasmcp::mcp::tools_types::ListToolsResult;
                pub type CallToolRequest = super::super::super::super::wasmcp::mcp::tools_types::CallToolRequest;
                pub type CallToolResult = super::super::super::super::wasmcp::mcp::tools_types::CallToolResult;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_tools_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result1 = T::list_tools(super::super::super::super::wasmcp::mcp::tools_types::ListToolsRequest {
                        cursor: match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    let bytes0 = _rt::Vec::from_raw_parts(
                                        arg1.cast(),
                                        len0,
                                        len0,
                                    );
                                    _rt::string_lift(bytes0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::wasmcp::mcp::tools_types::ListToolsResult {
                                tools: tools3,
                                next_cursor: next_cursor3,
                            } = e;
                            let vec17 = tools3;
                            let len17 = vec17.len();
                            let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec17.len()
                                    * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result17 = if layout17.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout17);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec17.into_iter().enumerate() {
                                let base = result17
                                    .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::wasmcp::mcp::tools_types::Tool {
                                        name: name4,
                                        title: title4,
                                        description: description4,
                                        input_schema: input_schema4,
                                        output_schema: output_schema4,
                                        annotations: annotations4,
                                        icons: icons4,
                                    } = e;
                                    let vec5 = (name4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    match title4 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec6 = (e.into_bytes()).into_boxed_slice();
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            ::core::mem::forget(vec6);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr6.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description4 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec8 = (input_schema4.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                    match output_schema4 {
                                        Some(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec9 = (e.into_bytes()).into_boxed_slice();
                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                            let len9 = vec9.len();
                                            ::core::mem::forget(vec9);
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len9;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr9.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations4 {
                                        Some(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::tools_types::ToolAnnotations {
                                                title: title10,
                                                read_only_hint: read_only_hint10,
                                                destructive_hint: destructive_hint10,
                                                idempotent_hint: idempotent_hint10,
                                                open_world_hint: open_world_hint10,
                                            } = e;
                                            match title10 {
                                                Some(e) => {
                                                    *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                                    let len11 = vec11.len();
                                                    ::core::mem::forget(vec11);
                                                    *base
                                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len11;
                                                    *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match read_only_hint10 {
                                                Some(e) => {
                                                    *base
                                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match destructive_hint10 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match idempotent_hint10 {
                                                Some(e) => {
                                                    *base
                                                        .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match open_world_hint10 {
                                                Some(e) => {
                                                    *base
                                                        .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match icons4 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = e;
                                            let len16 = vec16.len();
                                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec16.len() * (8 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result16 = if layout16.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout16);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec16.into_iter().enumerate() {
                                                let base = result16
                                                    .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::wasmcp::mcp::mcp_types::Icon {
                                                        src: src12,
                                                        mime_type: mime_type12,
                                                        sizes: sizes12,
                                                    } = e;
                                                    let vec13 = (src12.into_bytes()).into_boxed_slice();
                                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                                    let len13 = vec13.len();
                                                    ::core::mem::forget(vec13);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len13;
                                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                                    match mime_type12 {
                                                        Some(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec14 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                                            let len14 = vec14.len();
                                                            ::core::mem::forget(vec14);
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len14;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr14.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match sizes12 {
                                                        Some(e) => {
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec15 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                                            let len15 = vec15.len();
                                                            ::core::mem::forget(vec15);
                                                            *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len15;
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            *base
                                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result16;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len17;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result17;
                            match next_cursor3 {
                                Some(e) => {
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr2
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *ptr2
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::mcp_types::McpError {
                                code: code19,
                                message: message19,
                                data: data19,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V20;
                            match code19 {
                                V20::ParseError => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V20::InvalidRequest => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V20::MethodNotFound => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V20::InvalidParams => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V20::InternalError => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V20::ResourceNotFound => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V20::ToolNotFound => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V20::PromptNotFound => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V20::Unauthorized => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V20::RateLimited => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V20::Timeout => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V20::Cancelled => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V20::CustomCode(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr2
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec21 = (message19.into_bytes()).into_boxed_slice();
                            let ptr21 = vec21.as_ptr().cast::<u8>();
                            let len21 = vec21.len();
                            ::core::mem::forget(vec21);
                            *ptr2
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len21;
                            *ptr2
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr21.cast_mut();
                            match data19 {
                                Some(e) => {
                                    *ptr2
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr2
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len22;
                                    *ptr2
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr22.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_tools<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base32 = l1;
                            let len32 = l2;
                            for i in 0..len32 {
                                let base = base32
                                    .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    let l8 = i32::from(
                                        *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l8 {
                                        0 => {}
                                        _ => {
                                            let l9 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l10 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                        }
                                    }
                                    let l11 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                    let l13 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l13 {
                                        0 => {}
                                        _ => {
                                            let l14 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l15 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                        }
                                    }
                                    let l16 = i32::from(
                                        *base
                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l16 {
                                        0 => {}
                                        _ => {
                                            let l17 = i32::from(
                                                *base
                                                    .add(14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l17 {
                                                0 => {}
                                                _ => {
                                                    let l18 = *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l18, l19, 1);
                                                }
                                            }
                                        }
                                    }
                                    let l20 = i32::from(
                                        *base
                                            .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l20 {
                                        0 => {}
                                        _ => {
                                            let l21 = *base
                                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l22 = *base
                                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base31 = l21;
                                            let len31 = l22;
                                            for i in 0..len31 {
                                                let base = base31
                                                    .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l23 = *base.add(0).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                    let l25 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l25 {
                                                        0 => {}
                                                        _ => {
                                                            let l26 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                        }
                                                    }
                                                    let l28 = i32::from(
                                                        *base
                                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l28 {
                                                        0 => {}
                                                        _ => {
                                                            let l29 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l30 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l29, l30, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base31,
                                                len31 * (8 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base32,
                                len32 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l33 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l33 {
                                0 => {}
                                _ => {
                                    let l34 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l35 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l34, l35, 1);
                                }
                            }
                        }
                        _ => {
                            let l36 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l37 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l36, l37, 1);
                            let l38 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l38 {
                                0 => {}
                                _ => {
                                    let l39 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l40 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_call_tool_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l7 = i32::from(
                        *arg0
                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result48 = T::call_tool(
                        super::super::super::super::wasmcp::mcp::tools_types::CallToolRequest {
                            name: _rt::string_lift(bytes2),
                            arguments: match l3 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l4 = *arg0
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l5 = *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len6 = l5;
                                        let bytes6 = _rt::Vec::from_raw_parts(
                                            l4.cast(),
                                            len6,
                                            len6,
                                        );
                                        _rt::string_lift(bytes6)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        match l7 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l8 = i32::from(
                                        *arg0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l12 = *arg0
                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len14 = l13;
                                    let bytes14 = _rt::Vec::from_raw_parts(
                                        l12.cast(),
                                        len14,
                                        len14,
                                    );
                                    let l15 = *arg0
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *arg0
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base20 = l15;
                                    let len20 = l16;
                                    let mut result20 = _rt::Vec::with_capacity(len20);
                                    for i in 0..len20 {
                                        let base = base20
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e20 = {
                                            let l17 = *base.add(0).cast::<*mut u8>();
                                            let l18 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len19 = l18;
                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                l17.cast(),
                                                len19,
                                                len19,
                                            );
                                            _rt::string_lift(bytes19)
                                        };
                                        result20.push(e20);
                                    }
                                    _rt::cabi_dealloc(
                                        base20,
                                        len20 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l21 = *arg0
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l22 = *arg0
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len23 = l22;
                                    let bytes23 = _rt::Vec::from_raw_parts(
                                        l21.cast(),
                                        len23,
                                        len23,
                                    );
                                    let l24 = *arg0
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l25 = *arg0
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base29 = l24;
                                    let len29 = l25;
                                    let mut result29 = _rt::Vec::with_capacity(len29);
                                    for i in 0..len29 {
                                        let base = base29
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e29 = {
                                            let l26 = *base.add(0).cast::<*mut u8>();
                                            let l27 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len28 = l27;
                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                l26.cast(),
                                                len28,
                                                len28,
                                            );
                                            _rt::string_lift(bytes28)
                                        };
                                        result29.push(e29);
                                    }
                                    _rt::cabi_dealloc(
                                        base29,
                                        len29 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l30 = *arg0
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l31 = *arg0
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base38 = l30;
                                    let len38 = l31;
                                    let mut result38 = _rt::Vec::with_capacity(len38);
                                    for i in 0..len38 {
                                        let base = base38
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e38 = {
                                            let l32 = *base.add(0).cast::<*mut u8>();
                                            let l33 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len34 = l33;
                                            let bytes34 = _rt::Vec::from_raw_parts(
                                                l32.cast(),
                                                len34,
                                                len34,
                                            );
                                            let l35 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l36 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len37 = l36;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                l35.cast(),
                                                len37,
                                                len37,
                                            );
                                            (_rt::string_lift(bytes34), _rt::string_lift(bytes37))
                                        };
                                        result38.push(e38);
                                    }
                                    _rt::cabi_dealloc(
                                        base38,
                                        len38 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l39 = *arg0
                                        .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>();
                                    let l40 = i32::from(
                                        *arg0
                                            .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l42 = i32::from(
                                        *arg0
                                            .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l44 = i32::from(
                                        *arg0
                                            .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::super::wasmcp::mcp::authorization_types::AuthContext {
                                        client_id: match l8 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l9 = *arg0
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l10 = *arg0
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len11 = l10;
                                                    let bytes11 = _rt::Vec::from_raw_parts(
                                                        l9.cast(),
                                                        len11,
                                                        len11,
                                                    );
                                                    _rt::string_lift(bytes11)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        sub: _rt::string_lift(bytes14),
                                        scopes: result20,
                                        iss: _rt::string_lift(bytes23),
                                        aud: result29,
                                        claims: result38,
                                        exp: l39 as u64,
                                        iat: match l40 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l41 = *arg0
                                                        .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>();
                                                    l41 as u64
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        nbf: match l42 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l43 = *arg0
                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>();
                                                    l43 as u64
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        jwt: match l44 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l45 = *arg0
                                                        .add(64 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *arg0
                                                        .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    _rt::string_lift(bytes47)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        72 + 18 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr49 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result48 {
                        Ok(e) => {
                            *ptr49.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::wasmcp::mcp::tools_types::CallToolResult {
                                content: content50,
                                structured_content: structured_content50,
                                is_error: is_error50,
                                meta: meta50,
                            } = e;
                            let vec98 = content50;
                            let len98 = vec98.len();
                            let layout98 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec98.len()
                                    * (48 + 18 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result98 = if layout98.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout98).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout98);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec98.into_iter().enumerate() {
                                let base = result98
                                    .add(i * (48 + 18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    use super::super::super::super::wasmcp::mcp::mcp_types::ContentBlock as V97;
                                    match e {
                                        V97::Text(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::mcp_types::TextContent {
                                                text: text51,
                                                meta: meta51,
                                                annotations: annotations51,
                                            } = e;
                                            let vec52 = (text51.into_bytes()).into_boxed_slice();
                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                            let len52 = vec52.len();
                                            ::core::mem::forget(vec52);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len52;
                                            *base.add(8).cast::<*mut u8>() = ptr52.cast_mut();
                                            match meta51 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                                    let len53 = vec53.len();
                                                    ::core::mem::forget(vec53);
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len53;
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr53.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match annotations51 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                        audience: audience54,
                                                        priority: priority54,
                                                        last_modified: last_modified54,
                                                    } = e;
                                                    match audience54 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec55 = e;
                                                            let len55 = vec55.len();
                                                            let layout55 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec55.len() * 1,
                                                                1,
                                                            );
                                                            let result55 = if layout55.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout55).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout55);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec55.into_iter().enumerate() {
                                                                let base = result55.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len55;
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result55;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority54 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified54 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec56 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                                            let len56 = vec56.len();
                                                            ::core::mem::forget(vec56);
                                                            *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len56;
                                                            *base
                                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr56.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V97::Image(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::mcp_types::ImageContent {
                                                data: data57,
                                                mime_type: mime_type57,
                                                meta: meta57,
                                                annotations: annotations57,
                                            } = e;
                                            let vec58 = (data57.into_bytes()).into_boxed_slice();
                                            let ptr58 = vec58.as_ptr().cast::<u8>();
                                            let len58 = vec58.len();
                                            ::core::mem::forget(vec58);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len58;
                                            *base.add(8).cast::<*mut u8>() = ptr58.cast_mut();
                                            let vec59 = (mime_type57.into_bytes()).into_boxed_slice();
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            ::core::mem::forget(vec59);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len59;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr59.cast_mut();
                                            match meta57 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec60 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr60 = vec60.as_ptr().cast::<u8>();
                                                    let len60 = vec60.len();
                                                    ::core::mem::forget(vec60);
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len60;
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr60.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match annotations57 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                        audience: audience61,
                                                        priority: priority61,
                                                        last_modified: last_modified61,
                                                    } = e;
                                                    match audience61 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec62 = e;
                                                            let len62 = vec62.len();
                                                            let layout62 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec62.len() * 1,
                                                                1,
                                                            );
                                                            let result62 = if layout62.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout62).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout62);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec62.into_iter().enumerate() {
                                                                let base = result62.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len62;
                                                            *base
                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result62;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority61 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified61 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec63 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                                            let len63 = vec63.len();
                                                            ::core::mem::forget(vec63);
                                                            *base
                                                                .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len63;
                                                            *base
                                                                .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr63.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V97::Audio(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::mcp_types::AudioContent {
                                                data: data64,
                                                mime_type: mime_type64,
                                                annotations: annotations64,
                                            } = e;
                                            let vec65 = (data64.into_bytes()).into_boxed_slice();
                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                            let len65 = vec65.len();
                                            ::core::mem::forget(vec65);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len65;
                                            *base.add(8).cast::<*mut u8>() = ptr65.cast_mut();
                                            let vec66 = (mime_type64.into_bytes()).into_boxed_slice();
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();
                                            ::core::mem::forget(vec66);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len66;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr66.cast_mut();
                                            match annotations64 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                        audience: audience67,
                                                        priority: priority67,
                                                        last_modified: last_modified67,
                                                    } = e;
                                                    match audience67 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec68 = e;
                                                            let len68 = vec68.len();
                                                            let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec68.len() * 1,
                                                                1,
                                                            );
                                                            let result68 = if layout68.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout68);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec68.into_iter().enumerate() {
                                                                let base = result68.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len68;
                                                            *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result68;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority67 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified67 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec69 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                                            let len69 = vec69.len();
                                                            ::core::mem::forget(vec69);
                                                            *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len69;
                                                            *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr69.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V97::Resource(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::mcp_types::EmbeddedResource {
                                                meta: meta70,
                                                resource: resource70,
                                                annotations: annotations70,
                                            } = e;
                                            match meta70 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    let vec71 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr71 = vec71.as_ptr().cast::<u8>();
                                                    let len71 = vec71.len();
                                                    ::core::mem::forget(vec71);
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len71;
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr71.cast_mut();
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::wasmcp::mcp::mcp_types::ResourceContents as V82;
                                            match resource70 {
                                                V82::Text(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::mcp_types::TextResourceContents {
                                                        uri: uri72,
                                                        mime_type: mime_type72,
                                                        text: text72,
                                                        meta: meta72,
                                                    } = e;
                                                    let vec73 = (uri72.into_bytes()).into_boxed_slice();
                                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                                    let len73 = vec73.len();
                                                    ::core::mem::forget(vec73);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len73;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr73.cast_mut();
                                                    match mime_type72 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec74 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr74 = vec74.as_ptr().cast::<u8>();
                                                            let len74 = vec74.len();
                                                            ::core::mem::forget(vec74);
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len74;
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr74.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec75 = (text72.into_bytes()).into_boxed_slice();
                                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                                    let len75 = vec75.len();
                                                    ::core::mem::forget(vec75);
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len75;
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr75.cast_mut();
                                                    match meta72 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec76 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr76 = vec76.as_ptr().cast::<u8>();
                                                            let len76 = vec76.len();
                                                            ::core::mem::forget(vec76);
                                                            *base
                                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len76;
                                                            *base
                                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr76.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V82::Blob(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::mcp_types::BlobResourceContents {
                                                        uri: uri77,
                                                        mime_type: mime_type77,
                                                        blob: blob77,
                                                        meta: meta77,
                                                    } = e;
                                                    let vec78 = (uri77.into_bytes()).into_boxed_slice();
                                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                                    let len78 = vec78.len();
                                                    ::core::mem::forget(vec78);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len78;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr78.cast_mut();
                                                    match mime_type77 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec79 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr79 = vec79.as_ptr().cast::<u8>();
                                                            let len79 = vec79.len();
                                                            ::core::mem::forget(vec79);
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len79;
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr79.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec80 = (blob77.into_bytes()).into_boxed_slice();
                                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                                    let len80 = vec80.len();
                                                    ::core::mem::forget(vec80);
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len80;
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr80.cast_mut();
                                                    match meta77 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec81 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr81 = vec81.as_ptr().cast::<u8>();
                                                            let len81 = vec81.len();
                                                            ::core::mem::forget(vec81);
                                                            *base
                                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len81;
                                                            *base
                                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr81.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            match annotations70 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                        audience: audience83,
                                                        priority: priority83,
                                                        last_modified: last_modified83,
                                                    } = e;
                                                    match audience83 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec84 = e;
                                                            let len84 = vec84.len();
                                                            let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec84.len() * 1,
                                                                1,
                                                            );
                                                            let result84 = if layout84.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout84);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec84.into_iter().enumerate() {
                                                                let base = result84.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len84;
                                                            *base
                                                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result84;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority83 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified83 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec85 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr85 = vec85.as_ptr().cast::<u8>();
                                                            let len85 = vec85.len();
                                                            ::core::mem::forget(vec85);
                                                            *base
                                                                .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len85;
                                                            *base
                                                                .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr85.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V97::ResourceLink(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::mcp_types::RawResource {
                                                uri: uri86,
                                                name: name86,
                                                title: title86,
                                                description: description86,
                                                mime_type: mime_type86,
                                                size: size86,
                                                icons: icons86,
                                            } = e;
                                            let vec87 = (uri86.into_bytes()).into_boxed_slice();
                                            let ptr87 = vec87.as_ptr().cast::<u8>();
                                            let len87 = vec87.len();
                                            ::core::mem::forget(vec87);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len87;
                                            *base.add(8).cast::<*mut u8>() = ptr87.cast_mut();
                                            let vec88 = (name86.into_bytes()).into_boxed_slice();
                                            let ptr88 = vec88.as_ptr().cast::<u8>();
                                            let len88 = vec88.len();
                                            ::core::mem::forget(vec88);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len88;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr88.cast_mut();
                                            match title86 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec89 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr89 = vec89.as_ptr().cast::<u8>();
                                                    let len89 = vec89.len();
                                                    ::core::mem::forget(vec89);
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len89;
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr89.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match description86 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec90 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr90 = vec90.as_ptr().cast::<u8>();
                                                    let len90 = vec90.len();
                                                    ::core::mem::forget(vec90);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len90;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr90.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match mime_type86 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec91 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr91 = vec91.as_ptr().cast::<u8>();
                                                    let len91 = vec91.len();
                                                    ::core::mem::forget(vec91);
                                                    *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len91;
                                                    *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr91.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match size86 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(12 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match icons86 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec96 = e;
                                                    let len96 = vec96.len();
                                                    let layout96 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec96.len() * (8 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result96 = if layout96.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout96).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout96);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec96.into_iter().enumerate() {
                                                        let base = result96
                                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::wasmcp::mcp::mcp_types::Icon {
                                                                src: src92,
                                                                mime_type: mime_type92,
                                                                sizes: sizes92,
                                                            } = e;
                                                            let vec93 = (src92.into_bytes()).into_boxed_slice();
                                                            let ptr93 = vec93.as_ptr().cast::<u8>();
                                                            let len93 = vec93.len();
                                                            ::core::mem::forget(vec93);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len93;
                                                            *base.add(0).cast::<*mut u8>() = ptr93.cast_mut();
                                                            match mime_type92 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec94 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr94 = vec94.as_ptr().cast::<u8>();
                                                                    let len94 = vec94.len();
                                                                    ::core::mem::forget(vec94);
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len94;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr94.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match sizes92 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec95 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr95 = vec95.as_ptr().cast::<u8>();
                                                                    let len95 = vec95.len();
                                                                    ::core::mem::forget(vec95);
                                                                    *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len95;
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr95.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base
                                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len96;
                                                    *base
                                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result96;
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr49
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len98;
                            *ptr49
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result98;
                            match structured_content50 {
                                Some(e) => {
                                    *ptr49
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec99 = (e.into_bytes()).into_boxed_slice();
                                    let ptr99 = vec99.as_ptr().cast::<u8>();
                                    let len99 = vec99.len();
                                    ::core::mem::forget(vec99);
                                    *ptr49
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len99;
                                    *ptr49
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr99.cast_mut();
                                }
                                None => {
                                    *ptr49
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match is_error50 {
                                Some(e) => {
                                    *ptr49
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr49
                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr49
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta50 {
                                Some(e) => {
                                    *ptr49
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec100 = (e.into_bytes()).into_boxed_slice();
                                    let ptr100 = vec100.as_ptr().cast::<u8>();
                                    let len100 = vec100.len();
                                    ::core::mem::forget(vec100);
                                    *ptr49
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len100;
                                    *ptr49
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr100.cast_mut();
                                }
                                None => {
                                    *ptr49
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr49.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::mcp_types::McpError {
                                code: code101,
                                message: message101,
                                data: data101,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V102;
                            match code101 {
                                V102::ParseError => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V102::InvalidRequest => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V102::MethodNotFound => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V102::InvalidParams => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V102::InternalError => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V102::ResourceNotFound => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V102::ToolNotFound => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V102::PromptNotFound => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V102::Unauthorized => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V102::RateLimited => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V102::Timeout => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V102::Cancelled => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V102::CustomCode(e) => {
                                    *ptr49
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr49
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec103 = (message101.into_bytes()).into_boxed_slice();
                            let ptr103 = vec103.as_ptr().cast::<u8>();
                            let len103 = vec103.len();
                            ::core::mem::forget(vec103);
                            *ptr49
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len103;
                            *ptr49
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr103.cast_mut();
                            match data101 {
                                Some(e) => {
                                    *ptr49
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec104 = (e.into_bytes()).into_boxed_slice();
                                    let ptr104 = vec104.as_ptr().cast::<u8>();
                                    let len104 = vec104.len();
                                    ::core::mem::forget(vec104);
                                    *ptr49
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len104;
                                    *ptr49
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr104.cast_mut();
                                }
                                None => {
                                    *ptr49
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr49
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_call_tool<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base101 = l1;
                            let len101 = l2;
                            for i in 0..len101 {
                                let base = base101
                                    .add(i * (48 + 18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = *base.add(8).cast::<*mut u8>();
                                            let l5 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {}
                                                _ => {
                                                    let l7 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l7, l8, 1);
                                                }
                                            }
                                            let l9 = i32::from(
                                                *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l9 {
                                                0 => {}
                                                _ => {
                                                    let l10 = i32::from(
                                                        *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l10 {
                                                        0 => {}
                                                        _ => {
                                                            let l11 = *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l12 = *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base13 = l11;
                                                            let len13 = l12;
                                                            _rt::cabi_dealloc(base13, len13 * 1, 1);
                                                        }
                                                    }
                                                    let l14 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l14 {
                                                        0 => {}
                                                        _ => {
                                                            let l15 = *base
                                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l16 = *base
                                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l15, l16, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            let l17 = *base.add(8).cast::<*mut u8>();
                                            let l18 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l17, l18, 1);
                                            let l19 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l20 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l19, l20, 1);
                                            let l21 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l21 {
                                                0 => {}
                                                _ => {
                                                    let l22 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                }
                                            }
                                            let l24 = i32::from(
                                                *base
                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l24 {
                                                0 => {}
                                                _ => {
                                                    let l25 = i32::from(
                                                        *base
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l25 {
                                                        0 => {}
                                                        _ => {
                                                            let l26 = *base
                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                        }
                                                    }
                                                    let l29 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l29 {
                                                        0 => {}
                                                        _ => {
                                                            let l30 = *base
                                                                .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l31 = *base
                                                                .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l30, l31, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            let l32 = *base.add(8).cast::<*mut u8>();
                                            let l33 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l32, l33, 1);
                                            let l34 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l35 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l34, l35, 1);
                                            let l36 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l36 {
                                                0 => {}
                                                _ => {
                                                    let l37 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l37 {
                                                        0 => {}
                                                        _ => {
                                                            let l38 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l39 = *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base40 = l38;
                                                            let len40 = l39;
                                                            _rt::cabi_dealloc(base40, len40 * 1, 1);
                                                        }
                                                    }
                                                    let l41 = i32::from(
                                                        *base
                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l41 {
                                                        0 => {}
                                                        _ => {
                                                            let l42 = *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l43 = *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l42, l43, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            let l44 = i32::from(*base.add(8).cast::<u8>());
                                            match l44 {
                                                0 => {}
                                                _ => {
                                                    let l45 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l45, l46, 1);
                                                }
                                            }
                                            let l47 = i32::from(
                                                *base
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l47 {
                                                0 => {
                                                    let l48 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l49 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l48, l49, 1);
                                                    let l50 = i32::from(
                                                        *base
                                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l50 {
                                                        0 => {}
                                                        _ => {
                                                            let l51 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l52 = *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l51, l52, 1);
                                                        }
                                                    }
                                                    let l53 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l54 = *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l53, l54, 1);
                                                    let l55 = i32::from(
                                                        *base
                                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l55 {
                                                        0 => {}
                                                        _ => {
                                                            let l56 = *base
                                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *base
                                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l56, l57, 1);
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l58 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l59 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l58, l59, 1);
                                                    let l60 = i32::from(
                                                        *base
                                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l60 {
                                                        0 => {}
                                                        _ => {
                                                            let l61 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l62 = *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l61, l62, 1);
                                                        }
                                                    }
                                                    let l63 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l64 = *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l63, l64, 1);
                                                    let l65 = i32::from(
                                                        *base
                                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l65 {
                                                        0 => {}
                                                        _ => {
                                                            let l66 = *base
                                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l67 = *base
                                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l66, l67, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l68 = i32::from(
                                                *base
                                                    .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l68 {
                                                0 => {}
                                                _ => {
                                                    let l69 = i32::from(
                                                        *base
                                                            .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l69 {
                                                        0 => {}
                                                        _ => {
                                                            let l70 = *base
                                                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base72 = l70;
                                                            let len72 = l71;
                                                            _rt::cabi_dealloc(base72, len72 * 1, 1);
                                                        }
                                                    }
                                                    let l73 = i32::from(
                                                        *base
                                                            .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l73 {
                                                        0 => {}
                                                        _ => {
                                                            let l74 = *base
                                                                .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l75 = *base
                                                                .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l74, l75, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {
                                            let l76 = *base.add(8).cast::<*mut u8>();
                                            let l77 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l76, l77, 1);
                                            let l78 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l79 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l78, l79, 1);
                                            let l80 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l80 {
                                                0 => {}
                                                _ => {
                                                    let l81 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l82 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l81, l82, 1);
                                                }
                                            }
                                            let l83 = i32::from(
                                                *base
                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l83 {
                                                0 => {}
                                                _ => {
                                                    let l84 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l85 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l84, l85, 1);
                                                }
                                            }
                                            let l86 = i32::from(
                                                *base
                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l86 {
                                                0 => {}
                                                _ => {
                                                    let l87 = *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l88 = *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l87, l88, 1);
                                                }
                                            }
                                            let l89 = i32::from(
                                                *base
                                                    .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l89 {
                                                0 => {}
                                                _ => {
                                                    let l90 = *base
                                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l91 = *base
                                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base100 = l90;
                                                    let len100 = l91;
                                                    for i in 0..len100 {
                                                        let base = base100
                                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l92 = *base.add(0).cast::<*mut u8>();
                                                            let l93 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l92, l93, 1);
                                                            let l94 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l94 {
                                                                0 => {}
                                                                _ => {
                                                                    let l95 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l96 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l95, l96, 1);
                                                                }
                                                            }
                                                            let l97 = i32::from(
                                                                *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l97 {
                                                                0 => {}
                                                                _ => {
                                                                    let l98 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l99 = *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l98, l99, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base100,
                                                        len100 * (8 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base101,
                                len101 * (48 + 18 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let l102 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l102 {
                                0 => {}
                                _ => {
                                    let l103 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l104 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l103, l104, 1);
                                }
                            }
                            let l105 = i32::from(
                                *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l105 {
                                0 => {}
                                _ => {
                                    let l106 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l107 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l106, l107, 1);
                                }
                            }
                        }
                        _ => {
                            let l108 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l109 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l108, l109, 1);
                            let l110 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l110 {
                                0 => {}
                                _ => {
                                    let l111 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l112 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l111, l112, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// List available tools
                    fn list_tools(
                        request: ListToolsRequest,
                    ) -> Result<ListToolsResult, McpError>;
                    /// Execute a tool
                    fn call_tool(
                        request: CallToolRequest,
                        context: Option<AuthContext>,
                    ) -> Result<CallToolResult, McpError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_tools_0_2_0_alpha_27_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/tools@0.2.0-alpha.27#list-tools")] unsafe extern "C"
                        fn export_list_tools(arg0 : i32, arg1 : * mut u8, arg2 : usize,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_list_tools_cabi::<$ty > (arg0, arg1, arg2) } } #[unsafe
                        (export_name =
                        "cabi_post_wasmcp:mcp/tools@0.2.0-alpha.27#list-tools")] unsafe
                        extern "C" fn _post_return_list_tools(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_list_tools::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "wasmcp:mcp/tools@0.2.0-alpha.27#call-tool")] unsafe extern "C"
                        fn export_call_tool(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_call_tool_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/tools@0.2.0-alpha.27#call-tool")] unsafe
                        extern "C" fn _post_return_call_tool(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_call_tool::<$ty > (arg0) } }
                        };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_tools_0_2_0_alpha_27_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 10 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 10
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_weather_rs_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::mcp::lifecycle::__export_wasmcp_mcp_lifecycle_0_2_0_alpha_27_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::lifecycle);
        $($path_to_types_root)*::
        exports::wasmcp::mcp::authorization::__export_wasmcp_mcp_authorization_0_2_0_alpha_27_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::authorization);
        $($path_to_types_root)*::
        exports::wasmcp::mcp::tools::__export_wasmcp_mcp_tools_0_2_0_alpha_27_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::tools);
    };
}
#[doc(inline)]
pub(crate) use __export_weather_rs_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:weather-rs:capabilities:weather-rs:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3994] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x99\x1e\x01A\x02\x01\
A\x1c\x01B:\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajs\
on-value\x03\0\x02\x01s\x04\0\x0bjson-object\x03\0\x04\x01s\x04\0\x0bjson-schema\
\x03\0\x06\x01o\x02ss\x01p\x08\x04\0\x0bmeta-fields\x03\0\x09\x01ks\x01r\x03\x03\
srcs\x09mime-type\x0b\x05sizes\x0b\x04\0\x04icon\x03\0\x0c\x01p\x01\x01k\x0e\x01\
ku\x01r\x03\x08audience\x0f\x08priority\x10\x0dlast-modified\x0b\x04\0\x0bannota\
tions\x03\0\x11\x01k\x05\x01k\x12\x01r\x03\x04texts\x04meta\x13\x0bannotations\x14\
\x04\0\x0ctext-content\x03\0\x15\x01r\x04\x04datas\x09mime-types\x04meta\x13\x0b\
annotations\x14\x04\0\x0dimage-content\x03\0\x17\x01r\x03\x04datas\x09mime-types\
\x0bannotations\x14\x04\0\x0daudio-content\x03\0\x19\x01ky\x01p\x0d\x01k\x1c\x01\
r\x07\x03uris\x04names\x05title\x0b\x0bdescription\x0b\x09mime-type\x0b\x04size\x1b\
\x05icons\x1d\x04\0\x0craw-resource\x03\0\x1e\x01r\x04\x03uris\x09mime-type\x0b\x04\
texts\x04meta\x13\x04\0\x16text-resource-contents\x03\0\x20\x01r\x04\x03uris\x09\
mime-type\x0b\x04blobs\x04meta\x13\x04\0\x16blob-resource-contents\x03\0\"\x01q\x02\
\x04text\x01!\0\x04blob\x01#\0\x04\0\x11resource-contents\x03\0$\x01r\x03\x04met\
a\x13\x08resource%\x0bannotations\x14\x04\0\x11embedded-resource\x03\0&\x01q\x05\
\x04text\x01\x16\0\x05image\x01\x18\0\x05audio\x01\x1a\0\x08resource\x01'\0\x0dr\
esource-link\x01\x1f\0\x04\0\x0dcontent-block\x03\0(\x01q\x0d\x0bparse-error\0\0\
\x0finvalid-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einterna\
l-error\0\0\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\
\0\x0cunauthorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcu\
stom-code\x01z\0\x04\0\x0aerror-code\x03\0*\x01r\x03\x04code+\x07messages\x04dat\
a\x0b\x04\0\x09mcp-error\x03\0,\x01s\x04\0\x0eprogress-token\x03\0.\x01q\x02\x03\
str\x01s\0\x03num\x01x\0\x04\0\x0arequest-id\x03\00\x01m\x03\x04user\x09assistan\
t\x06system\x04\0\x0cmessage-role\x03\02\x01r\x01\x04name\x0b\x04\0\x0amodel-hin\
t\x03\04\x01p5\x01k6\x01r\x04\x05hints7\x0dcost-priority\x10\x0espeed-priority\x10\
\x15intelligence-priority\x10\x04\0\x11model-preferences\x03\08\x03\0#wasmcp:mcp\
/mcp-types@0.2.0-alpha.27\x05\0\x02\x03\0\0\x0bmeta-fields\x02\x03\0\0\x0bjson-o\
bject\x02\x03\0\0\x04icon\x01B&\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\x03\0\0\
\x02\x03\x02\x01\x02\x04\0\x0bjson-object\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x04\
icon\x03\0\x04\x01s\x04\0\x10protocol-version\x03\0\x06\x01ks\x01p\x05\x01k\x09\x01\
r\x05\x04names\x05title\x08\x07versions\x0bwebsite-url\x08\x05icons\x0a\x04\0\x0e\
implementation\x03\0\x0b\x01k\x7f\x01r\x01\x0clist-changed\x0d\x04\0\x10roots-ca\
pability\x03\0\x0e\x01r\x01\x0clist-changed\x0d\x04\0\x12prompts-capability\x03\0\
\x10\x01r\x02\x09subscribe\x0d\x0clist-changed\x0d\x04\0\x14resources-capability\
\x03\0\x12\x01r\x01\x0clist-changed\x0d\x04\0\x10tools-capability\x03\0\x14\x01r\
\x01\x11schema-validation\x0d\x04\0\x16elicitation-capability\x03\0\x16\x01k\x03\
\x01k\x0f\x01k\x17\x01r\x04\x0cexperimental\x18\x05roots\x19\x08sampling\x18\x0b\
elicitation\x1a\x04\0\x13client-capabilities\x03\0\x1b\x01k\x11\x01k\x13\x01k\x15\
\x01r\x06\x0cexperimental\x18\x07logging\x18\x0bcompletions\x18\x07prompts\x1d\x09\
resources\x1e\x05tools\x1f\x04\0\x13server-capabilities\x03\0\x20\x01r\x03\x10pr\
otocol-version\x07\x0ccapabilities\x1c\x0bclient-info\x0c\x04\0\x12initialize-re\
quest\x03\0\"\x01r\x04\x10protocol-version\x07\x0ccapabilities!\x0bserver-info\x0c\
\x0cinstructions\x08\x04\0\x11initialize-result\x03\0$\x03\0)wasmcp:mcp/lifecycl\
e-types@0.2.0-alpha.27\x05\x04\x01B\x09\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\
\x03\0\0\x01ps\x01ks\x01r\x07\x0fexpected-issuers\x12expected-audiences\x02\x08j\
wks-uris\x08pass-jwt\x7f\x10expected-subject\x03\x06policy\x03\x0bpolicy-data\x03\
\x04\0\x14provider-auth-config\x03\0\x04\x01kw\x01r\x0a\x09client-id\x03\x03subs\
\x06scopes\x02\x03isss\x03aud\x02\x06claims\x01\x03expw\x03iat\x06\x03nbf\x06\x03\
jwt\x03\x04\0\x0cauth-context\x03\0\x07\x03\0-wasmcp:mcp/authorization-types@0.2\
.0-alpha.27\x05\x05\x02\x03\0\0\x0dcontent-block\x02\x03\0\0\x0ajson-value\x02\x03\
\0\x02\x0cauth-context\x01B\x1f\x02\x03\x02\x01\x06\x04\0\x0dcontent-block\x03\0\
\0\x02\x03\x02\x01\x07\x04\0\x0ajson-value\x03\0\x02\x02\x03\x02\x01\x02\x04\0\x0b\
json-object\x03\0\x04\x02\x03\x02\x01\x03\x04\0\x04icon\x03\0\x06\x02\x03\x02\x01\
\x08\x04\0\x0cauth-context\x03\0\x08\x01ks\x01k\x7f\x01r\x05\x05title\x0a\x0erea\
d-only-hint\x0b\x10destructive-hint\x0b\x0fidempotent-hint\x0b\x0fopen-world-hin\
t\x0b\x04\0\x10tool-annotations\x03\0\x0c\x01k\x05\x01k\x0d\x01p\x07\x01k\x10\x01\
r\x07\x04names\x05title\x0a\x0bdescription\x0a\x0cinput-schema\x05\x0doutput-sch\
ema\x0e\x0bannotations\x0f\x05icons\x11\x04\0\x04tool\x03\0\x12\x01r\x02\x04name\
s\x09arguments\x0e\x04\0\x11call-tool-request\x03\0\x14\x01p\x01\x01k\x03\x01r\x04\
\x07content\x16\x12structured-content\x17\x08is-error\x0b\x04meta\x0e\x04\0\x10c\
all-tool-result\x03\0\x18\x01r\x01\x06cursor\x0a\x04\0\x12list-tools-request\x03\
\0\x1a\x01p\x13\x01r\x02\x05tools\x1c\x0bnext-cursor\x0a\x04\0\x11list-tools-res\
ult\x03\0\x1d\x03\0%wasmcp:mcp/tools-types@0.2.0-alpha.27\x05\x09\x02\x03\0\0\x09\
mcp-error\x02\x03\0\x01\x12initialize-request\x02\x03\0\x01\x11initialize-result\
\x01B\x0d\x02\x03\x02\x01\x0a\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x0b\x04\
\0\x12initialize-request\x03\0\x02\x02\x03\x02\x01\x0c\x04\0\x11initialize-resul\
t\x03\0\x04\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x06\x04\0\x0ainitiali\
ze\x01\x07\x01j\0\x01\x01\x01@\0\0\x08\x04\0\x12client-initialized\x01\x09\x04\0\
\x08shutdown\x01\x09\x04\0#wasmcp:mcp/lifecycle@0.2.0-alpha.27\x05\x0d\x02\x03\0\
\x02\x14provider-auth-config\x01B\x0a\x02\x03\x02\x01\x0e\x04\0\x14provider-auth\
-config\x03\0\0\x01k\x01\x01@\0\0\x02\x04\0\x0fget-auth-config\x01\x03\x01ks\x01\
@\x01\x08jwks-uris\0\x04\x04\0\x0ejwks-cache-get\x01\x05\x01@\x02\x08jwks-uris\x04\
jwkss\x01\0\x04\0\x0ejwks-cache-set\x01\x06\x04\0'wasmcp:mcp/authorization@0.2.0\
-alpha.27\x05\x0f\x02\x03\0\x03\x12list-tools-request\x02\x03\0\x03\x11list-tool\
s-result\x02\x03\0\x03\x11call-tool-request\x02\x03\0\x03\x10call-tool-result\x01\
B\x13\x02\x03\x02\x01\x0a\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x08\x04\0\x0c\
auth-context\x03\0\x02\x02\x03\x02\x01\x10\x04\0\x12list-tools-request\x03\0\x04\
\x02\x03\x02\x01\x11\x04\0\x11list-tools-result\x03\0\x06\x02\x03\x02\x01\x12\x04\
\0\x11call-tool-request\x03\0\x08\x02\x03\x02\x01\x13\x04\0\x10call-tool-result\x03\
\0\x0a\x01j\x01\x07\x01\x01\x01@\x01\x07request\x05\0\x0c\x04\0\x0alist-tools\x01\
\x0d\x01k\x03\x01j\x01\x0b\x01\x01\x01@\x02\x07request\x09\x07context\x0e\0\x0f\x04\
\0\x09call-tool\x01\x10\x04\0\x1fwasmcp:mcp/tools@0.2.0-alpha.27\x05\x14\x04\0\"\
weather-rs:capabilities/weather-rs\x04\0\x0b\x10\x01\0\x0aweather-rs\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
