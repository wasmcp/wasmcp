// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol
        /// These types are used across all MCP interfaces
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            pub type JsonValue = _rt::String;
            /// Metadata fields for extensibility
            /// Key-value pairs where values are JSON-encoded strings
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                /// Implementations SHOULD validate this is within [0.0, 1.0] range
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                /// Format: YYYY-MM-DDTHH:mm:ss[.sss]Z or Â±HH:MM offset
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Base metadata pattern used throughout the protocol
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BaseMetadata {
                /// Programmatic identifier
                pub name: _rt::String,
                /// Human-readable display name
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub text: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Image content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Audio content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Reference to a resource that the server can read
            /// Resource links included in prompts or tool results may not appear in resources/list
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceLink {
                /// URI of the resource
                pub uri: _rt::String,
                /// Programmatic identifier for the resource
                pub name: _rt::String,
                /// Human-readable display title (preferred for UI display)
                pub title: Option<_rt::String>,
                /// Description of what this resource represents
                pub description: Option<_rt::String>,
                /// MIME type of the resource, if known
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding), if known
                pub size: Option<u64>,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceLink {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLink")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Binary data
                pub blob: _rt::Vec<u8>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            /// The contents of a resource, embedded into a prompt or tool call result
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct EmbeddedResource {
                /// The actual resource contents (text or binary)
                pub contents: ResourceContents,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("contents", &self.contents)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLink),
                EmbeddedResource(EmbeddedResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// JSON Schema representation
            /// Kept as a string since JSON Schema is complex
            /// and typically validated by specialized libraries
            pub type JsonSchema = _rt::String;
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Pagination cursor for list operations
            pub type Cursor = _rt::String;
            /// Progress token for tracking long-running operations
            pub type ProgressToken = _rt::String;
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Resource template with URI template support (RFC 6570)
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceTemplate {
                /// URI template that can be expanded with variables
                pub uri_template: _rt::String,
                /// Identifier for the template
                pub name: _rt::String,
                /// Human-readable description
                pub description: Option<_rt::String>,
                /// Expected MIME type of resources
                pub mime_type: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ResourceTemplate {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceTemplate")
                        .field("uri-template", &self.uri_template)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .finish()
                }
            }
        }
        /// Core types and capabilities for MCP
        /// Every MCP implementation requires these fundamental types and functions
        /// Type definitions for core MCP protocol operations
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod core_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MetaFields = super::super::super::wasmcp::mcp::types::MetaFields;
            /// Protocol versions supported by MCP
            /// These correspond to official MCP specification versions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum ProtocolVersion {
                /// MCP 2025-03-26 specification
                V20250326,
                /// MCP 2025-06-18 specification (latest)
                V20250618,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::V20250326 => {
                            f.debug_tuple("ProtocolVersion::V20250326").finish()
                        }
                        ProtocolVersion::V20250618 => {
                            f.debug_tuple("ProtocolVersion::V20250618").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::V20250326,
                        1 => ProtocolVersion::V20250618,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Information about an MCP implementation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImplementationInfo {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ImplementationInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImplementationInfo")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling
                pub sampling: Option<bool>,
                /// Support for user elicitation
                pub elicitation: Option<bool>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Server can send log messages
                pub logging: Option<bool>,
                /// Server supports argument autocompletion
                pub completions: Option<bool>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: ImplementationInfo,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeResponse {
                /// Protocol version the server will use
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: ImplementationInfo,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResponse")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// Authorization types for MCP servers
        /// These types define the authorization configuration that providers can declare
        /// and that transports use to enforce authorization
        /// Type definitions for authentication and authorization
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod authorization_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MetaFields = super::super::super::wasmcp::mcp::types::MetaFields;
            /// Provider declares its authorization requirements
            /// This is returned by core-capabilities::get-auth-config()
            /// and used by the transport to enforce authorization
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ProviderAuthConfig {
                /// Expected JWT issuer (REQUIRED for auth)
                pub expected_issuer: _rt::String,
                /// Expected JWT audiences (REQUIRED for auth - must have at least one)
                pub expected_audiences: _rt::Vec<_rt::String>,
                /// Expected JWT subject - if set, only this exact subject is allowed
                pub expected_subject: Option<_rt::String>,
                /// JWKS URI for key discovery (REQUIRED for auth)
                pub jwks_uri: _rt::String,
                /// Optional Rego policy for complex authorization rules
                pub policy: Option<_rt::String>,
                /// Optional data for policy evaluation
                pub policy_data: Option<_rt::String>,
                /// Pass raw JWT token to tools via "jwt.token" meta field (default: false)
                pub pass_jwt: bool,
            }
            impl ::core::fmt::Debug for ProviderAuthConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProviderAuthConfig")
                        .field("expected-issuer", &self.expected_issuer)
                        .field("expected-audiences", &self.expected_audiences)
                        .field("expected-subject", &self.expected_subject)
                        .field("jwks-uri", &self.jwks_uri)
                        .field("policy", &self.policy)
                        .field("policy-data", &self.policy_data)
                        .field("pass-jwt", &self.pass_jwt)
                        .finish()
                }
            }
            /// Authorization context passed between components after successful authorization
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AuthContext {
                /// OAuth client ID that made the request
                pub client_id: Option<_rt::String>,
                /// Subject claim from the token - always present from validated JWT
                pub sub: _rt::String,
                /// OAuth scopes granted to this token
                pub scopes: _rt::Vec<_rt::String>,
                /// Issuer claim from the token - always present from validated JWT
                pub iss: _rt::String,
                /// Audience claim from token (aud) - always validated, can be multiple values
                pub aud: _rt::Vec<_rt::String>,
                /// Additional claims from token as key-value pairs
                pub claims: MetaFields,
                /// Expiration timestamp (Unix seconds) - always validated and required for security
                pub exp: u64,
                /// Issued at timestamp (Unix seconds)
                pub iat: Option<u64>,
                /// Not before timestamp (Unix seconds)
                pub nbf: Option<u64>,
                /// Raw JWT iff enabled by authorization-types::pass-jwt
                pub jwt: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for AuthContext {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AuthContext")
                        .field("client-id", &self.client_id)
                        .field("sub", &self.sub)
                        .field("scopes", &self.scopes)
                        .field("iss", &self.iss)
                        .field("aud", &self.aud)
                        .field("claims", &self.claims)
                        .field("exp", &self.exp)
                        .field("iat", &self.iat)
                        .field("nbf", &self.nbf)
                        .field("jwt", &self.jwt)
                        .finish()
                }
            }
        }
        /// Tool types and capabilities for MCP
        /// Type definitions for tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tool_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::wasmcp::mcp::types::ContentBlock;
            pub type JsonValue = super::super::super::wasmcp::mcp::types::JsonValue;
            pub type JsonSchema = super::super::super::wasmcp::mcp::types::JsonSchema;
            pub type BaseMetadata = super::super::super::wasmcp::mcp::types::BaseMetadata;
            pub type MetaFields = super::super::super::wasmcp::mcp::types::MetaFields;
            pub type Cursor = super::super::super::wasmcp::mcp::types::Cursor;
            pub type ProgressToken = super::super::super::wasmcp::mcp::types::ProgressToken;
            /// Behavioral hints about tool operations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (meaningful when not read-only)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema for input parameters
                pub input_schema: JsonSchema,
                /// Optional schema for structured output
                pub output_schema: Option<JsonSchema>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                /// If true, content should contain error details
                pub is_error: Option<bool>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<Cursor>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResponse {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResponse")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object
                pub arguments: Option<JsonValue>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod mcp {
            /// Core capabilities that all MCP implementations must provide
            /// These are the essential protocol functions every server needs
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod core_capabilities {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type McpError = super::super::super::super::wasmcp::mcp::types::McpError;
                pub type InitializeRequest = super::super::super::super::wasmcp::mcp::core_types::InitializeRequest;
                pub type InitializeResponse = super::super::super::super::wasmcp::mcp::core_types::InitializeResponse;
                pub type ProviderAuthConfig = super::super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_initialize_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    let l1 = i32::from(
                        *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l11 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l14 = i32::from(
                        *arg0
                            .add(3 + 4 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l16 = i32::from(
                        *arg0
                            .add(5 + 4 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l18 = *arg0
                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l19 = *arg0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len20 = l19;
                    let bytes20 = _rt::Vec::from_raw_parts(l18.cast(), len20, len20);
                    let l21 = *arg0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l22 = *arg0
                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len23 = l22;
                    let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);
                    let l24 = i32::from(
                        *arg0
                            .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l28 = i32::from(
                        *arg0
                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result38 = T::handle_initialize(super::super::super::super::wasmcp::mcp::core_types::InitializeRequest {
                        protocol_version: super::super::super::super::wasmcp::mcp::core_types::ProtocolVersion::_lift(
                            l0 as u8,
                        ),
                        capabilities: super::super::super::super::wasmcp::mcp::core_types::ClientCapabilities {
                            experimental: match l1 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l2 = *arg0
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l3 = *arg0
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base10 = l2;
                                        let len10 = l3;
                                        let mut result10 = _rt::Vec::with_capacity(len10);
                                        for i in 0..len10 {
                                            let base = base10
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e10 = {
                                                let l4 = *base.add(0).cast::<*mut u8>();
                                                let l5 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                let l7 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l8 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                (_rt::string_lift(bytes6), _rt::string_lift(bytes9))
                                            };
                                            result10.push(e10);
                                        }
                                        _rt::cabi_dealloc(
                                            base10,
                                            len10 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result10
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            roots: match l11 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l12 = i32::from(
                                            *arg0
                                                .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::core_types::RootsCapability {
                                            list_changed: match l12 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l13 = i32::from(
                                                            *arg0
                                                                .add(2 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l13 as u8)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            sampling: match l14 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l15 = i32::from(
                                            *arg0
                                                .add(4 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        _rt::bool_lift(l15 as u8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            elicitation: match l16 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l17 = i32::from(
                                            *arg0
                                                .add(6 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        _rt::bool_lift(l17 as u8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        client_info: super::super::super::super::wasmcp::mcp::core_types::ImplementationInfo {
                            name: _rt::string_lift(bytes20),
                            version: _rt::string_lift(bytes23),
                            title: match l24 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l25 = *arg0
                                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l26 = *arg0
                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len27 = l26;
                                        let bytes27 = _rt::Vec::from_raw_parts(
                                            l25.cast(),
                                            len27,
                                            len27,
                                        );
                                        _rt::string_lift(bytes27)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        meta: match l28 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l29 = *arg0
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l30 = *arg0
                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base37 = l29;
                                    let len37 = l30;
                                    let mut result37 = _rt::Vec::with_capacity(len37);
                                    for i in 0..len37 {
                                        let base = base37
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e37 = {
                                            let l31 = *base.add(0).cast::<*mut u8>();
                                            let l32 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len33 = l32;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                l31.cast(),
                                                len33,
                                                len33,
                                            );
                                            let l34 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l35 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len36 = l35;
                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                l34.cast(),
                                                len36,
                                                len36,
                                            );
                                            (_rt::string_lift(bytes33), _rt::string_lift(bytes36))
                                        };
                                        result37.push(e37);
                                    }
                                    _rt::cabi_dealloc(
                                        base37,
                                        len37 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result37
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 14 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr39 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result38 {
                        Ok(e) => {
                            *ptr39.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::wasmcp::mcp::core_types::InitializeResponse {
                                protocol_version: protocol_version40,
                                capabilities: capabilities40,
                                server_info: server_info40,
                                instructions: instructions40,
                                meta: meta40,
                            } = e;
                            *ptr39
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (protocol_version40.clone() as i32) as u8;
                            let super::super::super::super::wasmcp::mcp::core_types::ServerCapabilities {
                                experimental: experimental41,
                                logging: logging41,
                                completions: completions41,
                                prompts: prompts41,
                                resources: resources41,
                                tools: tools41,
                            } = capabilities40;
                            match experimental41 {
                                Some(e) => {
                                    *ptr39
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec45 = e;
                                    let len45 = vec45.len();
                                    let layout45 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec45.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result45 = if layout45.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout45).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout45);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec45.into_iter().enumerate() {
                                        let base = result45
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t42_0, t42_1) = e;
                                            let vec43 = (t42_0.into_bytes()).into_boxed_slice();
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            ::core::mem::forget(vec43);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len43;
                                            *base.add(0).cast::<*mut u8>() = ptr43.cast_mut();
                                            let vec44 = (t42_1.into_bytes()).into_boxed_slice();
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();
                                            ::core::mem::forget(vec44);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len44;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr44.cast_mut();
                                        }
                                    }
                                    *ptr39
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len45;
                                    *ptr39
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result45;
                                }
                                None => {
                                    *ptr39
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match logging41 {
                                Some(e) => {
                                    *ptr39
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr39
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr39
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match completions41 {
                                Some(e) => {
                                    *ptr39
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr39
                                        .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr39
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match prompts41 {
                                Some(e) => {
                                    *ptr39
                                        .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasmcp::mcp::core_types::PromptsCapability {
                                        list_changed: list_changed46,
                                    } = e;
                                    match list_changed46 {
                                        Some(e) => {
                                            *ptr39
                                                .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr39
                                                .add(6 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr39
                                                .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr39
                                        .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match resources41 {
                                Some(e) => {
                                    *ptr39
                                        .add(7 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasmcp::mcp::core_types::ResourcesCapability {
                                        subscribe: subscribe47,
                                        list_changed: list_changed47,
                                    } = e;
                                    match subscribe47 {
                                        Some(e) => {
                                            *ptr39
                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr39
                                                .add(9 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr39
                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match list_changed47 {
                                        Some(e) => {
                                            *ptr39
                                                .add(10 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr39
                                                .add(11 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr39
                                                .add(10 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr39
                                        .add(7 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match tools41 {
                                Some(e) => {
                                    *ptr39
                                        .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::wasmcp::mcp::core_types::ToolsCapability {
                                        list_changed: list_changed48,
                                    } = e;
                                    match list_changed48 {
                                        Some(e) => {
                                            *ptr39
                                                .add(13 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr39
                                                .add(14 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        None => {
                                            *ptr39
                                                .add(13 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr39
                                        .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let super::super::super::super::wasmcp::mcp::core_types::ImplementationInfo {
                                name: name49,
                                version: version49,
                                title: title49,
                            } = server_info40;
                            let vec50 = (name49.into_bytes()).into_boxed_slice();
                            let ptr50 = vec50.as_ptr().cast::<u8>();
                            let len50 = vec50.len();
                            ::core::mem::forget(vec50);
                            *ptr39
                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len50;
                            *ptr39
                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr50.cast_mut();
                            let vec51 = (version49.into_bytes()).into_boxed_slice();
                            let ptr51 = vec51.as_ptr().cast::<u8>();
                            let len51 = vec51.len();
                            ::core::mem::forget(vec51);
                            *ptr39
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len51;
                            *ptr39
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr51.cast_mut();
                            match title49 {
                                Some(e) => {
                                    *ptr39
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                    let len52 = vec52.len();
                                    ::core::mem::forget(vec52);
                                    *ptr39
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len52;
                                    *ptr39
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr52.cast_mut();
                                }
                                None => {
                                    *ptr39
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match instructions40 {
                                Some(e) => {
                                    *ptr39
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    ::core::mem::forget(vec53);
                                    *ptr39
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len53;
                                    *ptr39
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr53.cast_mut();
                                }
                                None => {
                                    *ptr39
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta40 {
                                Some(e) => {
                                    *ptr39
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec57 = e;
                                    let len57 = vec57.len();
                                    let layout57 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec57.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result57 = if layout57.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout57).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout57);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec57.into_iter().enumerate() {
                                        let base = result57
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t54_0, t54_1) = e;
                                            let vec55 = (t54_0.into_bytes()).into_boxed_slice();
                                            let ptr55 = vec55.as_ptr().cast::<u8>();
                                            let len55 = vec55.len();
                                            ::core::mem::forget(vec55);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len55;
                                            *base.add(0).cast::<*mut u8>() = ptr55.cast_mut();
                                            let vec56 = (t54_1.into_bytes()).into_boxed_slice();
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            ::core::mem::forget(vec56);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len56;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr56.cast_mut();
                                        }
                                    }
                                    *ptr39
                                        .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len57;
                                    *ptr39
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result57;
                                }
                                None => {
                                    *ptr39
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr39.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::types::McpError {
                                code: code58,
                                message: message58,
                                data: data58,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::types::ErrorCode as V59;
                            match code58 {
                                V59::ParseError => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V59::InvalidRequest => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V59::MethodNotFound => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V59::InvalidParams => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V59::InternalError => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V59::ResourceNotFound => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V59::ToolNotFound => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V59::PromptNotFound => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V59::Unauthorized => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V59::RateLimited => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V59::Timeout => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V59::Cancelled => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V59::CustomCode(e) => {
                                    *ptr39
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr39
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec60 = (message58.into_bytes()).into_boxed_slice();
                            let ptr60 = vec60.as_ptr().cast::<u8>();
                            let len60 = vec60.len();
                            ::core::mem::forget(vec60);
                            *ptr39
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len60;
                            *ptr39
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr60.cast_mut();
                            match data58 {
                                Some(e) => {
                                    *ptr39
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec61 = (e.into_bytes()).into_boxed_slice();
                                    let ptr61 = vec61.as_ptr().cast::<u8>();
                                    let len61 = vec61.len();
                                    ::core::mem::forget(vec61);
                                    *ptr39
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len61;
                                    *ptr39
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr61.cast_mut();
                                }
                                None => {
                                    *ptr39
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr39
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_initialize<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base8 = l2;
                                    let len8 = l3;
                                    for i in 0..len8 {
                                        let base = base8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                            let l6 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base8,
                                        len8 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l9 = *arg0
                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *arg0
                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                            let l11 = *arg0
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l12 = *arg0
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l11, l12, 1);
                            let l13 = i32::from(
                                *arg0
                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l13 {
                                0 => {}
                                _ => {
                                    let l14 = *arg0
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                            }
                            let l16 = i32::from(
                                *arg0
                                    .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l16 {
                                0 => {}
                                _ => {
                                    let l17 = *arg0
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                            }
                            let l19 = i32::from(
                                *arg0
                                    .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l19 {
                                0 => {}
                                _ => {
                                    let l20 = *arg0
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base26 = l20;
                                    let len26 = l21;
                                    for i in 0..len26 {
                                        let base = base26
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l22 = *base.add(0).cast::<*mut u8>();
                                            let l23 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l22, l23, 1);
                                            let l24 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l25 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l24, l25, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base26,
                                        len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l27 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l28 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l27, l28, 1);
                            let l29 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l29 {
                                0 => {}
                                _ => {
                                    let l30 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l31 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l30, l31, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_initialized_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::handle_initialized();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_initialized<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_ping_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::handle_ping();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_ping<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_shutdown_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::handle_shutdown();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::types::McpError {
                                code: code2,
                                message: message2,
                                data: data2,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::types::ErrorCode as V3;
                            match code2 {
                                V3::ParseError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V3::InvalidRequest => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V3::MethodNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V3::InvalidParams => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V3::InternalError => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V3::ResourceNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V3::ToolNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V3::PromptNotFound => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V3::Unauthorized => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V3::RateLimited => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V3::Timeout => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V3::Cancelled => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V3::CustomCode(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec4 = (message2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            match data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_shutdown<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_auth_config_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_auth_config();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig {
                                expected_issuer: expected_issuer2,
                                expected_audiences: expected_audiences2,
                                expected_subject: expected_subject2,
                                jwks_uri: jwks_uri2,
                                policy: policy2,
                                policy_data: policy_data2,
                                pass_jwt: pass_jwt2,
                            } = e;
                            let vec3 = (expected_issuer2.into_bytes())
                                .into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                            let vec5 = expected_audiences2;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr1
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result5;
                            match expected_subject2 {
                                Some(e) => {
                                    *ptr1
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr1
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec7 = (jwks_uri2.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr1
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr1
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                            match policy2 {
                                Some(e) => {
                                    *ptr1
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr1
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match policy_data2 {
                                Some(e) => {
                                    *ptr1
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr1
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr1
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match pass_jwt2 {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_auth_config<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base7 = l3;
                            let len7 = l4;
                            for i in 0..len7 {
                                let base = base7
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l5 = *base.add(0).cast::<*mut u8>();
                                    let l6 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base7,
                                len7 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l8 = i32::from(
                                *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l8 {
                                0 => {}
                                _ => {
                                    let l9 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l10 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l9, l10, 1);
                                }
                            }
                            let l11 = *arg0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l12 = *arg0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l11, l12, 1);
                            let l13 = i32::from(
                                *arg0
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l13 {
                                0 => {}
                                _ => {
                                    let l14 = *arg0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                            }
                            let l16 = i32::from(
                                *arg0
                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l16 {
                                0 => {}
                                _ => {
                                    let l17 = *arg0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_jwks_cache_get_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::jwks_cache_get(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Some(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_jwks_cache_get<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_jwks_cache_set_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    T::jwks_cache_set(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                }
                pub trait Guest {
                    /// Handle session initialization
                    /// Implementations should declare their capabilities here
                    fn handle_initialize(
                        request: InitializeRequest,
                    ) -> Result<InitializeResponse, McpError>;
                    /// Handle initialization complete notification
                    fn handle_initialized() -> Result<(), McpError>;
                    /// Handle ping request for keepalive
                    fn handle_ping() -> Result<(), McpError>;
                    /// Handle shutdown request
                    fn handle_shutdown() -> Result<(), McpError>;
                    /// Get provider's auth configuration (optional - return none for no auth)
                    /// If auth configuration is provided, the transport will enforce authorization
                    fn get_auth_config() -> Option<ProviderAuthConfig>;
                    /// Get cached JWKS for a given URI (optional - return none if not cached or not implemented)
                    /// Allows providers to implement JWKS caching via WASI-KV or other persistence mechanisms
                    /// The transport will call this before fetching from jwks-uri to check for cached keys
                    fn jwks_cache_get(jwks_uri: _rt::String) -> Option<_rt::String>;
                    /// Cache JWKS for a given URI (optional - no-op if caching not implemented)
                    /// The transport calls this after successfully fetching JWKS from jwks-uri
                    /// Providers can implement caching via WASI-KV or other persistence mechanisms
                    /// The jwks parameter contains the raw JWKS JSON string to cache
                    fn jwks_cache_set(jwks_uri: _rt::String, jwks: _rt::String) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_core_capabilities_0_2_0_alpha_6_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-initialize")]
                        unsafe extern "C" fn export_handle_initialize(arg0 : * mut u8,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_initialize_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-initialize")]
                        unsafe extern "C" fn _post_return_handle_initialize(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_initialize::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-initialized")]
                        unsafe extern "C" fn export_handle_initialized() -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_handle_initialized_cabi::<$ty > () } } #[unsafe
                        (export_name =
                        "cabi_post_wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-initialized")]
                        unsafe extern "C" fn _post_return_handle_initialized(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_initialized::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-ping")] unsafe
                        extern "C" fn export_handle_ping() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_ping_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-ping")]
                        unsafe extern "C" fn _post_return_handle_ping(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_handle_ping::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-shutdown")]
                        unsafe extern "C" fn export_handle_shutdown() -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_handle_shutdown_cabi::<$ty
                        > () } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/core-capabilities@0.2.0-alpha.6#handle-shutdown")]
                        unsafe extern "C" fn _post_return_handle_shutdown(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_shutdown::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/core-capabilities@0.2.0-alpha.6#get-auth-config")]
                        unsafe extern "C" fn export_get_auth_config() -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_get_auth_config_cabi::<$ty
                        > () } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/core-capabilities@0.2.0-alpha.6#get-auth-config")]
                        unsafe extern "C" fn _post_return_get_auth_config(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_auth_config::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/core-capabilities@0.2.0-alpha.6#jwks-cache-get")]
                        unsafe extern "C" fn export_jwks_cache_get(arg0 : * mut u8, arg1
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_jwks_cache_get_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_wasmcp:mcp/core-capabilities@0.2.0-alpha.6#jwks-cache-get")]
                        unsafe extern "C" fn _post_return_jwks_cache_get(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_jwks_cache_get::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/core-capabilities@0.2.0-alpha.6#jwks-cache-set")]
                        unsafe extern "C" fn export_jwks_cache_set(arg0 : * mut u8, arg1
                        : usize, arg2 : * mut u8, arg3 : usize,) { unsafe {
                        $($path_to_types)*:: _export_jwks_cache_set_cabi::<$ty > (arg0,
                        arg1, arg2, arg3) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_core_capabilities_0_2_0_alpha_6_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 16 + 18 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16
                        + 18 * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Tool capabilities - implement this to provide tools
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod tools_capabilities {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type McpError = super::super::super::super::wasmcp::mcp::types::McpError;
                pub type ListToolsRequest = super::super::super::super::wasmcp::mcp::tool_types::ListToolsRequest;
                pub type ListToolsResponse = super::super::super::super::wasmcp::mcp::tool_types::ListToolsResponse;
                pub type CallToolRequest = super::super::super::super::wasmcp::mcp::tool_types::CallToolRequest;
                pub type ToolResult = super::super::super::super::wasmcp::mcp::tool_types::ToolResult;
                pub type AuthContext = super::super::super::super::wasmcp::mcp::authorization_types::AuthContext;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_list_tools_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result9 = T::handle_list_tools(super::super::super::super::wasmcp::mcp::tool_types::ListToolsRequest {
                        cursor: match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    let bytes0 = _rt::Vec::from_raw_parts(
                                        arg1.cast(),
                                        len0,
                                        len0,
                                    );
                                    _rt::string_lift(bytes0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        progress_token: match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg5;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg4.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        meta: match arg6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base8 = arg7;
                                    let len8 = arg8;
                                    let mut result8 = _rt::Vec::with_capacity(len8);
                                    for i in 0..len8 {
                                        let base = base8
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e8 = {
                                            let l2 = *base.add(0).cast::<*mut u8>();
                                            let l3 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len4 = l3;
                                            let bytes4 = _rt::Vec::from_raw_parts(
                                                l2.cast(),
                                                len4,
                                                len4,
                                            );
                                            let l5 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            (_rt::string_lift(bytes4), _rt::string_lift(bytes7))
                                        };
                                        result8.push(e8);
                                    }
                                    _rt::cabi_dealloc(
                                        base8,
                                        len8 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result8
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr10 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result9 {
                        Ok(e) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::wasmcp::mcp::tool_types::ListToolsResponse {
                                tools: tools11,
                                next_cursor: next_cursor11,
                                meta: meta11,
                            } = e;
                            let vec25 = tools11;
                            let len25 = vec25.len();
                            let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec25.len()
                                    * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result25 = if layout25.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout25);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec25.into_iter().enumerate() {
                                let base = result25
                                    .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::wasmcp::mcp::tool_types::Tool {
                                        base: base12,
                                        description: description12,
                                        input_schema: input_schema12,
                                        output_schema: output_schema12,
                                        annotations: annotations12,
                                        meta: meta12,
                                    } = e;
                                    let super::super::super::super::wasmcp::mcp::types::BaseMetadata {
                                        name: name13,
                                        title: title13,
                                    } = base12;
                                    let vec14 = (name13.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    match title13 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = (e.into_bytes()).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match description12 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = (e.into_bytes()).into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec17 = (input_schema12.into_bytes())
                                        .into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                    match output_schema12 {
                                        Some(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec18 = (e.into_bytes()).into_boxed_slice();
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();
                                            ::core::mem::forget(vec18);
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len18;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match annotations12 {
                                        Some(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::tool_types::ToolAnnotations {
                                                title: title19,
                                                read_only_hint: read_only_hint19,
                                                destructive_hint: destructive_hint19,
                                                idempotent_hint: idempotent_hint19,
                                                open_world_hint: open_world_hint19,
                                            } = e;
                                            match title19 {
                                                Some(e) => {
                                                    *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base
                                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len20;
                                                    *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match read_only_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match destructive_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match idempotent_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match open_world_hint19 {
                                                Some(e) => {
                                                    *base
                                                        .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                None => {
                                                    *base
                                                        .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match meta12 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec24 = e;
                                            let len24 = vec24.len();
                                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec24.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result24 = if layout24.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout24);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec24.into_iter().enumerate() {
                                                let base = result24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t21_0, t21_1) = e;
                                                    let vec22 = (t21_0.into_bytes()).into_boxed_slice();
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();
                                                    ::core::mem::forget(vec22);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len22;
                                                    *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                                    let vec23 = (t21_1.into_bytes()).into_boxed_slice();
                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                    let len23 = vec23.len();
                                                    ::core::mem::forget(vec23);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len23;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr23.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base
                                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result24;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr10
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len25;
                            *ptr10
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result25;
                            match next_cursor11 {
                                Some(e) => {
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec26 = (e.into_bytes()).into_boxed_slice();
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    ::core::mem::forget(vec26);
                                    *ptr10
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *ptr10
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                None => {
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta11 {
                                Some(e) => {
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec30 = e;
                                    let len30 = vec30.len();
                                    let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec30.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result30 = if layout30.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout30);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec30.into_iter().enumerate() {
                                        let base = result30
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t27_0, t27_1) = e;
                                            let vec28 = (t27_0.into_bytes()).into_boxed_slice();
                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                            let len28 = vec28.len();
                                            ::core::mem::forget(vec28);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len28;
                                            *base.add(0).cast::<*mut u8>() = ptr28.cast_mut();
                                            let vec29 = (t27_1.into_bytes()).into_boxed_slice();
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            ::core::mem::forget(vec29);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len29;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr29.cast_mut();
                                        }
                                    }
                                    *ptr10
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr10
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result30;
                                }
                                None => {
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::types::McpError {
                                code: code31,
                                message: message31,
                                data: data31,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::types::ErrorCode as V32;
                            match code31 {
                                V32::ParseError => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V32::InvalidRequest => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V32::MethodNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V32::InvalidParams => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V32::InternalError => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V32::ResourceNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V32::ToolNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V32::PromptNotFound => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V32::Unauthorized => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V32::RateLimited => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V32::Timeout => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V32::Cancelled => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V32::CustomCode(e) => {
                                    *ptr10
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr10
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec33 = (message31.into_bytes()).into_boxed_slice();
                            let ptr33 = vec33.as_ptr().cast::<u8>();
                            let len33 = vec33.len();
                            ::core::mem::forget(vec33);
                            *ptr10
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len33;
                            *ptr10
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr33.cast_mut();
                            match data31 {
                                Some(e) => {
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr10
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr10
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                None => {
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_list_tools<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base28 = l1;
                            let len28 = l2;
                            for i in 0..len28 {
                                let base = base28
                                    .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    let l8 = i32::from(
                                        *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l8 {
                                        0 => {}
                                        _ => {
                                            let l9 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l10 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                        }
                                    }
                                    let l11 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                    let l13 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l13 {
                                        0 => {}
                                        _ => {
                                            let l14 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l15 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                        }
                                    }
                                    let l16 = i32::from(
                                        *base
                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l16 {
                                        0 => {}
                                        _ => {
                                            let l17 = i32::from(
                                                *base
                                                    .add(14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l17 {
                                                0 => {}
                                                _ => {
                                                    let l18 = *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l18, l19, 1);
                                                }
                                            }
                                        }
                                    }
                                    let l20 = i32::from(
                                        *base
                                            .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l20 {
                                        0 => {}
                                        _ => {
                                            let l21 = *base
                                                .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l22 = *base
                                                .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base27 = l21;
                                            let len27 = l22;
                                            for i in 0..len27 {
                                                let base = base27
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l23 = *base.add(0).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                    let l25 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l25, l26, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base27,
                                                len27 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base28,
                                len28 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l29 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l29 {
                                0 => {}
                                _ => {
                                    let l30 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l31 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l30, l31, 1);
                                }
                            }
                            let l32 = i32::from(
                                *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l32 {
                                0 => {}
                                _ => {
                                    let l33 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l34 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base39 = l33;
                                    let len39 = l34;
                                    for i in 0..len39 {
                                        let base = base39
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l35 = *base.add(0).cast::<*mut u8>();
                                            let l36 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l35, l36, 1);
                                            let l37 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l38 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l37, l38, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base39,
                                        len39 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l40 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l41 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l40, l41, 1);
                            let l42 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l42 {
                                0 => {}
                                _ => {
                                    let l43 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l44 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_call_tool_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l7 = i32::from(
                        *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l11 = i32::from(
                        *arg0.add(8 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l21 = i32::from(
                        *arg0
                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result62 = T::handle_call_tool(
                        super::super::super::super::wasmcp::mcp::tool_types::CallToolRequest {
                            name: _rt::string_lift(bytes2),
                            arguments: match l3 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l4 = *arg0
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l5 = *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len6 = l5;
                                        let bytes6 = _rt::Vec::from_raw_parts(
                                            l4.cast(),
                                            len6,
                                            len6,
                                        );
                                        _rt::string_lift(bytes6)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            progress_token: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = *arg0
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l9 = *arg0
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        _rt::string_lift(bytes10)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            meta: match l11 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l12 = *arg0
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l13 = *arg0
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base20 = l12;
                                        let len20 = l13;
                                        let mut result20 = _rt::Vec::with_capacity(len20);
                                        for i in 0..len20 {
                                            let base = base20
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e20 = {
                                                let l14 = *base.add(0).cast::<*mut u8>();
                                                let l15 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                let l17 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                (_rt::string_lift(bytes16), _rt::string_lift(bytes19))
                                            };
                                            result20.push(e20);
                                        }
                                        _rt::cabi_dealloc(
                                            base20,
                                            len20 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result20
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        match l21 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l22 = i32::from(
                                        *arg0
                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l26 = *arg0
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l27 = *arg0
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len28 = l27;
                                    let bytes28 = _rt::Vec::from_raw_parts(
                                        l26.cast(),
                                        len28,
                                        len28,
                                    );
                                    let l29 = *arg0
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l30 = *arg0
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base34 = l29;
                                    let len34 = l30;
                                    let mut result34 = _rt::Vec::with_capacity(len34);
                                    for i in 0..len34 {
                                        let base = base34
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e34 = {
                                            let l31 = *base.add(0).cast::<*mut u8>();
                                            let l32 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len33 = l32;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                l31.cast(),
                                                len33,
                                                len33,
                                            );
                                            _rt::string_lift(bytes33)
                                        };
                                        result34.push(e34);
                                    }
                                    _rt::cabi_dealloc(
                                        base34,
                                        len34 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l35 = *arg0
                                        .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l36 = *arg0
                                        .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len37 = l36;
                                    let bytes37 = _rt::Vec::from_raw_parts(
                                        l35.cast(),
                                        len37,
                                        len37,
                                    );
                                    let l38 = *arg0
                                        .add(16 + 19 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l39 = *arg0
                                        .add(16 + 20 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base43 = l38;
                                    let len43 = l39;
                                    let mut result43 = _rt::Vec::with_capacity(len43);
                                    for i in 0..len43 {
                                        let base = base43
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e43 = {
                                            let l40 = *base.add(0).cast::<*mut u8>();
                                            let l41 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len42 = l41;
                                            let bytes42 = _rt::Vec::from_raw_parts(
                                                l40.cast(),
                                                len42,
                                                len42,
                                            );
                                            _rt::string_lift(bytes42)
                                        };
                                        result43.push(e43);
                                    }
                                    _rt::cabi_dealloc(
                                        base43,
                                        len43 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l44 = *arg0
                                        .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l45 = *arg0
                                        .add(16 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base52 = l44;
                                    let len52 = l45;
                                    let mut result52 = _rt::Vec::with_capacity(len52);
                                    for i in 0..len52 {
                                        let base = base52
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e52 = {
                                            let l46 = *base.add(0).cast::<*mut u8>();
                                            let l47 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len48 = l47;
                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                l46.cast(),
                                                len48,
                                                len48,
                                            );
                                            let l49 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l50 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len51 = l50;
                                            let bytes51 = _rt::Vec::from_raw_parts(
                                                l49.cast(),
                                                len51,
                                                len51,
                                            );
                                            (_rt::string_lift(bytes48), _rt::string_lift(bytes51))
                                        };
                                        result52.push(e52);
                                    }
                                    _rt::cabi_dealloc(
                                        base52,
                                        len52 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l53 = *arg0
                                        .add(24 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>();
                                    let l54 = i32::from(
                                        *arg0
                                            .add(32 + 22 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l56 = i32::from(
                                        *arg0
                                            .add(48 + 22 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l58 = i32::from(
                                        *arg0
                                            .add(64 + 22 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::super::wasmcp::mcp::authorization_types::AuthContext {
                                        client_id: match l22 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l23 = *arg0
                                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l24 = *arg0
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len25 = l24;
                                                    let bytes25 = _rt::Vec::from_raw_parts(
                                                        l23.cast(),
                                                        len25,
                                                        len25,
                                                    );
                                                    _rt::string_lift(bytes25)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        sub: _rt::string_lift(bytes28),
                                        scopes: result34,
                                        iss: _rt::string_lift(bytes37),
                                        aud: result43,
                                        claims: result52,
                                        exp: l53 as u64,
                                        iat: match l54 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l55 = *arg0
                                                        .add(40 + 22 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>();
                                                    l55 as u64
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        nbf: match l56 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l57 = *arg0
                                                        .add(56 + 22 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>();
                                                    l57 as u64
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        jwt: match l58 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l59 = *arg0
                                                        .add(64 + 23 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l60 = *arg0
                                                        .add(64 + 24 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len61 = l60;
                                                    let bytes61 = _rt::Vec::from_raw_parts(
                                                        l59.cast(),
                                                        len61,
                                                        len61,
                                                    );
                                                    _rt::string_lift(bytes61)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        72 + 24 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr63 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result62 {
                        Ok(e) => {
                            *ptr63.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::wasmcp::mcp::tool_types::ToolResult {
                                content: content64,
                                structured_content: structured_content64,
                                is_error: is_error64,
                                meta: meta64,
                            } = e;
                            let vec133 = content64;
                            let len133 = vec133.len();
                            let layout133 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec133.len()
                                    * (80 + 18 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result133 = if layout133.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout133).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout133);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec133.into_iter().enumerate() {
                                let base = result133
                                    .add(i * (80 + 18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    use super::super::super::super::wasmcp::mcp::types::ContentBlock as V132;
                                    match e {
                                        V132::Text(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::types::TextContent {
                                                text: text65,
                                                annotations: annotations65,
                                                meta: meta65,
                                            } = e;
                                            let vec66 = (text65.into_bytes()).into_boxed_slice();
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();
                                            ::core::mem::forget(vec66);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len66;
                                            *base.add(8).cast::<*mut u8>() = ptr66.cast_mut();
                                            match annotations65 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::types::Annotations {
                                                        audience: audience67,
                                                        priority: priority67,
                                                        last_modified: last_modified67,
                                                    } = e;
                                                    match audience67 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec68 = e;
                                                            let len68 = vec68.len();
                                                            let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec68.len() * 1,
                                                                1,
                                                            );
                                                            let result68 = if layout68.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout68);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec68.into_iter().enumerate() {
                                                                let base = result68.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len68;
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result68;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority67 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified67 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec69 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                                            let len69 = vec69.len();
                                                            ::core::mem::forget(vec69);
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len69;
                                                            *base
                                                                .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr69.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta65 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec73 = e;
                                                    let len73 = vec73.len();
                                                    let layout73 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec73.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result73 = if layout73.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout73).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout73);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec73.into_iter().enumerate() {
                                                        let base = result73
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t70_0, t70_1) = e;
                                                            let vec71 = (t70_0.into_bytes()).into_boxed_slice();
                                                            let ptr71 = vec71.as_ptr().cast::<u8>();
                                                            let len71 = vec71.len();
                                                            ::core::mem::forget(vec71);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len71;
                                                            *base.add(0).cast::<*mut u8>() = ptr71.cast_mut();
                                                            let vec72 = (t70_1.into_bytes()).into_boxed_slice();
                                                            let ptr72 = vec72.as_ptr().cast::<u8>();
                                                            let len72 = vec72.len();
                                                            ::core::mem::forget(vec72);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len72;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr72.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len73;
                                                    *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result73;
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V132::Image(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::types::ImageContent {
                                                data: data74,
                                                mime_type: mime_type74,
                                                annotations: annotations74,
                                                meta: meta74,
                                            } = e;
                                            let vec75 = (data74).into_boxed_slice();
                                            let ptr75 = vec75.as_ptr().cast::<u8>();
                                            let len75 = vec75.len();
                                            ::core::mem::forget(vec75);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len75;
                                            *base.add(8).cast::<*mut u8>() = ptr75.cast_mut();
                                            let vec76 = (mime_type74.into_bytes()).into_boxed_slice();
                                            let ptr76 = vec76.as_ptr().cast::<u8>();
                                            let len76 = vec76.len();
                                            ::core::mem::forget(vec76);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len76;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr76.cast_mut();
                                            match annotations74 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::types::Annotations {
                                                        audience: audience77,
                                                        priority: priority77,
                                                        last_modified: last_modified77,
                                                    } = e;
                                                    match audience77 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec78 = e;
                                                            let len78 = vec78.len();
                                                            let layout78 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec78.len() * 1,
                                                                1,
                                                            );
                                                            let result78 = if layout78.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout78).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout78);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec78.into_iter().enumerate() {
                                                                let base = result78.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len78;
                                                            *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result78;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority77 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified77 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec79 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr79 = vec79.as_ptr().cast::<u8>();
                                                            let len79 = vec79.len();
                                                            ::core::mem::forget(vec79);
                                                            *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len79;
                                                            *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr79.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta74 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec83 = e;
                                                    let len83 = vec83.len();
                                                    let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec83.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result83 = if layout83.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout83);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec83.into_iter().enumerate() {
                                                        let base = result83
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t80_0, t80_1) = e;
                                                            let vec81 = (t80_0.into_bytes()).into_boxed_slice();
                                                            let ptr81 = vec81.as_ptr().cast::<u8>();
                                                            let len81 = vec81.len();
                                                            ::core::mem::forget(vec81);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len81;
                                                            *base.add(0).cast::<*mut u8>() = ptr81.cast_mut();
                                                            let vec82 = (t80_1.into_bytes()).into_boxed_slice();
                                                            let ptr82 = vec82.as_ptr().cast::<u8>();
                                                            let len82 = vec82.len();
                                                            ::core::mem::forget(vec82);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len82;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr82.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len83;
                                                    *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result83;
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V132::Audio(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::types::AudioContent {
                                                data: data84,
                                                mime_type: mime_type84,
                                                annotations: annotations84,
                                                meta: meta84,
                                            } = e;
                                            let vec85 = (data84).into_boxed_slice();
                                            let ptr85 = vec85.as_ptr().cast::<u8>();
                                            let len85 = vec85.len();
                                            ::core::mem::forget(vec85);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len85;
                                            *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                            let vec86 = (mime_type84.into_bytes()).into_boxed_slice();
                                            let ptr86 = vec86.as_ptr().cast::<u8>();
                                            let len86 = vec86.len();
                                            ::core::mem::forget(vec86);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len86;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr86.cast_mut();
                                            match annotations84 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::types::Annotations {
                                                        audience: audience87,
                                                        priority: priority87,
                                                        last_modified: last_modified87,
                                                    } = e;
                                                    match audience87 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec88 = e;
                                                            let len88 = vec88.len();
                                                            let layout88 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec88.len() * 1,
                                                                1,
                                                            );
                                                            let result88 = if layout88.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout88).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout88);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec88.into_iter().enumerate() {
                                                                let base = result88.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len88;
                                                            *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result88;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority87 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified87 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec89 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr89 = vec89.as_ptr().cast::<u8>();
                                                            let len89 = vec89.len();
                                                            ::core::mem::forget(vec89);
                                                            *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len89;
                                                            *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr89.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta84 {
                                                Some(e) => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec93 = e;
                                                    let len93 = vec93.len();
                                                    let layout93 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec93.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result93 = if layout93.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout93).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout93);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec93.into_iter().enumerate() {
                                                        let base = result93
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t90_0, t90_1) = e;
                                                            let vec91 = (t90_0.into_bytes()).into_boxed_slice();
                                                            let ptr91 = vec91.as_ptr().cast::<u8>();
                                                            let len91 = vec91.len();
                                                            ::core::mem::forget(vec91);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len91;
                                                            *base.add(0).cast::<*mut u8>() = ptr91.cast_mut();
                                                            let vec92 = (t90_1.into_bytes()).into_boxed_slice();
                                                            let ptr92 = vec92.as_ptr().cast::<u8>();
                                                            let len92 = vec92.len();
                                                            ::core::mem::forget(vec92);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len92;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr92.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len93;
                                                    *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result93;
                                                }
                                                None => {
                                                    *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V132::ResourceLink(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::types::ResourceLink {
                                                uri: uri94,
                                                name: name94,
                                                title: title94,
                                                description: description94,
                                                mime_type: mime_type94,
                                                size: size94,
                                                annotations: annotations94,
                                                meta: meta94,
                                            } = e;
                                            let vec95 = (uri94.into_bytes()).into_boxed_slice();
                                            let ptr95 = vec95.as_ptr().cast::<u8>();
                                            let len95 = vec95.len();
                                            ::core::mem::forget(vec95);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len95;
                                            *base.add(8).cast::<*mut u8>() = ptr95.cast_mut();
                                            let vec96 = (name94.into_bytes()).into_boxed_slice();
                                            let ptr96 = vec96.as_ptr().cast::<u8>();
                                            let len96 = vec96.len();
                                            ::core::mem::forget(vec96);
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len96;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr96.cast_mut();
                                            match title94 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec97 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr97 = vec97.as_ptr().cast::<u8>();
                                                    let len97 = vec97.len();
                                                    ::core::mem::forget(vec97);
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len97;
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr97.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match description94 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec98 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr98 = vec98.as_ptr().cast::<u8>();
                                                    let len98 = vec98.len();
                                                    ::core::mem::forget(vec98);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len98;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr98.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match mime_type94 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec99 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr99 = vec99.as_ptr().cast::<u8>();
                                                    let len99 = vec99.len();
                                                    ::core::mem::forget(vec99);
                                                    *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len99;
                                                    *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr99.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match size94 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match annotations94 {
                                                Some(e) => {
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::types::Annotations {
                                                        audience: audience100,
                                                        priority: priority100,
                                                        last_modified: last_modified100,
                                                    } = e;
                                                    match audience100 {
                                                        Some(e) => {
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec101 = e;
                                                            let len101 = vec101.len();
                                                            let layout101 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec101.len() * 1,
                                                                1,
                                                            );
                                                            let result101 = if layout101.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout101).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout101);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec101.into_iter().enumerate() {
                                                                let base = result101.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len101;
                                                            *base
                                                                .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result101;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority100 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified100 {
                                                        Some(e) => {
                                                            *base
                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec102 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr102 = vec102.as_ptr().cast::<u8>();
                                                            let len102 = vec102.len();
                                                            ::core::mem::forget(vec102);
                                                            *base
                                                                .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len102;
                                                            *base
                                                                .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr102.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta94 {
                                                Some(e) => {
                                                    *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec106 = e;
                                                    let len106 = vec106.len();
                                                    let layout106 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec106.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result106 = if layout106.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout106).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout106);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec106.into_iter().enumerate() {
                                                        let base = result106
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t103_0, t103_1) = e;
                                                            let vec104 = (t103_0.into_bytes()).into_boxed_slice();
                                                            let ptr104 = vec104.as_ptr().cast::<u8>();
                                                            let len104 = vec104.len();
                                                            ::core::mem::forget(vec104);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len104;
                                                            *base.add(0).cast::<*mut u8>() = ptr104.cast_mut();
                                                            let vec105 = (t103_1.into_bytes()).into_boxed_slice();
                                                            let ptr105 = vec105.as_ptr().cast::<u8>();
                                                            let len105 = vec105.len();
                                                            ::core::mem::forget(vec105);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len105;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr105.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(72 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len106;
                                                    *base
                                                        .add(72 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result106;
                                                }
                                                None => {
                                                    *base
                                                        .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V132::EmbeddedResource(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let super::super::super::super::wasmcp::mcp::types::EmbeddedResource {
                                                contents: contents107,
                                                annotations: annotations107,
                                                meta: meta107,
                                            } = e;
                                            use super::super::super::super::wasmcp::mcp::types::ResourceContents as V124;
                                            match contents107 {
                                                V124::Text(e) => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::types::TextResourceContents {
                                                        uri: uri108,
                                                        mime_type: mime_type108,
                                                        text: text108,
                                                        meta: meta108,
                                                    } = e;
                                                    let vec109 = (uri108.into_bytes()).into_boxed_slice();
                                                    let ptr109 = vec109.as_ptr().cast::<u8>();
                                                    let len109 = vec109.len();
                                                    ::core::mem::forget(vec109);
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len109;
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr109.cast_mut();
                                                    match mime_type108 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec110 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr110 = vec110.as_ptr().cast::<u8>();
                                                            let len110 = vec110.len();
                                                            ::core::mem::forget(vec110);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len110;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr110.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec111 = (text108.into_bytes()).into_boxed_slice();
                                                    let ptr111 = vec111.as_ptr().cast::<u8>();
                                                    let len111 = vec111.len();
                                                    ::core::mem::forget(vec111);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len111;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr111.cast_mut();
                                                    match meta108 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec115 = e;
                                                            let len115 = vec115.len();
                                                            let layout115 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec115.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result115 = if layout115.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout115).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout115);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec115.into_iter().enumerate() {
                                                                let base = result115
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t112_0, t112_1) = e;
                                                                    let vec113 = (t112_0.into_bytes()).into_boxed_slice();
                                                                    let ptr113 = vec113.as_ptr().cast::<u8>();
                                                                    let len113 = vec113.len();
                                                                    ::core::mem::forget(vec113);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len113;
                                                                    *base.add(0).cast::<*mut u8>() = ptr113.cast_mut();
                                                                    let vec114 = (t112_1.into_bytes()).into_boxed_slice();
                                                                    let ptr114 = vec114.as_ptr().cast::<u8>();
                                                                    let len114 = vec114.len();
                                                                    ::core::mem::forget(vec114);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len114;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr114.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len115;
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result115;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V124::Blob(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::types::BlobResourceContents {
                                                        uri: uri116,
                                                        mime_type: mime_type116,
                                                        blob: blob116,
                                                        meta: meta116,
                                                    } = e;
                                                    let vec117 = (uri116.into_bytes()).into_boxed_slice();
                                                    let ptr117 = vec117.as_ptr().cast::<u8>();
                                                    let len117 = vec117.len();
                                                    ::core::mem::forget(vec117);
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len117;
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr117.cast_mut();
                                                    match mime_type116 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec118 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr118 = vec118.as_ptr().cast::<u8>();
                                                            let len118 = vec118.len();
                                                            ::core::mem::forget(vec118);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len118;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr118.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    let vec119 = (blob116).into_boxed_slice();
                                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                                    let len119 = vec119.len();
                                                    ::core::mem::forget(vec119);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len119;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr119.cast_mut();
                                                    match meta116 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec123 = e;
                                                            let len123 = vec123.len();
                                                            let layout123 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec123.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result123 = if layout123.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout123).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout123);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec123.into_iter().enumerate() {
                                                                let base = result123
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t120_0, t120_1) = e;
                                                                    let vec121 = (t120_0.into_bytes()).into_boxed_slice();
                                                                    let ptr121 = vec121.as_ptr().cast::<u8>();
                                                                    let len121 = vec121.len();
                                                                    ::core::mem::forget(vec121);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len121;
                                                                    *base.add(0).cast::<*mut u8>() = ptr121.cast_mut();
                                                                    let vec122 = (t120_1.into_bytes()).into_boxed_slice();
                                                                    let ptr122 = vec122.as_ptr().cast::<u8>();
                                                                    let len122 = vec122.len();
                                                                    ::core::mem::forget(vec122);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len122;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr122.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len123;
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result123;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            match annotations107 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::wasmcp::mcp::types::Annotations {
                                                        audience: audience125,
                                                        priority: priority125,
                                                        last_modified: last_modified125,
                                                    } = e;
                                                    match audience125 {
                                                        Some(e) => {
                                                            *base
                                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec126 = e;
                                                            let len126 = vec126.len();
                                                            let layout126 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec126.len() * 1,
                                                                1,
                                                            );
                                                            let result126 = if layout126.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout126).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout126);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec126.into_iter().enumerate() {
                                                                let base = result126.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                                                                }
                                                            }
                                                            *base
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len126;
                                                            *base
                                                                .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result126;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match priority125 {
                                                        Some(e) => {
                                                            *base
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match last_modified125 {
                                                        Some(e) => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec127 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr127 = vec127.as_ptr().cast::<u8>();
                                                            let len127 = vec127.len();
                                                            ::core::mem::forget(vec127);
                                                            *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len127;
                                                            *base
                                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr127.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match meta107 {
                                                Some(e) => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec131 = e;
                                                    let len131 = vec131.len();
                                                    let layout131 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec131.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result131 = if layout131.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout131).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout131);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec131.into_iter().enumerate() {
                                                        let base = result131
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t128_0, t128_1) = e;
                                                            let vec129 = (t128_0.into_bytes()).into_boxed_slice();
                                                            let ptr129 = vec129.as_ptr().cast::<u8>();
                                                            let len129 = vec129.len();
                                                            ::core::mem::forget(vec129);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len129;
                                                            *base.add(0).cast::<*mut u8>() = ptr129.cast_mut();
                                                            let vec130 = (t128_1.into_bytes()).into_boxed_slice();
                                                            let ptr130 = vec130.as_ptr().cast::<u8>();
                                                            let len130 = vec130.len();
                                                            ::core::mem::forget(vec130);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len130;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr130.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len131;
                                                    *base
                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result131;
                                                }
                                                None => {
                                                    *base
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr63
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len133;
                            *ptr63
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result133;
                            match structured_content64 {
                                Some(e) => {
                                    *ptr63
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec134 = (e.into_bytes()).into_boxed_slice();
                                    let ptr134 = vec134.as_ptr().cast::<u8>();
                                    let len134 = vec134.len();
                                    ::core::mem::forget(vec134);
                                    *ptr63
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len134;
                                    *ptr63
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr134.cast_mut();
                                }
                                None => {
                                    *ptr63
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match is_error64 {
                                Some(e) => {
                                    *ptr63
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr63
                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr63
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match meta64 {
                                Some(e) => {
                                    *ptr63
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec138 = e;
                                    let len138 = vec138.len();
                                    let layout138 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec138.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result138 = if layout138.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout138).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout138);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec138.into_iter().enumerate() {
                                        let base = result138
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t135_0, t135_1) = e;
                                            let vec136 = (t135_0.into_bytes()).into_boxed_slice();
                                            let ptr136 = vec136.as_ptr().cast::<u8>();
                                            let len136 = vec136.len();
                                            ::core::mem::forget(vec136);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len136;
                                            *base.add(0).cast::<*mut u8>() = ptr136.cast_mut();
                                            let vec137 = (t135_1.into_bytes()).into_boxed_slice();
                                            let ptr137 = vec137.as_ptr().cast::<u8>();
                                            let len137 = vec137.len();
                                            ::core::mem::forget(vec137);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len137;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr137.cast_mut();
                                        }
                                    }
                                    *ptr63
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len138;
                                    *ptr63
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result138;
                                }
                                None => {
                                    *ptr63
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr63.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::types::McpError {
                                code: code139,
                                message: message139,
                                data: data139,
                            } = e;
                            use super::super::super::super::wasmcp::mcp::types::ErrorCode as V140;
                            match code139 {
                                V140::ParseError => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V140::InvalidRequest => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                V140::MethodNotFound => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                V140::InvalidParams => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                }
                                V140::InternalError => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                V140::ResourceNotFound => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                }
                                V140::ToolNotFound => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                }
                                V140::PromptNotFound => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                }
                                V140::Unauthorized => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                V140::RateLimited => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                V140::Timeout => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                V140::Cancelled => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                V140::CustomCode(e) => {
                                    *ptr63
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                    *ptr63
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                            }
                            let vec141 = (message139.into_bytes()).into_boxed_slice();
                            let ptr141 = vec141.as_ptr().cast::<u8>();
                            let len141 = vec141.len();
                            ::core::mem::forget(vec141);
                            *ptr63
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len141;
                            *ptr63
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr141.cast_mut();
                            match data139 {
                                Some(e) => {
                                    *ptr63
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec142 = (e.into_bytes()).into_boxed_slice();
                                    let ptr142 = vec142.as_ptr().cast::<u8>();
                                    let len142 = vec142.len();
                                    ::core::mem::forget(vec142);
                                    *ptr63
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len142;
                                    *ptr63
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr142.cast_mut();
                                }
                                None => {
                                    *ptr63
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr63
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_call_tool<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base141 = l1;
                            let len141 = l2;
                            for i in 0..len141 {
                                let base = base141
                                    .add(i * (80 + 18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = *base.add(8).cast::<*mut u8>();
                                            let l5 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {}
                                                _ => {
                                                    let l7 = i32::from(
                                                        *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l7 {
                                                        0 => {}
                                                        _ => {
                                                            let l8 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l9 = *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base10 = l8;
                                                            let len10 = l9;
                                                            _rt::cabi_dealloc(base10, len10 * 1, 1);
                                                        }
                                                    }
                                                    let l11 = i32::from(
                                                        *base
                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l11 {
                                                        0 => {}
                                                        _ => {
                                                            let l12 = *base
                                                                .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l13 = *base
                                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l12, l13, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l14 = i32::from(
                                                *base
                                                    .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l14 {
                                                0 => {}
                                                _ => {
                                                    let l15 = *base
                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l16 = *base
                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l15;
                                                    let len21 = l16;
                                                    for i in 0..len21 {
                                                        let base = base21
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l17 = *base.add(0).cast::<*mut u8>();
                                                            let l18 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                            let l19 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base21,
                                                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        1 => {
                                            let l22 = *base.add(8).cast::<*mut u8>();
                                            let l23 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l22;
                                            let len24 = l23;
                                            _rt::cabi_dealloc(base24, len24 * 1, 1);
                                            let l25 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l26 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l25, l26, 1);
                                            let l27 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l27 {
                                                0 => {}
                                                _ => {
                                                    let l28 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l28 {
                                                        0 => {}
                                                        _ => {
                                                            let l29 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l30 = *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base31 = l29;
                                                            let len31 = l30;
                                                            _rt::cabi_dealloc(base31, len31 * 1, 1);
                                                        }
                                                    }
                                                    let l32 = i32::from(
                                                        *base
                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l32 {
                                                        0 => {}
                                                        _ => {
                                                            let l33 = *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l34 = *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l33, l34, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l35 = i32::from(
                                                *base
                                                    .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l35 {
                                                0 => {}
                                                _ => {
                                                    let l36 = *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base42 = l36;
                                                    let len42 = l37;
                                                    for i in 0..len42 {
                                                        let base = base42
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l38 = *base.add(0).cast::<*mut u8>();
                                                            let l39 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l38, l39, 1);
                                                            let l40 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l41 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l40, l41, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base42,
                                                        len42 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        2 => {
                                            let l43 = *base.add(8).cast::<*mut u8>();
                                            let l44 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base45 = l43;
                                            let len45 = l44;
                                            _rt::cabi_dealloc(base45, len45 * 1, 1);
                                            let l46 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l47 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l46, l47, 1);
                                            let l48 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l48 {
                                                0 => {}
                                                _ => {
                                                    let l49 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l49 {
                                                        0 => {}
                                                        _ => {
                                                            let l50 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l51 = *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base52 = l50;
                                                            let len52 = l51;
                                                            _rt::cabi_dealloc(base52, len52 * 1, 1);
                                                        }
                                                    }
                                                    let l53 = i32::from(
                                                        *base
                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l53 {
                                                        0 => {}
                                                        _ => {
                                                            let l54 = *base
                                                                .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l55 = *base
                                                                .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l54, l55, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l56 = i32::from(
                                                *base
                                                    .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l56 {
                                                0 => {}
                                                _ => {
                                                    let l57 = *base
                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l58 = *base
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base63 = l57;
                                                    let len63 = l58;
                                                    for i in 0..len63 {
                                                        let base = base63
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l59 = *base.add(0).cast::<*mut u8>();
                                                            let l60 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l59, l60, 1);
                                                            let l61 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l62 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l61, l62, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base63,
                                                        len63 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        3 => {
                                            let l64 = *base.add(8).cast::<*mut u8>();
                                            let l65 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l64, l65, 1);
                                            let l66 = *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l67 = *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l66, l67, 1);
                                            let l68 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l68 {
                                                0 => {}
                                                _ => {
                                                    let l69 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l70 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l69, l70, 1);
                                                }
                                            }
                                            let l71 = i32::from(
                                                *base
                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l71 {
                                                0 => {}
                                                _ => {
                                                    let l72 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l73 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l72, l73, 1);
                                                }
                                            }
                                            let l74 = i32::from(
                                                *base
                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l74 {
                                                0 => {}
                                                _ => {
                                                    let l75 = *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l76 = *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l75, l76, 1);
                                                }
                                            }
                                            let l77 = i32::from(
                                                *base
                                                    .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l77 {
                                                0 => {}
                                                _ => {
                                                    let l78 = i32::from(
                                                        *base
                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l78 {
                                                        0 => {}
                                                        _ => {
                                                            let l79 = *base
                                                                .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l80 = *base
                                                                .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base81 = l79;
                                                            let len81 = l80;
                                                            _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                        }
                                                    }
                                                    let l82 = i32::from(
                                                        *base
                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l82 {
                                                        0 => {}
                                                        _ => {
                                                            let l83 = *base
                                                                .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l84 = *base
                                                                .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l83, l84, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l85 = i32::from(
                                                *base
                                                    .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l85 {
                                                0 => {}
                                                _ => {
                                                    let l86 = *base
                                                        .add(72 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l87 = *base
                                                        .add(72 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base92 = l86;
                                                    let len92 = l87;
                                                    for i in 0..len92 {
                                                        let base = base92
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l88 = *base.add(0).cast::<*mut u8>();
                                                            let l89 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l88, l89, 1);
                                                            let l90 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l91 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l90, l91, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base92,
                                                        len92 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        _ => {
                                            let l93 = i32::from(*base.add(8).cast::<u8>());
                                            match l93 {
                                                0 => {
                                                    let l94 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l95 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l94, l95, 1);
                                                    let l96 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l96 {
                                                        0 => {}
                                                        _ => {
                                                            let l97 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l98 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l97, l98, 1);
                                                        }
                                                    }
                                                    let l99 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l100 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l99, l100, 1);
                                                    let l101 = i32::from(
                                                        *base
                                                            .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l101 {
                                                        0 => {}
                                                        _ => {
                                                            let l102 = *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l103 = *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base108 = l102;
                                                            let len108 = l103;
                                                            for i in 0..len108 {
                                                                let base = base108
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l104 = *base.add(0).cast::<*mut u8>();
                                                                    let l105 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l104, l105, 1);
                                                                    let l106 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l107 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l106, l107, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base108,
                                                                len108 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l109 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l110 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l109, l110, 1);
                                                    let l111 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l111 {
                                                        0 => {}
                                                        _ => {
                                                            let l112 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l113 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l112, l113, 1);
                                                        }
                                                    }
                                                    let l114 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l115 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base116 = l114;
                                                    let len116 = l115;
                                                    _rt::cabi_dealloc(base116, len116 * 1, 1);
                                                    let l117 = i32::from(
                                                        *base
                                                            .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l117 {
                                                        0 => {}
                                                        _ => {
                                                            let l118 = *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l119 = *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base124 = l118;
                                                            let len124 = l119;
                                                            for i in 0..len124 {
                                                                let base = base124
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l120 = *base.add(0).cast::<*mut u8>();
                                                                    let l121 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l120, l121, 1);
                                                                    let l122 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l123 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l122, l123, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base124,
                                                                len124 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                            let l125 = i32::from(
                                                *base
                                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l125 {
                                                0 => {}
                                                _ => {
                                                    let l126 = i32::from(
                                                        *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l126 {
                                                        0 => {}
                                                        _ => {
                                                            let l127 = *base
                                                                .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l128 = *base
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base129 = l127;
                                                            let len129 = l128;
                                                            _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                        }
                                                    }
                                                    let l130 = i32::from(
                                                        *base
                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l130 {
                                                        0 => {}
                                                        _ => {
                                                            let l131 = *base
                                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l132 = *base
                                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l131, l132, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            let l133 = i32::from(
                                                *base
                                                    .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l133 {
                                                0 => {}
                                                _ => {
                                                    let l134 = *base
                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l135 = *base
                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base140 = l134;
                                                    let len140 = l135;
                                                    for i in 0..len140 {
                                                        let base = base140
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l136 = *base.add(0).cast::<*mut u8>();
                                                            let l137 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l136, l137, 1);
                                                            let l138 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l139 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l138, l139, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base140,
                                                        len140 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base141,
                                len141 * (80 + 18 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let l142 = i32::from(
                                *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l142 {
                                0 => {}
                                _ => {
                                    let l143 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l144 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l143, l144, 1);
                                }
                            }
                            let l145 = i32::from(
                                *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l145 {
                                0 => {}
                                _ => {
                                    let l146 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l147 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base152 = l146;
                                    let len152 = l147;
                                    for i in 0..len152 {
                                        let base = base152
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l148 = *base.add(0).cast::<*mut u8>();
                                            let l149 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l148, l149, 1);
                                            let l150 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l151 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l150, l151, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base152,
                                        len152 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l153 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l154 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l153, l154, 1);
                            let l155 = i32::from(
                                *arg0
                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l155 {
                                0 => {}
                                _ => {
                                    let l156 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l157 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l156, l157, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// List available tools
                    fn handle_list_tools(
                        request: ListToolsRequest,
                    ) -> Result<ListToolsResponse, McpError>;
                    /// Execute a tool
                    fn handle_call_tool(
                        request: CallToolRequest,
                        auth_context: Option<AuthContext>,
                    ) -> Result<ToolResult, McpError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_tools_capabilities_0_2_0_alpha_6_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/tools-capabilities@0.2.0-alpha.6#handle-list-tools")]
                        unsafe extern "C" fn export_handle_list_tools(arg0 : i32, arg1 :
                        * mut u8, arg2 : usize, arg3 : i32, arg4 : * mut u8, arg5 :
                        usize, arg6 : i32, arg7 : * mut u8, arg8 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_handle_list_tools_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8) } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/tools-capabilities@0.2.0-alpha.6#handle-list-tools")]
                        unsafe extern "C" fn _post_return_handle_list_tools(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_list_tools::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/tools-capabilities@0.2.0-alpha.6#handle-call-tool")]
                        unsafe extern "C" fn export_handle_call_tool(arg0 : * mut u8,) ->
                        * mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_call_tool_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_wasmcp:mcp/tools-capabilities@0.2.0-alpha.6#handle-call-tool")]
                        unsafe extern "C" fn _post_return_handle_call_tool(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_call_tool::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_tools_capabilities_0_2_0_alpha_6_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 10 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 10
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_tools_provider_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::mcp::core_capabilities::__export_wasmcp_mcp_core_capabilities_0_2_0_alpha_6_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::core_capabilities);
        $($path_to_types_root)*::
        exports::wasmcp::mcp::tools_capabilities::__export_wasmcp_mcp_tools_capabilities_0_2_0_alpha_6_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::wasmcp::mcp::tools_capabilities);
    };
}
#[doc(inline)]
pub(crate) use __export_tools_provider_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:mcp@0.2.0-alpha.6:tools-provider:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4152] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb3\x1f\x01A\x02\x01\
A\x1c\x01B;\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajs\
on-value\x03\0\x02\x01o\x02ss\x01p\x04\x04\0\x0bmeta-fields\x03\0\x05\x01p\x01\x01\
k\x07\x01ku\x01ks\x01r\x03\x08audience\x08\x08priority\x09\x0dlast-modified\x0a\x04\
\0\x0bannotations\x03\0\x0b\x01r\x02\x04names\x05title\x0a\x04\0\x0dbase-metadat\
a\x03\0\x0d\x01k\x0c\x01k\x06\x01r\x03\x04texts\x0bannotations\x0f\x04meta\x10\x04\
\0\x0ctext-content\x03\0\x11\x01p}\x01r\x04\x04data\x13\x09mime-types\x0bannotat\
ions\x0f\x04meta\x10\x04\0\x0dimage-content\x03\0\x14\x01r\x04\x04data\x13\x09mi\
me-types\x0bannotations\x0f\x04meta\x10\x04\0\x0daudio-content\x03\0\x16\x01kw\x01\
r\x08\x03uris\x04names\x05title\x0a\x0bdescription\x0a\x09mime-type\x0a\x04size\x18\
\x0bannotations\x0f\x04meta\x10\x04\0\x0dresource-link\x03\0\x19\x01r\x04\x03uri\
s\x09mime-type\x0a\x04texts\x04meta\x10\x04\0\x16text-resource-contents\x03\0\x1b\
\x01r\x04\x03uris\x09mime-type\x0a\x04blob\x13\x04meta\x10\x04\0\x16blob-resourc\
e-contents\x03\0\x1d\x01q\x02\x04text\x01\x1c\0\x04blob\x01\x1e\0\x04\0\x11resou\
rce-contents\x03\0\x1f\x01r\x03\x08contents\x20\x0bannotations\x0f\x04meta\x10\x04\
\0\x11embedded-resource\x03\0!\x01q\x05\x04text\x01\x12\0\x05image\x01\x15\0\x05\
audio\x01\x17\0\x0dresource-link\x01\x1a\0\x11embedded-resource\x01\"\0\x04\0\x0d\
content-block\x03\0#\x01s\x04\0\x0bjson-schema\x03\0%\x01q\x0d\x0bparse-error\0\0\
\x0finvalid-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einterna\
l-error\0\0\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\
\0\x0cunauthorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcu\
stom-code\x01z\0\x04\0\x0aerror-code\x03\0'\x01r\x03\x04code(\x07messages\x04dat\
a\x0a\x04\0\x09mcp-error\x03\0)\x01s\x04\0\x06cursor\x03\0+\x01s\x04\0\x0eprogre\
ss-token\x03\0-\x01q\x02\x03str\x01s\0\x03num\x01x\0\x04\0\x0arequest-id\x03\0/\x01\
m\x03\x04user\x09assistant\x06system\x04\0\x0cmessage-role\x03\01\x01r\x01\x04na\
me\x0a\x04\0\x0amodel-hint\x03\03\x01p4\x01k5\x01r\x04\x05hints6\x0dcost-priorit\
y\x09\x0espeed-priority\x09\x15intelligence-priority\x09\x04\0\x11model-preferen\
ces\x03\07\x01r\x04\x0curi-templates\x04names\x0bdescription\x0a\x09mime-type\x0a\
\x04\0\x11resource-template\x03\09\x03\0\x1ewasmcp:mcp/types@0.2.0-alpha.6\x05\0\
\x02\x03\0\0\x0bmeta-fields\x01B\x1d\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\x03\
\0\0\x01m\x02\x09v20250326\x09v20250618\x04\0\x10protocol-version\x03\0\x02\x01k\
s\x01r\x03\x04names\x07versions\x05title\x04\x04\0\x13implementation-info\x03\0\x05\
\x01k\x7f\x01r\x01\x0clist-changed\x07\x04\0\x10roots-capability\x03\0\x08\x01r\x01\
\x0clist-changed\x07\x04\0\x12prompts-capability\x03\0\x0a\x01r\x02\x09subscribe\
\x07\x0clist-changed\x07\x04\0\x14resources-capability\x03\0\x0c\x01r\x01\x0clis\
t-changed\x07\x04\0\x10tools-capability\x03\0\x0e\x01k\x01\x01k\x09\x01r\x04\x0c\
experimental\x10\x05roots\x11\x08sampling\x07\x0belicitation\x07\x04\0\x13client\
-capabilities\x03\0\x12\x01k\x0b\x01k\x0d\x01k\x0f\x01r\x06\x0cexperimental\x10\x07\
logging\x07\x0bcompletions\x07\x07prompts\x14\x09resources\x15\x05tools\x16\x04\0\
\x13server-capabilities\x03\0\x17\x01r\x04\x10protocol-version\x03\x0ccapabiliti\
es\x13\x0bclient-info\x06\x04meta\x10\x04\0\x12initialize-request\x03\0\x19\x01r\
\x05\x10protocol-version\x03\x0ccapabilities\x18\x0bserver-info\x06\x0cinstructi\
ons\x04\x04meta\x10\x04\0\x13initialize-response\x03\0\x1b\x03\0#wasmcp:mcp/core\
-types@0.2.0-alpha.6\x05\x02\x01B\x09\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\x03\
\0\0\x01ps\x01ks\x01r\x07\x0fexpected-issuers\x12expected-audiences\x02\x10expec\
ted-subject\x03\x08jwks-uris\x06policy\x03\x0bpolicy-data\x03\x08pass-jwt\x7f\x04\
\0\x14provider-auth-config\x03\0\x04\x01kw\x01r\x0a\x09client-id\x03\x03subs\x06\
scopes\x02\x03isss\x03aud\x02\x06claims\x01\x03expw\x03iat\x06\x03nbf\x06\x03jwt\
\x03\x04\0\x0cauth-context\x03\0\x07\x03\0,wasmcp:mcp/authorization-types@0.2.0-\
alpha.6\x05\x03\x02\x03\0\0\x0dcontent-block\x02\x03\0\0\x0ajson-value\x02\x03\0\
\0\x0bjson-schema\x02\x03\0\0\x0dbase-metadata\x02\x03\0\0\x06cursor\x02\x03\0\0\
\x0eprogress-token\x01B$\x02\x03\x02\x01\x04\x04\0\x0dcontent-block\x03\0\0\x02\x03\
\x02\x01\x05\x04\0\x0ajson-value\x03\0\x02\x02\x03\x02\x01\x06\x04\0\x0bjson-sch\
ema\x03\0\x04\x02\x03\x02\x01\x07\x04\0\x0dbase-metadata\x03\0\x06\x02\x03\x02\x01\
\x01\x04\0\x0bmeta-fields\x03\0\x08\x02\x03\x02\x01\x08\x04\0\x06cursor\x03\0\x0a\
\x02\x03\x02\x01\x09\x04\0\x0eprogress-token\x03\0\x0c\x01ks\x01k\x7f\x01r\x05\x05\
title\x0e\x0eread-only-hint\x0f\x10destructive-hint\x0f\x0fidempotent-hint\x0f\x0f\
open-world-hint\x0f\x04\0\x10tool-annotations\x03\0\x10\x01k\x05\x01k\x11\x01k\x09\
\x01r\x06\x04base\x07\x0bdescription\x0e\x0cinput-schema\x05\x0doutput-schema\x12\
\x0bannotations\x13\x04meta\x14\x04\0\x04tool\x03\0\x15\x01p\x01\x01k\x03\x01r\x04\
\x07content\x17\x12structured-content\x18\x08is-error\x0f\x04meta\x14\x04\0\x0bt\
ool-result\x03\0\x19\x01k\x0b\x01k\x0d\x01r\x03\x06cursor\x1b\x0eprogress-token\x1c\
\x04meta\x14\x04\0\x12list-tools-request\x03\0\x1d\x01p\x16\x01r\x03\x05tools\x1f\
\x0bnext-cursor\x1b\x04meta\x14\x04\0\x13list-tools-response\x03\0\x20\x01r\x04\x04\
names\x09arguments\x18\x0eprogress-token\x1c\x04meta\x14\x04\0\x11call-tool-requ\
est\x03\0\"\x03\0#wasmcp:mcp/tool-types@0.2.0-alpha.6\x05\x0a\x02\x03\0\0\x09mcp\
-error\x02\x03\0\x01\x12initialize-request\x02\x03\0\x01\x13initialize-response\x02\
\x03\0\x02\x14provider-auth-config\x01B\x18\x02\x03\x02\x01\x0b\x04\0\x09mcp-err\
or\x03\0\0\x02\x03\x02\x01\x0c\x04\0\x12initialize-request\x03\0\x02\x02\x03\x02\
\x01\x0d\x04\0\x13initialize-response\x03\0\x04\x02\x03\x02\x01\x0e\x04\0\x14pro\
vider-auth-config\x03\0\x06\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x08\x04\
\0\x11handle-initialize\x01\x09\x01j\0\x01\x01\x01@\0\0\x0a\x04\0\x12handle-init\
ialized\x01\x0b\x04\0\x0bhandle-ping\x01\x0b\x04\0\x0fhandle-shutdown\x01\x0b\x01\
k\x07\x01@\0\0\x0c\x04\0\x0fget-auth-config\x01\x0d\x01ks\x01@\x01\x08jwks-uris\0\
\x0e\x04\0\x0ejwks-cache-get\x01\x0f\x01@\x02\x08jwks-uris\x04jwkss\x01\0\x04\0\x0e\
jwks-cache-set\x01\x10\x04\0*wasmcp:mcp/core-capabilities@0.2.0-alpha.6\x05\x0f\x02\
\x03\0\x03\x12list-tools-request\x02\x03\0\x03\x13list-tools-response\x02\x03\0\x03\
\x11call-tool-request\x02\x03\0\x03\x0btool-result\x02\x03\0\x02\x0cauth-context\
\x01B\x13\x02\x03\x02\x01\x0b\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x10\x04\
\0\x12list-tools-request\x03\0\x02\x02\x03\x02\x01\x11\x04\0\x13list-tools-respo\
nse\x03\0\x04\x02\x03\x02\x01\x12\x04\0\x11call-tool-request\x03\0\x06\x02\x03\x02\
\x01\x13\x04\0\x0btool-result\x03\0\x08\x02\x03\x02\x01\x14\x04\0\x0cauth-contex\
t\x03\0\x0a\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x0c\x04\0\x11handle-l\
ist-tools\x01\x0d\x01k\x0b\x01j\x01\x09\x01\x01\x01@\x02\x07request\x07\x0cauth-\
context\x0e\0\x0f\x04\0\x10handle-call-tool\x01\x10\x04\0+wasmcp:mcp/tools-capab\
ilities@0.2.0-alpha.6\x05\x15\x04\0'wasmcp:mcp/tools-provider@0.2.0-alpha.6\x04\0\
\x0b\x14\x01\0\x0etools-provider\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
