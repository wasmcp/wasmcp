/// Tools enable models to interact with external systems, such as querying databases, calling APIs, or performing computations.
/// Each tool is uniquely identified by a name and includes metadata describing its schema.
/// https://modelcontextprotocol.io/specification/2025-06-18/server/tools


/// Serves the TOOLS capability over the Streamable HTTP transport
world tools-transport {
    import lifecycle;
    import tools;
}

/// Serves the TOOLS capability over the Streamable HTTP transport with authorization
world authorized-tools-transport {
    include tools-transport;
    import authorization;
}

/// Implements the TOOLS capability
world tools-provider {
    export lifecycle;
    export tools;
}

/// Implements the TOOLS capability with authorization.
world authorized-tools-provider {
    include tools-provider;
    export authorization;
}

/// The TOOLS capability
/// https://modelcontextprotocol.io/specification/2025-06-18/server/tools
interface tools {
    use mcp-types.{mcp-error};
    use tools-types.{list-tools-request, list-tools-result, call-tool-request, call-tool-result};
    use authorization-types.{auth-context};
    
    /// List available tools
    list-tools: func(request: list-tools-request) -> result<list-tools-result, mcp-error>;
    
    /// Execute a tool
    call-tool: func(request: call-tool-request, auth-context: option<auth-context>) -> result<call-tool-result, mcp-error>;
}

/// Type definitions for tools
interface tools-types {
    use mcp-types.{content-block, json-value, json-schema, base-metadata, meta-fields, cursor, progress-token};

    /// Behavioral hints about tool operations
    record tool-annotations {
        /// Human-readable title for display
        title: option<string>,
        /// Tool does not modify environment
        read-only-hint: option<bool>,
        /// Tool may perform destructive updates (meaningful when not read-only)
        destructive-hint: option<bool>,
        /// Repeated calls with same args have no additional effect
        idempotent-hint: option<bool>,
        /// Tool interacts with external entities
        open-world-hint: option<bool>,
    }

    /// Tool definition with metadata and schema
    record tool {
        /// Base metadata (name and optional title)
        base: base-metadata,
        /// Human-readable description of what the tool does
        description: option<string>,
        /// JSON Schema for input parameters
        input-schema: json-schema,
        /// Optional schema for structured output
        output-schema: option<json-schema>,
        /// Behavioral hints for clients
        annotations: option<tool-annotations>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Request to execute a tool
    record call-tool-request {
        /// Name of the tool to execute
        name: string,
        /// Arguments as JSON object
        arguments: option<json-value>,
        /// Optional progress tracking token
        progress-token: option<progress-token>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Result from executing a tool
    record call-tool-result {
        /// Unstructured content blocks (text, images, etc.)
        content: list<content-block>,
        /// Optional structured JSON output
        structured-content: option<json-value>,
        /// Whether the tool execution resulted in an error
        /// If true, content should contain error details
        is-error: option<bool>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Request to list available tools
    record list-tools-request {
        /// Pagination cursor from previous response
        cursor: option<cursor>,
        /// Optional progress tracking token
        progress-token: option<progress-token>,
        /// Extension metadata
        meta: option<meta-fields>,
    }

    /// Response with list of available tools
    record list-tools-result {
        /// Available tools
        tools: list<tool>,
        /// Cursor for next page if more tools exist
        next-cursor: option<cursor>,
        /// Extension metadata
        meta: option<meta-fields>,
    }
}
