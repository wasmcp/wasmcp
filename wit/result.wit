use wasi:io/streams@0.2.3;

/// Content types and structures for MCP messages.
///
/// This interface defines the content blocks that can be included in MCP messages,
/// mapping directly to the ContentBlock type union in the MCP specification.
///
/// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
@since(version = 0.3.0-alpha.45)
interface content {
    use types.{meta};

    /// Role in a conversation.
    ///
    /// Maps to the Role type in the MCP spec:
    /// "The sender or recipient of messages and data in a conversation."
    /// Valid values: "user" | "assistant"
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#role>
    @since(version = 0.3.0-alpha.45)
    enum role {
        user,
        assistant,
    }

    /// Optional annotations for the client.
    ///
    /// The client can use annotations to inform how objects are used or displayed.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#annotations>
    @since(version = 0.3.0-alpha.45)
    record annotations {
        /// Describes who the intended customer of this object or data is.
        ///
        /// It can include multiple entries to indicate content useful for multiple audiences (e.g., [“user”, “assistant”]).
        audience: option<list<role>>,

        /// The moment the resource was last modified, as an ISO 8601 formatted string.
        ///
        /// Should be an ISO 8601 formatted string (e.g., “2025-01-12T15:00:58Z”).
        ///
        /// Examples: last activity timestamp in an open file, timestamp when the resource was attached, etc.
        last-modified: option<string>,

        /// Describes how important this data is for operating the server.
        ///
        /// A value of 1 means “most important,” and indicates that the data is effectively required, while 0 means “least important,” and indicates that the data is entirely optional.
        priority: f64,
    }

    /// Options for content blocks.
    @since(version = 0.3.0-alpha.45)
    record content-options {
        /// Optional annotations for the client.
        annotations: option<annotations>,
        /// Optional metadata.
        ///
        /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
        meta: meta,
    }
    
    /// Text provided to or from an LLM.
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#textcontent>
    @since(version = 0.3.0-alpha.45)
    record text-content {
        /// The text content of the message.
        text: string,
        options: option<content-options>,
    }

    /// An image provided to or from an LLM.
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#imagecontent>
    @since(version = 0.3.0-alpha.45)
    record image-content {
        /// The base64-encoded image data.
        data: list<u8>,
        /// The MIME type of the image. Different providers may support different image types.
        mime-type: string,
        options: option<content-options>,
    }

    /// Audio provided to or from an LLM.
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#audiocontent>
    @since(version = 0.3.0-alpha.45)
    record audio-content {
        /// The base64-encoded audio data.
        data: list<u8>,
        /// The MIME type of the audio. Different providers may support different audio types.
        mime-type: string,
        options: option<content-options>,
    }

    /// Options for resource link content.
    @since(version = 0.3.0-alpha.45)
    record resource-link-content-options {
        title: option<string>,
        description: option<string>,
        size: option<u64>,
        mime-type: option<string>,
        /// Optional annotations for the client.
        annotations: option<annotations>,
        /// Optional metadata.
        ///
        /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
        meta: meta,
    }
    
    /// A resource that the server is capable of reading, included in a prompt or tool call result.
    ///
    /// Note: resource links returned by tools are not guaranteed to appear in the results of resources/list requests.
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcelink>
    @since(version = 0.3.0-alpha.45)
    record resource-link-content {
        /// The URI of this resource.
        uri: string,
        /// Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn’t present).
        name: string,
        options: option<resource-link-content-options>,
    }

    /// Options for embedded resources.
    @since(version = 0.3.0-alpha.45)
    record embedded-resource-options {
        mime-type: option<string>,
        meta: meta,
    }

    /// Text resource contents.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#textresourcecontents>
    @since(version = 0.3.0-alpha.45)
    record text-resource-contents {
        uri: string,
        text: string,
        options: option<embedded-resource-options>,
    }

    /// Binary resource contents.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#blobresourcecontents>
    @since(version = 0.3.0-alpha.45)
    record blob-resource-contents {
        uri: string,
        blob: list<u8>,
        options: option<embedded-resource-options>,
    }

    /// Embedded resource data.
    @since(version = 0.3.0-alpha.45)
    variant embedded-resource {
        text(text-resource-contents),
        blob(blob-resource-contents),
    }

    /// Embedded resource with content options.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#embeddedresource>
    @since(version = 0.3.0-alpha.45)
    record embedded-resource-content {
        %resource: embedded-resource,
        options: option<content-options>,
    }

    /// Content blocks that can be included in messages.
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
    @since(version = 0.3.0-alpha.45)
    variant content-block {
        text(text-content),
        image(image-content),
        audio(audio-content),
        resource-link(resource-link-content),
        embedded-resource(embedded-resource-content),
    }
}

/// Writes JSON-RPC error responses to an output stream.
///
/// This interface provides a standardized way to write error responses
/// that conform to the JSON-RPC 2.0 specification.
///
/// See: <https://spec.json-rpc.org/specification>
@since(version = 0.3.0-alpha.45)
interface error-result {
    use streams.{output-stream, stream-error};
    use types.{id};
    use error.{error as mcp-error};

    write: func(
        id: id,
        output: output-stream,
        error: mcp-error
    ) -> result<_, stream-error>;
}

/// Writes initialization results to an output stream.
///
/// initialize: <https://modelcontextprotocol.io/specification/2025-06-18/schema#initialize>
@since(version = 0.3.0-alpha.45)
interface initialize-result {
    use streams.{output-stream, stream-error};
    use types.{id, implementation, meta, protocol-version, server-capabilities};

    /// Options for initialization results.
    @since(version = 0.3.0-alpha.45)
    record initialize-result-options {
        instructions: option<string>,
        meta: meta,
    }

    /// Initialization result structure.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#initializeresult>
    @since(version = 0.3.0-alpha.45)
    record initialize-result {
        server-info: implementation,
        capabilities: server-capabilities,
        protocol-version: protocol-version,
        options: option<initialize-result-options>,
    }

    @since(version = 0.3.0-alpha.45)
    write: func(id: id, output: output-stream, %result: initialize-result) -> result<_, stream-error>;
}

/// Writes tools/list results to an output stream.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-list>
@since(version = 0.3.0-alpha.45)
interface tools-list-result {
    use streams.{output-stream, stream-error};
    use types.{id, cursor, meta, json};

    /// Hints about tool behavior.
    @since(version = 0.3.0-alpha.45)
    flags tool-hints {
        destructive,
        idempotent,
        open-world,
        read-only,
    }

    /// Annotations for tool capabilities.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations>
    @since(version = 0.3.0-alpha.45)
    record tool-annotations {
        hints: tool-hints,
        title: option<string>,
    }

    /// Optional properties for tool definitions.
    @since(version = 0.3.0-alpha.45)
    record tool-options {
        meta: meta,
        annotations: option<tool-annotations>,
        description: option<string>,
        output-schema: option<json>,
        title: option<string>,
    }

    /// Tool definition.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tool>
    @since(version = 0.3.0-alpha.45)
    record tool {
        name: string,
        input-schema: string,
        options: option<tool-options>,
    }

    /// Options for list-tools results.
    @since(version = 0.3.0-alpha.45)
    record options {
        meta: meta,
        next-cursor: option<cursor>,
    }

    write: func(
        id: id,
        output: output-stream,
        tools: list<tool>,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u32, stream-error>;
        write: func(tool: tool) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream,
        initial: list<tool>
    ) -> result<writer, stream-error>;
}

/// Writes tools/call content results (unstructured).
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-call>
@since(version = 0.3.0-alpha.45)
interface tools-call-content {
    use streams.{output-stream, stream-error};
    use content.{content-block};
    use types.{id, meta};

    @since(version = 0.3.0-alpha.45)
    record options {
        is-error: bool,
        meta: meta,
    }

    write-text: func(
        id: id,
        output: output-stream,
        text: string,
        options: option<options>
    ) -> result<_, stream-error>;

    write-error: func(
        id: id,
        output: output-stream,
        reason: string
    ) -> result<_, stream-error>;

    write: func(
        id: id,
        output: output-stream,
        content: list<content-block>,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u64, stream-error>;
        write: func(contents: list<u8>) -> result<_, stream-error>;
        next: func(content: content-block) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream,
        initial: content-block
    ) -> result<writer, stream-error>;
}

/// Writes tools/call structured results.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-call>
@since(version = 0.3.0-alpha.45)
interface tools-call-structured {
    use streams.{output-stream, stream-error};
    use types.{id, meta, json};

    @since(version = 0.3.0-alpha.45)
    record options {
        is-error: bool,
        meta: meta,
    }

    write: func(
        id: id,
        output: output-stream,
        structured: json,
        options: option<options>
    ) -> result<_, stream-error>;
}

/// Writes resources/list results to an output stream.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resources-list>
@since(version = 0.3.0-alpha.45)
interface resources-list-result {
    use streams.{output-stream, stream-error};
    use types.{id, cursor, meta};
    use content.{annotations};

    @since(version = 0.3.0-alpha.45)
    record resource-options {
        size: option<u64>,
        title: option<string>,
        description: option<string>,
        mime-type: option<string>,
        annotations: option<annotations>,
        meta: meta,
    }

    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resource>
    @since(version = 0.3.0-alpha.45)
    record %resource {
        uri: string,
        name: string,
        options: option<resource-options>,
    }

    @since(version = 0.3.0-alpha.45)
    record options {
        meta: meta,
        next-cursor: option<cursor>,
    }

    write: func(
        id: id,
        output: output-stream,
        resources: list<%resource>,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u32, stream-error>;
        write: func(%resource: %resource) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream,
        initial: %resource
    ) -> result<writer, stream-error>;
}

/// Writes resources/read results to an output stream.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resources-read>
@since(version = 0.3.0-alpha.45)
interface resources-read-result {
    use streams.{output-stream, stream-error};
    use types.{id, meta};

    @since(version = 0.3.0-alpha.45)
    record contents-options {
        mime-type: option<string>,
        meta: meta,
    }

    @since(version = 0.3.0-alpha.45)
    record contents {
        uri: string,
        data: list<u8>,
        options: option<contents-options>,
    }

    @since(version = 0.3.0-alpha.45)
    record options {
        meta: meta,
    }

    write: func(
        id: id,
        output: output-stream,
        contents: contents,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u64, stream-error>;
        write: func(contents: list<u8>) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream,
        initial: contents
    ) -> result<writer, stream-error>;
}

/// Writes resource-templates/list results to an output stream.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resources-templates-list>
@since(version = 0.3.0-alpha.45)
interface resource-templates-list-result {
    use streams.{output-stream, stream-error};
    use types.{id, cursor, meta};
    use content.{annotations};

    @since(version = 0.3.0-alpha.45)
    record template-options {
        description: option<string>,
        title: option<string>,
        mime-type: option<string>,
        annotations: option<annotations>,
        meta: meta,
    }

    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcetemplate>
    @since(version = 0.3.0-alpha.45)
    record template {
        uri-template: string,
        name: string,
        options: option<template-options>,
    }

    @since(version = 0.3.0-alpha.45)
    record options {
        meta: meta,
        next-cursor: option<cursor>,
    }

    write: func(
        id: id,
        output: output-stream,
        templates: list<template>,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u32, stream-error>;
        write: func(template: template) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream
    ) -> result<writer, stream-error>;
}

/// Writes prompts/list results to an output stream.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#prompts-list>
@since(version = 0.3.0-alpha.45)
interface prompts-list-result {
    use streams.{output-stream, stream-error};
    use types.{id, meta};

    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#promptargument>
    @since(version = 0.3.0-alpha.45)
    record argument {
        name: string,
        description: option<string>,
        required: option<bool>,
        title: option<string>,
    }

    @since(version = 0.3.0-alpha.45)
    record prompt-options {
        meta: meta,
        arguments: option<list<argument>>,
        description: option<string>,
        title: option<string>,
    }

    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#prompt>
    @since(version = 0.3.0-alpha.45)
    record prompt {
        name: string,
        options: option<prompt-options>,
    }

    @since(version = 0.3.0-alpha.45)
    record options {
        meta: meta,
        next-cursor: option<string>,
    }

    write: func(
        id: id,
        output: output-stream,
        prompts: list<prompt>,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u32, stream-error>;
        write: func(prompt: prompt) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream
    ) -> result<writer, stream-error>;
}

/// Writes prompts/get results to an output stream.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#prompts%2Fget>
@since(version = 0.3.0-alpha.45)
interface prompts-get-result {
    use streams.{output-stream, stream-error};
    use types.{id, meta};
    use content.{content-block, role};

    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#promptmessage>
    @since(version = 0.3.0-alpha.45)
    record message {
        content: content-block,
        role: role,
    }

    @since(version = 0.3.0-alpha.45)
    record options {
        meta: meta,
        description: option<string>,
    }

    write: func(
        id: id,
        output: output-stream,
        messages: list<message>,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u32, stream-error>;
        write: func(message: message) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream
    ) -> result<writer, stream-error>;
}

/// Writes completion/complete results to an output stream.
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema#completion-complete>
@since(version = 0.3.0-alpha.45)
interface completion-complete-result {
    use streams.{output-stream, stream-error};
    use types.{id};

    @since(version = 0.3.0-alpha.45)
    record options {
        has-more: option<bool>,
    }

    write: func(
        id: id,
        output: output-stream,
        values: list<string>,
        options: option<options>
    ) -> result<_, stream-error>;

    resource writer {
        check-write: func() -> result<u32, stream-error>;
        write: func(values: list<string>) -> result<_, stream-error>;
        close: func(options: option<options>) -> result<_, stream-error>;
    }

    open: func(
        id: id,
        output: output-stream
    ) -> result<writer, stream-error>;
}

@since(version = 0.3.0-alpha.45)
world error-writer {
    export error-result;
}

@since(version = 0.3.0-alpha.45)
world initialize-writer {
    export initialize-result;
}

@since(version = 0.3.0-alpha.45)
world tools-writer {
    export tools-list-result;
    export tools-call-content;
    export tools-call-structured;
}

@since(version = 0.3.0-alpha.45)
world resources-writer {
    export resources-list-result;
    export resources-read-result;
    export resource-templates-list-result;
}

@since(version = 0.3.0-alpha.45)
world prompts-writer {
    export prompts-list-result;
    export prompts-get-result;
}

@since(version = 0.3.0-alpha.45)
world completion-writer {
    export completion-complete-result;
}
