/// Core MCP data types and aliases
///
/// <https://modelcontextprotocol.io/specification/2025-06-18/schema>
@since(version = 0.3.0-alpha.45)
interface types {
    /// Optional metadata for vendor-specific extensions.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
    @since(version = 0.3.0-alpha.45)
    type meta = option<list<tuple<string, string>>>;

    /// Opaque pagination token.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#cursor>
    @since(version = 0.3.0-alpha.45)
    type cursor = string;

    /// JSON-encoded data as a string.
    @since(version = 0.3.0-alpha.45)
    type json = string;

    /// Uniform Resource Identifier.
    @since(version = 0.3.0-alpha.45)
    type uri = string;

    /// Client capabilities (extensible).
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#clientcapabilities>
    @since(version = 0.3.0-alpha.45)
    flags client-capabilities {
        elicitation,
        roots,
        sampling,
        experimental,
    }


    /// Capabilities that a server supports.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#servercapabilities>
    @since(version = 0.3.0-alpha.45)
    flags server-capabilities {
        /// Argument autocompletion
        completions,
        /// Prompts
        prompts,
        /// Resources
        resources,
        /// Tools
        tools,
        /// Experimental features
        experimental,
    }

    /// MCP protocol versions.
    @since(version = 0.3.0-alpha.45)
    enum protocol-version {
        /// Version 2025-06-18
        v20250618,
        /// Version 2025-03-26
        v20250326,
        /// Version 2024-11-05
        v20241105,
    }

    /// MCP implementation metadata.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#implementation>
    @since(version = 0.3.0-alpha.45)
    record implementation {
        name: string,
        title: option<string>,
        version: string,
    }

    /// JSON-RPC request ID (string or number).
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#requestid>
    @since(version = 0.3.0-alpha.45)
    variant id {
        number(s64),
        %string(string),
    }
}

/// Error handling for MCP operations.
///
/// This interface provides error types that map to JSON-RPC error codes
/// as defined in the MCP specification.
@since(version = 0.3.0-alpha.31)
interface error {
    /// Standard JSON-RPC error codes.
    ///
    /// Maps to the error codes in JSONRPCError as defined in the MCP spec.
    /// Standard codes per JSON-RPC 2.0:
    /// - Parse error: -32700
    /// - Invalid request: -32600
    /// - Method not found: -32601
    /// - Invalid params: -32602
    /// - Internal error: -32603
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#jsonrpcerror>
    @since(version = 0.3.0-alpha.31)
    enum error-code {
        /// Parse error (-32700)
        parse-error,
        /// Invalid request (-32600)
        invalid-request,
        /// Method not found (-32601)
        method-not-found,
        /// Invalid parameters (-32602)
        invalid-params,
        /// Internal error (-32603)
        internal-error,
    }

    /// Standard MCP error structure.
    ///
    /// Maps to JSONRPCError.error in the MCP spec:
    /// - code: number - "The error type that occurred"
    /// - message: string - "A short description of the error"
    /// - data?: unknown - "Additional information about the error"
    ///
    /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#jsonrpcerror>
    @since(version = 0.3.0-alpha.31)
    record error {
        code: error-code,
        message: string,
        data: option<string>,
    }
}

/// MCP request types
@since(version = 0.3.0-alpha.45)
interface request {
    use wasi:io/streams@0.2.3.{input-stream, stream-error};
    use types.{id, implementation, json, uri, cursor, client-capabilities, protocol-version, server-capabilities};
    use error.{error as mcp-error};

    /// Arguments for tool calls and prompt requests.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#calltoolrequest>
    @since(version = 0.3.0-alpha.45)
    record arguments {
        name: string,
        arguments: option<json>,
    }

    /// Argument for completion requests.
    @since(version = 0.3.0-alpha.45)
    record completion-argument {
        name: string,
        value: string,
    }

    /// Context for completion requests.
    @since(version = 0.3.0-alpha.45)
    record completion-context {
        arguments: option<json>
    }

    /// Reference to a prompt for completion.
    @since(version = 0.3.0-alpha.45)
    record completion-prompt-reference {
        name: string,
        title: option<string>,
    }

    /// Reference types for completions.
    @since(version = 0.3.0-alpha.45)
    variant completion-ref {
        /// Prompt reference.
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#promptreference>
        prompt(completion-prompt-reference),

        /// Resource template reference.
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcetemplatereference>
        resource-template(uri),
    }

        /// Initialize request parameters.
    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#initializerequest>
    @since(version = 0.3.0-alpha.45)
    record initialize-params {
        capabilities: client-capabilities,
        client-info: implementation,
        protocol-version: protocol-version,
    }

    /// Parameters for listing tools.
    @since(version = 0.3.0-alpha.45)
    type list-tools-params = cursor;

    /// Parameters for calling a tool.
    @since(version = 0.3.0-alpha.45)
    type call-tool-params = arguments;

    /// Parameters for listing resources.
    @since(version = 0.3.0-alpha.45)
    type list-resources-params = cursor;

    /// Parameters for reading a resource.
    @since(version = 0.3.0-alpha.45)
    type read-resource-params = uri;

    /// Parameters for listing resource templates.
    @since(version = 0.3.0-alpha.45)
    type list-resource-templates-params = cursor;

    /// Parameters for listing prompts.
    @since(version = 0.3.0-alpha.45)
    type list-prompts-params = cursor;

    /// Parameters for getting a prompt.
    @since(version = 0.3.0-alpha.45)
    type get-prompt-params = arguments;

    /// Parameters for completion requests.
    @since(version = 0.3.0-alpha.45)
    record completion-params {
        argument: completion-argument,
        ref: completion-ref,
        context: option<completion-context>,
    }

    /// Parameters for different MCP methods.
    @since(version = 0.3.0-alpha.45)
    variant params {
        /// initialize
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#initializerequest>
        initialize(initialize-params),

        /// tools/list
        tools-list(list-tools-params),

        /// tools/call
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#calltoolrequest>
        tools-call(call-tool-params),

        /// resources/list
        resources-list(list-resources-params),

        /// resources/read
        resources-read(read-resource-params),

        /// resources/templates/list
        resources-templates-list(list-resource-templates-params),

        /// prompts/list
        prompts-list(list-prompts-params),

        /// prompts/get
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#getpromptrequest>
        prompts-get(get-prompt-params),

        /// completion/complete
        completion-complete(completion-params),
    }

    enum feature {
        initialize,
        tools,
        resources,
        prompts,
        completion,
    }

    /// MCP request resource providing lazy access to request data
    /// and request-scoped context storage.
    @since(version = 0.3.0-alpha.45)
    resource request {
        /// Parse a JSON-RPC 2.0 request from an HTTP request body stream.
        /// Reads until EOF (stream closes). The entire request body is buffered.
        /// Used by the HTTP transport which provides complete request bodies.
        @since(version = 0.3.0-alpha.57)
        from-http-stream: static func(input: borrow<input-stream>) -> result<request, stream-error>;

        /// Parse a JSON-RPC 2.0 request from a stdio stream.
        /// Reads until newline delimiter (\n or \r\n). Supports persistent connections
        /// with multiple newline-delimited messages on the same stream.
        /// Used by the stdio transport which provides newline-delimited JSON-RPC messages.
        @since(version = 0.3.0-alpha.57)
        from-stdio-stream: static func(input: borrow<input-stream>) -> result<request, stream-error>;

        /// Get the request ID.
        @since(version = 0.3.0-alpha.45)
        id: func() -> id;

        /// Get the capability required for this request.
        @since(version = 0.3.0-alpha.45) 
        feature: func() -> feature;

        /// Get the request parameters.
        @since(version = 0.3.0-alpha.45)
        params: func() -> result<params, mcp-error>;

        /// Get a context value by key.
        @since(version = 0.3.0-alpha.45)
        get: func(key: string) -> result<option<list<u8>>>;

        /// Set a context value by key.
        @since(version = 0.3.0-alpha.45)
        set: func(key: string, value: list<u8>) -> result;

        /// Check if this request needs the provided capabilities.
        /// Registers capabilities during initialize requests and returns false (forward to next handler).
        /// For other requests, returns true if the request feature matches the provided capabilities.
        @since(version = 0.3.0-alpha.45)
        needs: func(capabilities: server-capabilities) -> bool;

        /// Get the server capabilities associated with this request.
        @since(version = 0.3.0-alpha.45)
        get-capabilities: func() -> result<option<server-capabilities>>;
    }
}
