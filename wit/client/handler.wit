/// MCP client-side handler interface and composition worlds.
///
/// <https://modelcontextprotocol.io>
package wasmcp:client@0.1.0-alpha.2;

use wasi:io/streams@0.2.3;
use wasmcp:protocol/mcp@0.1.0-alpha.2;

/// Client-side MCP message handler.
@since(version = 0.1.0-alpha.2)
interface handler {
    use mcp.{
        error-code,
        request-id,
        client-response,
        server-request,
        server-response,
        server-notification,
    };
    use streams.{
        output-stream,
    };

    /// Handle a server request.
    @since(version = 0.1.0-alpha.2)
    handle-request: func(
        request: tuple<server-request, request-id>,
    ) -> result<client-response, error-code>;

    /// Handle a server response to a client-initiated request.
    @since(version = 0.1.0-alpha.2)
    handle-response: func(
        response: result<tuple<server-response, request-id>, error-code>,
    );

    /// Handle a server notification.
    @since(version = 0.1.0-alpha.2)
    handle-notification: func(
        notification: server-notification,
    );
}

/// Client transport world.
///
/// Import handler interface to delegate MCP message processing.
@since(version = 0.1.0-alpha.2)
world transport {
    import handler;
}

/// Client middleware world.
///
/// Import and export handler interface to enable composition.
@since(version = 0.1.0-alpha.2)
world middleware {
    import handler;
    export handler;
}
