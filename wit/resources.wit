/// Resources allow servers to share data that provides context to language models, such as files, database schemas, or application-specific information.
/// Each resource is uniquely identified by a URI.
///
/// https://modelcontextprotocol.io/specification/2025-06-18/server/resources
interface resources {
    use mcp-types.{mcp-error};
    use resources-types.{list-resources-request, list-resources-result, list-resource-templates-request, 
                        list-resource-templates-result, read-resource-request, read-resource-result,
                        subscribe-request, unsubscribe-request};
    
    /// List available resources
    list-resources: func(request: list-resources-request) -> result<list-resources-result, mcp-error>;
    
    /// List resource templates
    list-resource-templates: func(request: list-resource-templates-request) -> result<list-resource-templates-result, mcp-error>;
    
    /// Read a specific resource
    read-resource: func(request: read-resource-request) -> result<read-resource-result, mcp-error>;
    
    /// Subscribe to resource changes
    subscribe-resource: func(request: subscribe-request) -> result<_, mcp-error>;
    
    /// Unsubscribe from resource changes
    unsubscribe-resource: func(request: unsubscribe-request) -> result<_, mcp-error>;
} 

/// Type definitions for resources
interface resources-types {
    use mcp-types.{annotations, resource-contents, icon};
    
    /// A resource that can be read by the client
    record mcp-resource {
        /// URI identifying the resource
        uri: string,
        /// Name of the resource
        name: string,
        /// Human-readable title
        title: option<string>,
        /// Human-readable description
        description: option<string>,
        /// MIME type if known
        mime-type: option<string>,
        /// Size in bytes (before encoding)
        size: option<u32>,
        /// Optional list of icons for the resource
        icons: option<list<icon>>,
        /// Client hints
        annotations: option<annotations>,
    }

    /// Resource template with URI template support (RFC 6570)
    record resource-template {
        /// URI template that can be expanded with variables
        uri-template: string,
        /// Identifier for the template
        name: string,
        /// Human-readable title
        title: option<string>,
        /// Human-readable description
        description: option<string>,
        /// Expected MIME type of resources
        mime-type: option<string>,
        /// Client hints
        annotations: option<annotations>,
    }

    /// Request to list available resources
    record list-resources-request {
        /// Pagination cursor
        cursor: option<string>,
    }

    /// Response with list of resources
    record list-resources-result {
        /// Available resources
        resources: list<mcp-resource>,
        /// Cursor for next page
        next-cursor: option<string>,
    }

    /// Request to list resource templates
    record list-resource-templates-request {
        /// Pagination cursor
        cursor: option<string>,
    }

    /// Response with list of resource templates
    record list-resource-templates-result {
        /// Available templates
        resource-templates: list<resource-template>,
        /// Cursor for next page
        next-cursor: option<string>,
    }

    /// Request to read a specific resource
    record read-resource-request {
        /// URI of the resource to read
        uri: string,
    }

    /// Response with resource contents
    record read-resource-result {
        /// Resource contents (may be multiple for sub-resources)
        contents: list<resource-contents>,
    }

    /// Request to subscribe to resource updates
    record subscribe-request {
        /// URI of the resource to monitor
        uri: string,
    }

    /// Request to unsubscribe from resource updates
    record unsubscribe-request {
        /// URI of the resource to stop monitoring
        uri: string,
    }
}

