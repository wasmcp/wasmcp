/// MCP server-side handler interface and composition worlds.
///
/// <https://modelcontextprotocol.io>
package wasmcp:server@0.1.1;

/// Server-side MCP message handler.
@since(version = 0.1.0)
interface handler {
    use wasi:io/streams@0.2.3.{
        output-stream,
    };
    use wasmcp:protocol/mcp@0.1.0.{
        error-code,
        claims,
        session-id,
        request-id,
        server-response,
        client-request,
        client-response,
        client-notification,
    };
    use wasmcp:protocol/server-messages@0.1.0.{
        context,
    };

    /// Handle a client request.
    ///
    /// Processes an MCP request from the client and returns a response.
    ///
    /// Parameters:
    /// - `request`: Tuple of (request body, request ID for correlation)
    /// - `options`: Context from transport (auth, session, streams, custom metadata)
    ///
    /// Returns the server response or an error code if processing fails.
    @since(version = 0.1.0)
    handle-request: func(
        ctx: context,
        request: tuple<client-request, request-id>,
        client-stream: option<borrow<output-stream>>,
    ) -> result<server-response, error-code>;

    /// Handle a client response to a server-initiated request.
    @since(version = 0.1.0)
    handle-response: func(
        ctx: context,
        response: result<tuple<client-response, request-id>, error-code>,
    );

    /// Handle a client notification.
    @since(version = 0.1.0)
    handle-notification: func(
        ctx: context,
        notification: client-notification,
    );
}

/// Server transport world.
///
/// Import handler interface to delegate MCP message processing.
@since(version = 0.1.0)
world transport {
    import handler;
}

/// Server middleware world.
///
/// Import and export handler interface to enable composition.
@since(version = 0.1.0)
world middleware {
    import handler;
    export handler;
}
