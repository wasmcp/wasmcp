/// Authorization types for MCP servers
/// These types define the authorization configuration that providers can declare
/// and that transports use to enforce authorization

/// Type definitions for authentication and authorization
interface authorization-types {
    use types.{meta-fields};
    
    /// Provider declares its authorization requirements
    /// This is returned by core-capabilities::get-auth-config()
    /// and used by the transport to enforce authorization
    record provider-auth-config {
        /// Expected JWT issuer (REQUIRED for auth)
        expected-issuer: string,
        /// Expected JWT audiences (REQUIRED for auth - must have at least one)
        expected-audiences: list<string>,
        /// Expected JWT subject - if set, only this exact subject is allowed
        expected-subject: option<string>,
        /// JWKS URI for key discovery (REQUIRED for auth)
        jwks-uri: string,
        /// Optional Rego policy for complex authorization rules
        policy: option<string>,
        /// Optional data for policy evaluation
        policy-data: option<string>,
        /// Pass raw JWT token to tools via "jwt.token" meta field (default: false)
        pass-jwt: bool,
    }
    
    /// Authorization context passed between components after successful authorization
    record auth-context {
        /// OAuth client ID that made the request
        client-id: option<string>,
        /// Subject claim from the token - always present from validated JWT
        sub: string,
        /// OAuth scopes granted to this token
        scopes: list<string>,
        /// Issuer claim from the token - always present from validated JWT
        iss: string,
        /// Audience claim from token (aud) - always validated, can be multiple values
        aud: list<string>,
        /// Additional claims from token as key-value pairs
        claims: meta-fields,
        /// Expiration timestamp (Unix seconds) - always validated and required for security
        exp: u64,
        /// Issued at timestamp (Unix seconds)  
        iat: option<u64>,
        /// Not before timestamp (Unix seconds)
        nbf: option<u64>,
        /// Raw JWT iff enabled by authorization-types::pass-jwt
        jwt: option<string>,
    }
}