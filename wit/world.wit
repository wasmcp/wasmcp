/// wasmcp: WebAssembly-based Model Context Protocol implementation
///
/// This package provides composable MCP server and client components using the
/// WebAssembly Component Model. Components implement specific interfaces (handlers
/// or capabilities) and are composed into linear pipelines at build time.
///
/// Architecture:
/// - **Handlers**: Full protocol adapters (server-handler, client-handler)
/// - **Capabilities**: Focused business logic (tools-capability, prompts-capability)
/// - **Middleware**: Automatic wrapping of capabilities into handlers
/// - **Transports**: Entry points that route to handlers (HTTP, stdio)
///
/// <https://modelcontextprotocol.io>
package wasmcp:mcp@0.4.0;

/// Server transport component world
///
/// Transport components provide the entry point for MCP servers, handling the
/// underlying communication protocol (HTTP, stdio, etc.) and routing requests
/// to the server-handler pipeline.
///
/// Transport components import server-handler to delegate MCP protocol logic.
@since(version = 0.4.0)
world server-transport {
    /// Import the server-handler interface to delegate request processing
    import server-handler;
}

/// Server middleware component world
///
/// Middleware components sit between transports and other handlers in the pipeline,
/// providing cross-cutting concerns like:
/// - Wrapping capability components (tools-capability → tools-middleware → server-handler)
/// - Adding instrumentation, logging, or monitoring
/// - Implementing request/response transformation
///
/// Middleware imports server-handler (to call downstream) and exports server-handler
/// (to receive from upstream), forming a linear chain.
@since(version = 0.4.0)
world server-middleware {
    /// Import to call the next handler in the pipeline
    import server-handler;
    /// Export to receive requests from the previous handler
    export server-handler;
}

/// Client transport component world
///
/// Transport components provide the entry point for MCP clients, handling the
/// underlying communication protocol and routing responses to the client-handler pipeline.
///
/// Transport components import client-handler to delegate MCP protocol logic.
@since(version = 0.4.0)
world client-transport {
    /// Import the client-handler interface to delegate response processing
    import client-handler;
}

/// Client middleware component world
///
/// Middleware components sit between transports and other handlers in the client pipeline,
/// providing cross-cutting concerns similar to server middleware.
///
/// Middleware imports client-handler (to call downstream) and exports client-handler
/// (to receive from upstream), forming a linear chain.
@since(version = 0.4.0)
world client-middleware {
    /// Import to call the next handler in the pipeline
    import client-handler;
    /// Export to receive requests from the previous handler
    export client-handler;
}
