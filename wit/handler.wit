use wasi:io/streams@0.2.3;

/// Server-side MCP request/response handler interface
///
/// This interface defines the contract for processing MCP protocol messages on the server side.
/// Components implementing this interface receive client requests, process them, and return
/// server responses. They also handle bidirectional communication through responses and notifications.
///
/// Handler components form a linear pipeline where each handler can:
/// - Process requests it understands and return a response
/// - Delegate unknown requests downstream by importing server-handler
/// - Observe responses and notifications flowing back upstream
///
/// <https://spec.modelcontextprotocol.io>
@since(version = 0.4.0)
interface server-handler {
    use protocol.{
        client-context,
        error-code,
        claims,
        session-id,
        request-id,
        server-response,
        client-request,
        client-response,
        client-notification,
    };
    use streams.{output-stream};

    /// Handle an MCP request from the client
    ///
    /// This is the primary entry point for processing client requests. Handlers should:
    /// 1. Check if they can handle this request type
    /// 2. If yes, process it and return a server-response
    /// 3. If no, delegate to downstream by importing and calling server-handler
    ///
    /// The client-context provides session information and identity claims that may be
    /// used for authorization, personalization, or session management.
    ///
    /// <https://spec.modelcontextprotocol.io/specification/basic/requests>
    @since(version = 0.4.0)
    handle-request: func(
        /// Unique identifier for this request (used for correlating responses)
        id: request-id,
        /// The client request to process
        request: client-request,
        /// Client identity and session information
        client: client-context,
    ) -> result<server-response, error-code>;

    /// Handle a response from the client to a previous server request
    ///
    /// Servers can send requests to clients (e.g., sampling, root list requests).
    /// When the client responds, this function is called with the response.
    ///
    /// The request-id is optional because notifications don't have IDs.
    /// Handlers should:
    /// 1. Match the response to their pending request using the ID
    /// 2. Resume any suspended operations waiting for this response
    /// 3. Forward unrecognized responses downstream
    ///
    /// <https://spec.modelcontextprotocol.io/specification/client/elicitation>
    @since(version = 0.4.0)
    handle-response: func(
        /// The request ID this response corresponds to (none for notifications)
        id: option<request-id>,
        /// The client response or error
        response: result<client-response, error-code>,
    );

    /// Handle a notification from the client
    ///
    /// Notifications are one-way messages from client to server that don't expect a response.
    /// Examples include progress updates, cancellation requests, and resource updates.
    ///
    /// Handlers should:
    /// 1. Process notifications relevant to their functionality
    /// 2. Forward all notifications downstream (they're informational)
    ///
    /// <https://spec.modelcontextprotocol.io/specification/basic/notifications>
    @since(version = 0.4.0)
    handle-notification: func(
        /// The client notification to process
        notification: client-notification,
    );
}

/// Client-side MCP request/response handler interface
///
/// This interface defines the contract for processing MCP protocol messages on the client side.
/// Components implementing this interface receive server requests, process them, and return
/// client responses. They also handle bidirectional communication through responses and notifications.
///
/// This mirrors server-handler but processes server-initiated messages.
///
/// <https://spec.modelcontextprotocol.io>
@since(version = 0.4.0)
interface client-handler {
    use protocol.{
        server-context,
        error-code,
        request-id,
        client-response,
        server-request,
        server-response,
        server-notification,
    };
    use streams.{output-stream};

    /// Handle an MCP request from the server
    ///
    /// This is called when the server sends a request to the client, such as:
    /// - Sampling requests (asking the client to generate completions)
    /// - Root list requests (asking for the client's root URIs)
    ///
    /// <https://spec.modelcontextprotocol.io/specification/basic/requests>
    @since(version = 0.4.0)
    handle-request: func(
        /// Unique identifier for this request
        id: request-id,
        /// The server request to process
        request: server-request,
        /// Server identity and connection information
        server: server-context,
    ) -> result<client-response, error-code>;

    /// Handle a response from the server to a previous client request
    ///
    /// When the client makes a request and the server responds, this function is called.
    /// Handlers should match responses to their pending requests and resume operations.
    ///
    /// <https://spec.modelcontextprotocol.io/specification/basic/requests>
    @since(version = 0.4.0)
    handle-response: func(
        /// The request ID this response corresponds to
        id: option<request-id>,
        /// The server response or error
        response: result<server-response, error-code>,
    );

    /// Handle a notification from the server
    ///
    /// Servers send notifications to inform clients of changes:
    /// - Resource list changes
    /// - Prompt list changes
    /// - Tool list changes
    /// - Progress updates
    /// - Log messages
    ///
    /// <https://spec.modelcontextprotocol.io/specification/basic/notifications>
    @since(version = 0.4.0)
    handle-notification: func(
        /// The server notification to process
        notification: server-notification,
    );
}
