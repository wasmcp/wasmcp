package wasmcp:transport@0.2.0;

/// A lifecycle for client-server connections that ensures proper capability negotiation and state management.
/// Initialization: Capability negotiation and protocol version agreement
/// Operation: Normal protocol communication
/// Shutdown: Graceful termination of the connection
///
/// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
interface lifecycle {
    use wasmcp:mcp/mcp-types@0.2.0.{mcp-error};
    use wasmcp:mcp/lifecycle-types@0.2.0.{initialize-request, initialize-result};
    
    /// Handle session initialization
    /// Implementations should declare their capabilities here
    initialize: func(request: initialize-request) -> result<initialize-result, mcp-error>;

    /// Handle initialization complete notification
    client-initialized: func() -> result<_, mcp-error>;

    /// Handle shutdown request
    shutdown: func() -> result<_, mcp-error>;
}