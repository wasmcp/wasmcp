/// Lifecycle for client-server connections that ensures proper capability negotiation and state management.
/// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle


/// Handles connection lifecycle events
/// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
interface lifecycle {
    use mcp-types.{mcp-error};
    use lifecycle-types.{initialize-request, initialize-result};
    
    /// Handle session initialization
    /// Implementations should declare their capabilities here
    initialize: func(request: initialize-request) -> result<initialize-result, mcp-error>;
}

/// Type definitions for the MCP lifecycle
interface lifecycle-types {
    use mcp-types.{meta-fields};

    /// Protocol versions supported by MCP
    /// These correspond to official MCP specification versions
    enum protocol-version {
        /// MCP 2025-03-26 specification
        v20250326,
        /// MCP 2025-06-18 specification (latest)
        v20250618,
    }

    /// Information about an MCP implementation
    record implementation-info {
        /// Implementation name (e.g., "weather-server")
        name: string,
        /// Implementation version (e.g., "1.0.0")
        version: string,
        /// Optional human-readable title
        title: option<string>,
    }

    /// Root listing capability details
    record roots-capability {
        /// Server will notify when roots list changes
        list-changed: option<bool>,
    }

    /// Prompts capability details
    record prompts-capability {
        /// Server will notify when prompts list changes
        list-changed: option<bool>,
    }

    /// Resources capability details
    record resources-capability {
        /// Server supports resource subscriptions
        subscribe: option<bool>,
        /// Server will notify when resource list changes
        list-changed: option<bool>,
    }

    /// Tools capability details
    record tools-capability {
        /// Server will notify when tools list changes
        list-changed: option<bool>,
    }

    /// Capabilities that a client supports
    record client-capabilities {
        /// Experimental/custom capabilities
        experimental: option<meta-fields>,
        /// Support for roots (directory access)
        roots: option<roots-capability>,
        /// Support for LLM sampling
        sampling: option<bool>,
        /// Support for user elicitation
        elicitation: option<bool>,
    }

    /// Capabilities that a server provides
    record server-capabilities {
        /// Experimental/custom capabilities
        experimental: option<meta-fields>,
        /// Server can send log messages
        logging: option<bool>,
        /// Server supports argument autocompletion
        completions: option<bool>,
        /// Server offers prompts
        prompts: option<prompts-capability>,
        /// Server offers resources
        resources: option<resources-capability>,
        /// Server offers tools
        tools: option<tools-capability>,
    }

    /// Initialize request sent by client on connection
    record initialize-request {
        /// Protocol version the client supports
        protocol-version: protocol-version,
        /// Client's capabilities
        capabilities: client-capabilities,
        /// Client implementation details
        client-info: implementation-info,
        /// Optional metadata
        meta: option<meta-fields>,
    }

    /// Initialize response from server
    record initialize-result {
        /// Protocol version the server will use
        protocol-version: protocol-version,
        /// Server's capabilities
        capabilities: server-capabilities,
        /// Server implementation details
        server-info: implementation-info,
        /// Optional instructions for using the server
        instructions: option<string>,
        /// Optional metadata
        meta: option<meta-fields>,
    }
}
