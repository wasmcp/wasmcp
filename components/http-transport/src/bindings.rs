// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol, shared by other interfaces.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod mcp_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            pub type JsonValue = _rt::String;
            /// Metadata fields for extensibility
            /// Key-value pairs where values are JSON-encoded strings
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                /// Implementations SHOULD validate this is within [0.0, 1.0] range
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                /// Format: YYYY-MM-DDTHH:mm:ss[.sss]Z or Â±HH:MM offset
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Base metadata pattern used throughout the protocol
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BaseMetadata {
                /// Programmatic identifier
                pub name: _rt::String,
                /// Human-readable display name
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub text: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Image content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Audio content as binary data
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::Vec<u8>,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Reference to a resource that the server can read
            /// Resource links included in prompts or tool results may not appear in resources/list
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ResourceLink {
                /// URI of the resource
                pub uri: _rt::String,
                /// Programmatic identifier for the resource
                pub name: _rt::String,
                /// Human-readable display title (preferred for UI display)
                pub title: Option<_rt::String>,
                /// Description of what this resource represents
                pub description: Option<_rt::String>,
                /// MIME type of the resource, if known
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding), if known
                pub size: Option<u64>,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ResourceLink {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLink")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Binary data
                pub blob: _rt::Vec<u8>,
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            /// The contents of a resource, embedded into a prompt or tool call result
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct EmbeddedResource {
                /// The actual resource contents (text or binary)
                pub contents: ResourceContents,
                /// Client hints for handling
                pub annotations: Option<Annotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("contents", &self.contents)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLink),
                EmbeddedResource(EmbeddedResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// JSON Schema representation
            /// Kept as a string since JSON Schema is complex
            /// and typically validated by specialized libraries
            pub type JsonSchema = _rt::String;
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Pagination cursor for list operations
            pub type Cursor = _rt::String;
            /// Progress token for tracking long-running operations
            pub type ProgressToken = _rt::String;
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
        }
        /// Type definitions for the MCP lifecycle
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod lifecycle_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MetaFields = super::super::super::wasmcp::mcp::mcp_types::MetaFields;
            /// Protocol versions supported by MCP
            /// These correspond to official MCP specification versions
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum ProtocolVersion {
                /// MCP 2025-03-26 specification
                V20250326,
                /// MCP 2025-06-18 specification (latest)
                V20250618,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::V20250326 => {
                            f.debug_tuple("ProtocolVersion::V20250326").finish()
                        }
                        ProtocolVersion::V20250618 => {
                            f.debug_tuple("ProtocolVersion::V20250618").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::V20250326,
                        1 => ProtocolVersion::V20250618,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Information about an MCP implementation
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ImplementationInfo {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ImplementationInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImplementationInfo")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("title", &self.title)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling
                pub sampling: Option<bool>,
                /// Support for user elicitation
                pub elicitation: Option<bool>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities
                pub experimental: Option<MetaFields>,
                /// Server can send log messages
                pub logging: Option<bool>,
                /// Server supports argument autocompletion
                pub completions: Option<bool>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: ImplementationInfo,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct InitializeResult {
                /// Protocol version the server will use
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: ImplementationInfo,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
                /// Optional metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for InitializeResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResult")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// Lifecycle for client-server connections that ensures proper capability negotiation and state management.
        /// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
        /// Handles connection lifecycle events
        /// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod lifecycle {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::wasmcp::mcp::mcp_types::McpError;
            pub type InitializeRequest = super::super::super::wasmcp::mcp::lifecycle_types::InitializeRequest;
            pub type InitializeResult = super::super::super::wasmcp::mcp::lifecycle_types::InitializeResult;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle session initialization
            /// Implementations should declare their capabilities here
            pub fn initialize(
                request: &InitializeRequest,
            ) -> Result<InitializeResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 16 + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 16
                            + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::wasmcp::mcp::lifecycle_types::InitializeRequest {
                        protocol_version: protocol_version1,
                        capabilities: capabilities1,
                        client_info: client_info1,
                        meta: meta1,
                    } = request;
                    *ptr0.add(0).cast::<u8>() = (protocol_version1.clone() as i32) as u8;
                    let super::super::super::wasmcp::mcp::lifecycle_types::ClientCapabilities {
                        experimental: experimental2,
                        roots: roots2,
                        sampling: sampling2,
                        elicitation: elicitation2,
                    } = capabilities1;
                    match experimental2 {
                        Some(e) => {
                            *ptr0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t3_0, t3_1) = e;
                                    let vec4 = t3_0;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = t3_1;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result6;
                            cleanup_list.extend_from_slice(&[(result6, layout6)]);
                        }
                        None => {
                            *ptr0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match roots2 {
                        Some(e) => {
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::wasmcp::mcp::lifecycle_types::RootsCapability {
                                list_changed: list_changed7,
                            } = e;
                            match list_changed7 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match sampling2 {
                        Some(e) => {
                            *ptr0
                                .add(3 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(4 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(3 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match elicitation2 {
                        Some(e) => {
                            *ptr0
                                .add(5 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(6 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr0
                                .add(5 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let super::super::super::wasmcp::mcp::lifecycle_types::ImplementationInfo {
                        name: name8,
                        version: version8,
                        title: title8,
                    } = client_info1;
                    let vec9 = name8;
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    *ptr0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len9;
                    *ptr0
                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr9.cast_mut();
                    let vec10 = version8;
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    *ptr0
                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len10;
                    *ptr0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    match title8 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec11 = e;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            *ptr0
                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr0
                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr11.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match meta1 {
                        Some(e) => {
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec15 = e;
                            let len15 = vec15.len();
                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec15.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t12_0, t12_1) = e;
                                    let vec13 = t12_0;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = t12_1;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                            *ptr0
                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr0
                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result15;
                            cleanup_list.extend_from_slice(&[(result15, layout15)]);
                        }
                        None => {
                            *ptr0
                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr16 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/lifecycle@0.2.0-alpha.10")]
                    unsafe extern "C" {
                        #[link_name = "initialize"]
                        fn wit_import17(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import17(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import17(ptr0, ptr16) };
                    let l18 = i32::from(*ptr16.add(0).cast::<u8>());
                    let result79 = match l18 {
                        0 => {
                            let e = {
                                let l19 = i32::from(
                                    *ptr16.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l20 = i32::from(
                                    *ptr16
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l30 = i32::from(
                                    *ptr16
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l32 = i32::from(
                                    *ptr16
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l34 = i32::from(
                                    *ptr16
                                        .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = i32::from(
                                    *ptr16
                                        .add(7 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l42 = i32::from(
                                    *ptr16
                                        .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l45 = *ptr16
                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l46 = *ptr16
                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len47 = l46;
                                let bytes47 = _rt::Vec::from_raw_parts(
                                    l45.cast(),
                                    len47,
                                    len47,
                                );
                                let l48 = *ptr16
                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l49 = *ptr16
                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len50 = l49;
                                let bytes50 = _rt::Vec::from_raw_parts(
                                    l48.cast(),
                                    len50,
                                    len50,
                                );
                                let l51 = i32::from(
                                    *ptr16
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l55 = i32::from(
                                    *ptr16
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l59 = i32::from(
                                    *ptr16
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::lifecycle_types::InitializeResult {
                                    protocol_version: super::super::super::wasmcp::mcp::lifecycle_types::ProtocolVersion::_lift(
                                        l19 as u8,
                                    ),
                                    capabilities: super::super::super::wasmcp::mcp::lifecycle_types::ServerCapabilities {
                                        experimental: match l20 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l21 = *ptr16
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *ptr16
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l21;
                                                    let len29 = l22;
                                                    let mut result29 = _rt::Vec::with_capacity(len29);
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e29 = {
                                                            let l23 = *base.add(0).cast::<*mut u8>();
                                                            let l24 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len25 = l24;
                                                            let bytes25 = _rt::Vec::from_raw_parts(
                                                                l23.cast(),
                                                                len25,
                                                                len25,
                                                            );
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                        };
                                                        result29.push(e29);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result29
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        logging: match l30 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l31 = i32::from(
                                                        *ptr16
                                                            .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l31 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        completions: match l32 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l33 = i32::from(
                                                        *ptr16
                                                            .add(3 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l33 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        prompts: match l34 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l35 = i32::from(
                                                        *ptr16
                                                            .add(5 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::lifecycle_types::PromptsCapability {
                                                        list_changed: match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 = i32::from(
                                                                        *ptr16
                                                                            .add(6 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l36 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        resources: match l37 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l38 = i32::from(
                                                        *ptr16
                                                            .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l40 = i32::from(
                                                        *ptr16
                                                            .add(10 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::lifecycle_types::ResourcesCapability {
                                                        subscribe: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = i32::from(
                                                                        *ptr16
                                                                            .add(9 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l39 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        list_changed: match l40 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(
                                                                        *ptr16
                                                                            .add(11 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tools: match l42 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l43 = i32::from(
                                                        *ptr16
                                                            .add(13 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::lifecycle_types::ToolsCapability {
                                                        list_changed: match l43 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l44 = i32::from(
                                                                        *ptr16
                                                                            .add(14 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l44 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    server_info: super::super::super::wasmcp::mcp::lifecycle_types::ImplementationInfo {
                                        name: _rt::string_lift(bytes47),
                                        version: _rt::string_lift(bytes50),
                                        title: match l51 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l52 = *ptr16
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l53 = *ptr16
                                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len54 = l53;
                                                    let bytes54 = _rt::Vec::from_raw_parts(
                                                        l52.cast(),
                                                        len54,
                                                        len54,
                                                    );
                                                    _rt::string_lift(bytes54)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    instructions: match l55 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l56 = *ptr16
                                                    .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l57 = *ptr16
                                                    .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len58 = l57;
                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                    l56.cast(),
                                                    len58,
                                                    len58,
                                                );
                                                _rt::string_lift(bytes58)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l59 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l60 = *ptr16
                                                    .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l61 = *ptr16
                                                    .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base68 = l60;
                                                let len68 = l61;
                                                let mut result68 = _rt::Vec::with_capacity(len68);
                                                for i in 0..len68 {
                                                    let base = base68
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e68 = {
                                                        let l62 = *base.add(0).cast::<*mut u8>();
                                                        let l63 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        let l65 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        (_rt::string_lift(bytes64), _rt::string_lift(bytes67))
                                                    };
                                                    result68.push(e68);
                                                }
                                                _rt::cabi_dealloc(
                                                    base68,
                                                    len68 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result68
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l69 = i32::from(
                                    *ptr16.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V71;
                                let v71 = match l69 {
                                    0 => V71::ParseError,
                                    1 => V71::InvalidRequest,
                                    2 => V71::MethodNotFound,
                                    3 => V71::InvalidParams,
                                    4 => V71::InternalError,
                                    5 => V71::ResourceNotFound,
                                    6 => V71::ToolNotFound,
                                    7 => V71::PromptNotFound,
                                    8 => V71::Unauthorized,
                                    9 => V71::RateLimited,
                                    10 => V71::Timeout,
                                    11 => V71::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e71 = {
                                            let l70 = *ptr16
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l70
                                        };
                                        V71::CustomCode(e71)
                                    }
                                };
                                let l72 = *ptr16
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l73 = *ptr16
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len74 = l73;
                                let bytes74 = _rt::Vec::from_raw_parts(
                                    l72.cast(),
                                    len74,
                                    len74,
                                );
                                let l75 = i32::from(
                                    *ptr16
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v71,
                                    message: _rt::string_lift(bytes74),
                                    data: match l75 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l76 = *ptr16
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l77 = *ptr16
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len78 = l77;
                                                let bytes78 = _rt::Vec::from_raw_parts(
                                                    l76.cast(),
                                                    len78,
                                                    len78,
                                                );
                                                _rt::string_lift(bytes78)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result79
                }
            }
        }
        /// Type definitions for tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::wasmcp::mcp::mcp_types::ContentBlock;
            pub type JsonValue = super::super::super::wasmcp::mcp::mcp_types::JsonValue;
            pub type JsonSchema = super::super::super::wasmcp::mcp::mcp_types::JsonSchema;
            pub type BaseMetadata = super::super::super::wasmcp::mcp::mcp_types::BaseMetadata;
            pub type MetaFields = super::super::super::wasmcp::mcp::mcp_types::MetaFields;
            pub type Cursor = super::super::super::wasmcp::mcp::mcp_types::Cursor;
            pub type ProgressToken = super::super::super::wasmcp::mcp::mcp_types::ProgressToken;
            /// Behavioral hints about tool operations
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (meaningful when not read-only)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                /// Base metadata (name and optional title)
                pub base: BaseMetadata,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema for input parameters
                pub input_schema: JsonSchema,
                /// Optional schema for structured output
                pub output_schema: Option<JsonSchema>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("base", &self.base)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object
                pub arguments: Option<JsonValue>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct CallToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                /// If true, content should contain error details
                pub is_error: Option<bool>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for CallToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<Cursor>,
                /// Optional progress tracking token
                pub progress_token: Option<ProgressToken>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .field("progress-token", &self.progress_token)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResult {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<Cursor>,
                /// Extension metadata
                pub meta: Option<MetaFields>,
            }
            impl ::core::fmt::Debug for ListToolsResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResult")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
        /// Type definitions for authentication and authorization
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod authorization_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MetaFields = super::super::super::wasmcp::mcp::mcp_types::MetaFields;
            /// Provider declares its authorization requirements
            /// This is returned by lifecycle::get-auth-config()
            /// and used by the transport to enforce authorization
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct ProviderAuthConfig {
                /// Expected JWT issuer (REQUIRED for auth)
                pub expected_issuer: _rt::String,
                /// Expected JWT audiences (REQUIRED for auth - must have at least one)
                pub expected_audiences: _rt::Vec<_rt::String>,
                /// JWKS URI for key discovery (REQUIRED for auth)
                pub jwks_uri: _rt::String,
                /// Pass raw JWT token to tools via "jwt.token" meta field.
                pub pass_jwt: bool,
                /// Expected JWT subject - if set, only this exact subject is allowed
                pub expected_subject: Option<_rt::String>,
                /// Optional Rego policy for complex authorization rules
                pub policy: Option<_rt::String>,
                /// Optional data for policy evaluation
                pub policy_data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ProviderAuthConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProviderAuthConfig")
                        .field("expected-issuer", &self.expected_issuer)
                        .field("expected-audiences", &self.expected_audiences)
                        .field("jwks-uri", &self.jwks_uri)
                        .field("pass-jwt", &self.pass_jwt)
                        .field("expected-subject", &self.expected_subject)
                        .field("policy", &self.policy)
                        .field("policy-data", &self.policy_data)
                        .finish()
                }
            }
            /// Authorization context passed between components after successful authorization
            #[derive(Clone, serde::Deserialize, serde::Serialize)]
            pub struct AuthContext {
                /// OAuth client ID that made the request
                pub client_id: Option<_rt::String>,
                /// Subject claim from the token - always present from validated JWT
                pub sub: _rt::String,
                /// OAuth scopes granted to this token
                pub scopes: _rt::Vec<_rt::String>,
                /// Issuer claim from the token - always present from validated JWT
                pub iss: _rt::String,
                /// Audience claim from token (aud) - always validated, can be multiple values
                pub aud: _rt::Vec<_rt::String>,
                /// Additional claims from token as key-value pairs
                pub claims: MetaFields,
                /// Expiration timestamp (Unix seconds) - always validated and required for security
                pub exp: u64,
                /// Issued at timestamp (Unix seconds)
                pub iat: Option<u64>,
                /// Not before timestamp (Unix seconds)
                pub nbf: Option<u64>,
                /// Raw JWT iff enabled by authorization-types::pass-jwt
                pub jwt: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for AuthContext {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AuthContext")
                        .field("client-id", &self.client_id)
                        .field("sub", &self.sub)
                        .field("scopes", &self.scopes)
                        .field("iss", &self.iss)
                        .field("aud", &self.aud)
                        .field("claims", &self.claims)
                        .field("exp", &self.exp)
                        .field("iat", &self.iat)
                        .field("nbf", &self.nbf)
                        .field("jwt", &self.jwt)
                        .finish()
                }
            }
        }
        /// The TOOLS capability
        /// https://modelcontextprotocol.io/specification/2025-06-18/server/tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::wasmcp::mcp::mcp_types::McpError;
            pub type ListToolsRequest = super::super::super::wasmcp::mcp::tools_types::ListToolsRequest;
            pub type ListToolsResult = super::super::super::wasmcp::mcp::tools_types::ListToolsResult;
            pub type CallToolRequest = super::super::super::wasmcp::mcp::tools_types::CallToolRequest;
            pub type CallToolResult = super::super::super::wasmcp::mcp::tools_types::CallToolResult;
            pub type AuthContext = super::super::super::wasmcp::mcp::authorization_types::AuthContext;
            #[allow(unused_unsafe, clippy::all)]
            /// List available tools
            pub fn list_tools(
                request: &ListToolsRequest,
            ) -> Result<ListToolsResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 9 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 9
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::wasmcp::mcp::tools_types::ListToolsRequest {
                        cursor: cursor0,
                        progress_token: progress_token0,
                        meta: meta0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result4_0, result4_1, result4_2) = match progress_token0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result9_0, result9_1, result9_2) = match meta0 {
                        Some(e) => {
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                            (1i32, result8, len8)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/tools@0.2.0-alpha.10")]
                    unsafe extern "C" {
                        #[link_name = "list-tools"]
                        fn wit_import11(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result2_0,
                            result2_1,
                            result2_2,
                            result4_0,
                            result4_1,
                            result4_2,
                            result9_0,
                            result9_1,
                            result9_2,
                            ptr10,
                        )
                    };
                    let l12 = i32::from(*ptr10.add(0).cast::<u8>());
                    let result81 = match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr10
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr10
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base56 = l13;
                                let len56 = l14;
                                let mut result56 = _rt::Vec::with_capacity(len56);
                                for i in 0..len56 {
                                    let base = base56
                                        .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                    let e56 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l27 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 = _rt::Vec::from_raw_parts(
                                            l26.cast(),
                                            len28,
                                            len28,
                                        );
                                        let l29 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l33 = i32::from(
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l46 = i32::from(
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::wasmcp::mcp::tools_types::Tool {
                                            base: super::super::super::wasmcp::mcp::mcp_types::BaseMetadata {
                                                name: _rt::string_lift(bytes17),
                                                title: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l20 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            description: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            input_schema: _rt::string_lift(bytes28),
                                            output_schema: match l29 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l30 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        _rt::string_lift(bytes32)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l33 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l38 = i32::from(
                                                            *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = i32::from(
                                                            *base
                                                                .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l42 = i32::from(
                                                            *base
                                                                .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l44 = i32::from(
                                                            *base
                                                                .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::wasmcp::mcp::tools_types::ToolAnnotations {
                                                            title: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l36 = *base
                                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        _rt::string_lift(bytes37)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            read_only_hint: match l38 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l39 = i32::from(
                                                                            *base
                                                                                .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l39 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            destructive_hint: match l40 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l41 = i32::from(
                                                                            *base
                                                                                .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l41 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            idempotent_hint: match l42 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l43 = i32::from(
                                                                            *base
                                                                                .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l43 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            open_world_hint: match l44 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l45 = i32::from(
                                                                            *base
                                                                                .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l45 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l46 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l47 = *base
                                                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l48 = *base
                                                            .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base55 = l47;
                                                        let len55 = l48;
                                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                                        for i in 0..len55 {
                                                            let base = base55
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e55 = {
                                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                let l52 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len54 = l53;
                                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                                    l52.cast(),
                                                                    len54,
                                                                    len54,
                                                                );
                                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                                            };
                                                            result55.push(e55);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base55,
                                                            len55 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result55
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result56.push(e56);
                                }
                                _rt::cabi_dealloc(
                                    base56,
                                    len56 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l57 = i32::from(
                                    *ptr10
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l61 = i32::from(
                                    *ptr10
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::tools_types::ListToolsResult {
                                    tools: result56,
                                    next_cursor: match l57 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l58 = *ptr10
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l59 = *ptr10
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l61 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l62 = *ptr10
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l63 = *ptr10
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base70 = l62;
                                                let len70 = l63;
                                                let mut result70 = _rt::Vec::with_capacity(len70);
                                                for i in 0..len70 {
                                                    let base = base70
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e70 = {
                                                        let l64 = *base.add(0).cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        let l67 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l68 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len69 = l68;
                                                        let bytes69 = _rt::Vec::from_raw_parts(
                                                            l67.cast(),
                                                            len69,
                                                            len69,
                                                        );
                                                        (_rt::string_lift(bytes66), _rt::string_lift(bytes69))
                                                    };
                                                    result70.push(e70);
                                                }
                                                _rt::cabi_dealloc(
                                                    base70,
                                                    len70 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result70
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l71 = i32::from(
                                    *ptr10.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V73;
                                let v73 = match l71 {
                                    0 => V73::ParseError,
                                    1 => V73::InvalidRequest,
                                    2 => V73::MethodNotFound,
                                    3 => V73::InvalidParams,
                                    4 => V73::InternalError,
                                    5 => V73::ResourceNotFound,
                                    6 => V73::ToolNotFound,
                                    7 => V73::PromptNotFound,
                                    8 => V73::Unauthorized,
                                    9 => V73::RateLimited,
                                    10 => V73::Timeout,
                                    11 => V73::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e73 = {
                                            let l72 = *ptr10
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l72
                                        };
                                        V73::CustomCode(e73)
                                    }
                                };
                                let l74 = *ptr10
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l75 = *ptr10
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len76 = l75;
                                let bytes76 = _rt::Vec::from_raw_parts(
                                    l74.cast(),
                                    len76,
                                    len76,
                                );
                                let l77 = i32::from(
                                    *ptr10
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v73,
                                    message: _rt::string_lift(bytes76),
                                    data: match l77 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l78 = *ptr10
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l79 = *ptr10
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len80 = l79;
                                                let bytes80 = _rt::Vec::from_raw_parts(
                                                    l78.cast(),
                                                    len80,
                                                    len80,
                                                );
                                                _rt::string_lift(bytes80)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result81
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a tool
            pub fn call_tool(
                request: &CallToolRequest,
                auth_context: Option<&AuthContext>,
            ) -> Result<CallToolResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 72 + 24 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 72
                            + 24 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::wasmcp::mcp::tools_types::CallToolRequest {
                        name: name1,
                        arguments: arguments1,
                        progress_token: progress_token1,
                        meta: meta1,
                    } = request;
                    let vec2 = name1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    match arguments1 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match progress_token1 {
                        Some(e) => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match meta1 {
                        Some(e) => {
                            *ptr0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec8 = e;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = t5_0;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = t5_1;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            *ptr0
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result8;
                            cleanup_list.extend_from_slice(&[(result8, layout8)]);
                        }
                        None => {
                            *ptr0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match auth_context {
                        Some(e) => {
                            *ptr0
                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::wasmcp::mcp::authorization_types::AuthContext {
                                client_id: client_id9,
                                sub: sub9,
                                scopes: scopes9,
                                iss: iss9,
                                aud: aud9,
                                claims: claims9,
                                exp: exp9,
                                iat: iat9,
                                nbf: nbf9,
                                jwt: jwt9,
                            } = e;
                            match client_id9 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec10 = e;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *ptr0
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr0
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec11 = sub9;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            *ptr0
                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr0
                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr11.cast_mut();
                            let vec13 = scopes9;
                            let len13 = vec13.len();
                            let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result13 = if layout13.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout13);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec13.into_iter().enumerate() {
                                let base = result13
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec12 = e;
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *base.add(0).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len13;
                            *ptr0
                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result13;
                            let vec14 = iss9;
                            let ptr14 = vec14.as_ptr().cast::<u8>();
                            let len14 = vec14.len();
                            *ptr0
                                .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len14;
                            *ptr0
                                .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr14.cast_mut();
                            let vec16 = aud9;
                            let len16 = vec16.len();
                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec16.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec15 = e;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 20 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len16;
                            *ptr0
                                .add(16 + 19 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result16;
                            let vec20 = claims9;
                            let len20 = vec20.len();
                            let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec20.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result20 = if layout20.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout20);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec20.into_iter().enumerate() {
                                let base = result20
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t17_0, t17_1) = e;
                                    let vec18 = t17_0;
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base.add(0).cast::<*mut u8>() = ptr18.cast_mut();
                                    let vec19 = t17_1;
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len19;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 22 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len20;
                            *ptr0
                                .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result20;
                            *ptr0
                                .add(24 + 22 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(exp9);
                            match iat9 {
                                Some(e) => {
                                    *ptr0
                                        .add(32 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(40 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(32 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match nbf9 {
                                Some(e) => {
                                    *ptr0
                                        .add(48 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(56 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(48 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match jwt9 {
                                Some(e) => {
                                    *ptr0
                                        .add(64 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec21 = e;
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    *ptr0
                                        .add(64 + 24 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *ptr0
                                        .add(64 + 23 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(64 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            cleanup_list
                                .extend_from_slice(
                                    &[
                                        (result13, layout13),
                                        (result16, layout16),
                                        (result20, layout20),
                                    ],
                                );
                        }
                        None => {
                            *ptr0
                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr22 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/tools@0.2.0-alpha.10")]
                    unsafe extern "C" {
                        #[link_name = "call-tool"]
                        fn wit_import23(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import23(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import23(ptr0, ptr22) };
                    let l24 = i32::from(*ptr22.add(0).cast::<u8>());
                    let result243 = match l24 {
                        0 => {
                            let e = {
                                let l25 = *ptr22
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l26 = *ptr22
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base216 = l25;
                                let len216 = l26;
                                let mut result216 = _rt::Vec::with_capacity(len216);
                                for i in 0..len216 {
                                    let base = base216
                                        .add(i * (80 + 18 * ::core::mem::size_of::<*const u8>()));
                                    let e216 = {
                                        let l27 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::wasmcp::mcp::mcp_types::ContentBlock as V215;
                                        let v215 = match l27 {
                                            0 => {
                                                let e215 = {
                                                    let l28 = *base.add(8).cast::<*mut u8>();
                                                    let l29 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len30 = l29;
                                                    let bytes30 = _rt::Vec::from_raw_parts(
                                                        l28.cast(),
                                                        len30,
                                                        len30,
                                                    );
                                                    let l31 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l43 = i32::from(
                                                        *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::TextContent {
                                                        text: _rt::string_lift(bytes30),
                                                        annotations: match l31 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l32 = i32::from(
                                                                        *base
                                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l37 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l39 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l32 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l33 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l34 = *base
                                                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base36 = l33;
                                                                                    let len36 = l34;
                                                                                    let mut result36 = _rt::Vec::with_capacity(len36);
                                                                                    for i in 0..len36 {
                                                                                        let base = base36.add(i * 1);
                                                                                        let e36 = {
                                                                                            let l35 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l35 as u8,
                                                                                            )
                                                                                        };
                                                                                        result36.push(e36);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                                                    result36
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l37 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l38 = *base
                                                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l38
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l39 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l40 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l41 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len42 = l41;
                                                                                    let bytes42 = _rt::Vec::from_raw_parts(
                                                                                        l40.cast(),
                                                                                        len42,
                                                                                        len42,
                                                                                    );
                                                                                    _rt::string_lift(bytes42)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l43 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l44 = *base
                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l45 = *base
                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base52 = l44;
                                                                    let len52 = l45;
                                                                    let mut result52 = _rt::Vec::with_capacity(len52);
                                                                    for i in 0..len52 {
                                                                        let base = base52
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e52 = {
                                                                            let l46 = *base.add(0).cast::<*mut u8>();
                                                                            let l47 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len48 = l47;
                                                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                                                l46.cast(),
                                                                                len48,
                                                                                len48,
                                                                            );
                                                                            let l49 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l50 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len51 = l50;
                                                                            let bytes51 = _rt::Vec::from_raw_parts(
                                                                                l49.cast(),
                                                                                len51,
                                                                                len51,
                                                                            );
                                                                            (_rt::string_lift(bytes48), _rt::string_lift(bytes51))
                                                                        };
                                                                        result52.push(e52);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base52,
                                                                        len52 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result52
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V215::Text(e215)
                                            }
                                            1 => {
                                                let e215 = {
                                                    let l53 = *base.add(8).cast::<*mut u8>();
                                                    let l54 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len55 = l54;
                                                    let l56 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l57 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len58 = l57;
                                                    let bytes58 = _rt::Vec::from_raw_parts(
                                                        l56.cast(),
                                                        len58,
                                                        len58,
                                                    );
                                                    let l59 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l71 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::ImageContent {
                                                        data: _rt::Vec::from_raw_parts(l53.cast(), len55, len55),
                                                        mime_type: _rt::string_lift(bytes58),
                                                        annotations: match l59 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l60 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l65 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l67 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l60 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l61 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l62 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base64 = l61;
                                                                                    let len64 = l62;
                                                                                    let mut result64 = _rt::Vec::with_capacity(len64);
                                                                                    for i in 0..len64 {
                                                                                        let base = base64.add(i * 1);
                                                                                        let e64 = {
                                                                                            let l63 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l63 as u8,
                                                                                            )
                                                                                        };
                                                                                        result64.push(e64);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base64, len64 * 1, 1);
                                                                                    result64
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l65 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l66 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l66
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l67 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l68 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l69 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len70 = l69;
                                                                                    let bytes70 = _rt::Vec::from_raw_parts(
                                                                                        l68.cast(),
                                                                                        len70,
                                                                                        len70,
                                                                                    );
                                                                                    _rt::string_lift(bytes70)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l71 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l72 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l73 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base80 = l72;
                                                                    let len80 = l73;
                                                                    let mut result80 = _rt::Vec::with_capacity(len80);
                                                                    for i in 0..len80 {
                                                                        let base = base80
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e80 = {
                                                                            let l74 = *base.add(0).cast::<*mut u8>();
                                                                            let l75 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len76 = l75;
                                                                            let bytes76 = _rt::Vec::from_raw_parts(
                                                                                l74.cast(),
                                                                                len76,
                                                                                len76,
                                                                            );
                                                                            let l77 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l78 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len79 = l78;
                                                                            let bytes79 = _rt::Vec::from_raw_parts(
                                                                                l77.cast(),
                                                                                len79,
                                                                                len79,
                                                                            );
                                                                            (_rt::string_lift(bytes76), _rt::string_lift(bytes79))
                                                                        };
                                                                        result80.push(e80);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base80,
                                                                        len80 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result80
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V215::Image(e215)
                                            }
                                            2 => {
                                                let e215 = {
                                                    let l81 = *base.add(8).cast::<*mut u8>();
                                                    let l82 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len83 = l82;
                                                    let l84 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l85 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len86 = l85;
                                                    let bytes86 = _rt::Vec::from_raw_parts(
                                                        l84.cast(),
                                                        len86,
                                                        len86,
                                                    );
                                                    let l87 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l99 = i32::from(
                                                        *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::AudioContent {
                                                        data: _rt::Vec::from_raw_parts(l81.cast(), len83, len83),
                                                        mime_type: _rt::string_lift(bytes86),
                                                        annotations: match l87 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l88 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l93 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l95 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l88 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l89 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l90 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base92 = l89;
                                                                                    let len92 = l90;
                                                                                    let mut result92 = _rt::Vec::with_capacity(len92);
                                                                                    for i in 0..len92 {
                                                                                        let base = base92.add(i * 1);
                                                                                        let e92 = {
                                                                                            let l91 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l91 as u8,
                                                                                            )
                                                                                        };
                                                                                        result92.push(e92);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base92, len92 * 1, 1);
                                                                                    result92
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l93 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l94 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l94
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l95 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l96 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l97 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len98 = l97;
                                                                                    let bytes98 = _rt::Vec::from_raw_parts(
                                                                                        l96.cast(),
                                                                                        len98,
                                                                                        len98,
                                                                                    );
                                                                                    _rt::string_lift(bytes98)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l99 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l100 = *base
                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l101 = *base
                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base108 = l100;
                                                                    let len108 = l101;
                                                                    let mut result108 = _rt::Vec::with_capacity(len108);
                                                                    for i in 0..len108 {
                                                                        let base = base108
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e108 = {
                                                                            let l102 = *base.add(0).cast::<*mut u8>();
                                                                            let l103 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len104 = l103;
                                                                            let bytes104 = _rt::Vec::from_raw_parts(
                                                                                l102.cast(),
                                                                                len104,
                                                                                len104,
                                                                            );
                                                                            let l105 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l106 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len107 = l106;
                                                                            let bytes107 = _rt::Vec::from_raw_parts(
                                                                                l105.cast(),
                                                                                len107,
                                                                                len107,
                                                                            );
                                                                            (_rt::string_lift(bytes104), _rt::string_lift(bytes107))
                                                                        };
                                                                        result108.push(e108);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base108,
                                                                        len108 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result108
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V215::Audio(e215)
                                            }
                                            3 => {
                                                let e215 = {
                                                    let l109 = *base.add(8).cast::<*mut u8>();
                                                    let l110 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len111 = l110;
                                                    let bytes111 = _rt::Vec::from_raw_parts(
                                                        l109.cast(),
                                                        len111,
                                                        len111,
                                                    );
                                                    let l112 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l113 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len114 = l113;
                                                    let bytes114 = _rt::Vec::from_raw_parts(
                                                        l112.cast(),
                                                        len114,
                                                        len114,
                                                    );
                                                    let l115 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l119 = i32::from(
                                                        *base
                                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l123 = i32::from(
                                                        *base
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l127 = i32::from(
                                                        *base
                                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l129 = i32::from(
                                                        *base
                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l141 = i32::from(
                                                        *base
                                                            .add(72 + 16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::ResourceLink {
                                                        uri: _rt::string_lift(bytes111),
                                                        name: _rt::string_lift(bytes114),
                                                        title: match l115 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l116 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l117 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len118 = l117;
                                                                    let bytes118 = _rt::Vec::from_raw_parts(
                                                                        l116.cast(),
                                                                        len118,
                                                                        len118,
                                                                    );
                                                                    _rt::string_lift(bytes118)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        description: match l119 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l120 = *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l121 = *base
                                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len122 = l121;
                                                                    let bytes122 = _rt::Vec::from_raw_parts(
                                                                        l120.cast(),
                                                                        len122,
                                                                        len122,
                                                                    );
                                                                    _rt::string_lift(bytes122)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l123 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l124 = *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l125 = *base
                                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len126 = l125;
                                                                    let bytes126 = _rt::Vec::from_raw_parts(
                                                                        l124.cast(),
                                                                        len126,
                                                                        len126,
                                                                    );
                                                                    _rt::string_lift(bytes126)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l127 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l128 = *base
                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    l128 as u64
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l129 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l130 = i32::from(
                                                                        *base
                                                                            .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l135 = i32::from(
                                                                        *base
                                                                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l137 = i32::from(
                                                                        *base
                                                                            .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l130 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l131 = *base
                                                                                        .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l132 = *base
                                                                                        .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base134 = l131;
                                                                                    let len134 = l132;
                                                                                    let mut result134 = _rt::Vec::with_capacity(len134);
                                                                                    for i in 0..len134 {
                                                                                        let base = base134.add(i * 1);
                                                                                        let e134 = {
                                                                                            let l133 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l133 as u8,
                                                                                            )
                                                                                        };
                                                                                        result134.push(e134);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base134, len134 * 1, 1);
                                                                                    result134
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l135 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l136 = *base
                                                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l136
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l137 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l138 = *base
                                                                                        .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l139 = *base
                                                                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len140 = l139;
                                                                                    let bytes140 = _rt::Vec::from_raw_parts(
                                                                                        l138.cast(),
                                                                                        len140,
                                                                                        len140,
                                                                                    );
                                                                                    _rt::string_lift(bytes140)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l141 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l142 = *base
                                                                        .add(72 + 17 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l143 = *base
                                                                        .add(72 + 18 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base150 = l142;
                                                                    let len150 = l143;
                                                                    let mut result150 = _rt::Vec::with_capacity(len150);
                                                                    for i in 0..len150 {
                                                                        let base = base150
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e150 = {
                                                                            let l144 = *base.add(0).cast::<*mut u8>();
                                                                            let l145 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len146 = l145;
                                                                            let bytes146 = _rt::Vec::from_raw_parts(
                                                                                l144.cast(),
                                                                                len146,
                                                                                len146,
                                                                            );
                                                                            let l147 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l148 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len149 = l148;
                                                                            let bytes149 = _rt::Vec::from_raw_parts(
                                                                                l147.cast(),
                                                                                len149,
                                                                                len149,
                                                                            );
                                                                            (_rt::string_lift(bytes146), _rt::string_lift(bytes149))
                                                                        };
                                                                        result150.push(e150);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base150,
                                                                        len150 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result150
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V215::ResourceLink(e215)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e215 = {
                                                    let l151 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::wasmcp::mcp::mcp_types::ResourceContents as V192;
                                                    let v192 = match l151 {
                                                        0 => {
                                                            let e192 = {
                                                                let l152 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l153 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len154 = l153;
                                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                                    l152.cast(),
                                                                    len154,
                                                                    len154,
                                                                );
                                                                let l155 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l159 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l160 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len161 = l160;
                                                                let bytes161 = _rt::Vec::from_raw_parts(
                                                                    l159.cast(),
                                                                    len161,
                                                                    len161,
                                                                );
                                                                let l162 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::wasmcp::mcp::mcp_types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes154),
                                                                    mime_type: match l155 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l156 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l157 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len158 = l157;
                                                                                let bytes158 = _rt::Vec::from_raw_parts(
                                                                                    l156.cast(),
                                                                                    len158,
                                                                                    len158,
                                                                                );
                                                                                _rt::string_lift(bytes158)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes161),
                                                                    meta: match l162 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l163 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l164 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base171 = l163;
                                                                                let len171 = l164;
                                                                                let mut result171 = _rt::Vec::with_capacity(len171);
                                                                                for i in 0..len171 {
                                                                                    let base = base171
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e171 = {
                                                                                        let l165 = *base.add(0).cast::<*mut u8>();
                                                                                        let l166 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len167 = l166;
                                                                                        let bytes167 = _rt::Vec::from_raw_parts(
                                                                                            l165.cast(),
                                                                                            len167,
                                                                                            len167,
                                                                                        );
                                                                                        let l168 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l169 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len170 = l169;
                                                                                        let bytes170 = _rt::Vec::from_raw_parts(
                                                                                            l168.cast(),
                                                                                            len170,
                                                                                            len170,
                                                                                        );
                                                                                        (_rt::string_lift(bytes167), _rt::string_lift(bytes170))
                                                                                    };
                                                                                    result171.push(e171);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base171,
                                                                                    len171 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result171
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V192::Text(e192)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e192 = {
                                                                let l172 = *base
                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l173 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len174 = l173;
                                                                let bytes174 = _rt::Vec::from_raw_parts(
                                                                    l172.cast(),
                                                                    len174,
                                                                    len174,
                                                                );
                                                                let l175 = i32::from(
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l179 = *base
                                                                    .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l180 = *base
                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len181 = l180;
                                                                let l182 = i32::from(
                                                                    *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::wasmcp::mcp::mcp_types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes174),
                                                                    mime_type: match l175 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l176 = *base
                                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l177 = *base
                                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len178 = l177;
                                                                                let bytes178 = _rt::Vec::from_raw_parts(
                                                                                    l176.cast(),
                                                                                    len178,
                                                                                    len178,
                                                                                );
                                                                                _rt::string_lift(bytes178)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::Vec::from_raw_parts(l179.cast(), len181, len181),
                                                                    meta: match l182 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l183 = *base
                                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l184 = *base
                                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base191 = l183;
                                                                                let len191 = l184;
                                                                                let mut result191 = _rt::Vec::with_capacity(len191);
                                                                                for i in 0..len191 {
                                                                                    let base = base191
                                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                    let e191 = {
                                                                                        let l185 = *base.add(0).cast::<*mut u8>();
                                                                                        let l186 = *base
                                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len187 = l186;
                                                                                        let bytes187 = _rt::Vec::from_raw_parts(
                                                                                            l185.cast(),
                                                                                            len187,
                                                                                            len187,
                                                                                        );
                                                                                        let l188 = *base
                                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l189 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len190 = l189;
                                                                                        let bytes190 = _rt::Vec::from_raw_parts(
                                                                                            l188.cast(),
                                                                                            len190,
                                                                                            len190,
                                                                                        );
                                                                                        (_rt::string_lift(bytes187), _rt::string_lift(bytes190))
                                                                                    };
                                                                                    result191.push(e191);
                                                                                }
                                                                                _rt::cabi_dealloc(
                                                                                    base191,
                                                                                    len191 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                    ::core::mem::size_of::<*const u8>(),
                                                                                );
                                                                                result191
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V192::Blob(e192)
                                                        }
                                                    };
                                                    let l193 = i32::from(
                                                        *base
                                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l205 = i32::from(
                                                        *base
                                                            .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::EmbeddedResource {
                                                        contents: v192,
                                                        annotations: match l193 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l194 = i32::from(
                                                                        *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l199 = i32::from(
                                                                        *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l201 = i32::from(
                                                                        *base
                                                                            .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l194 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l195 = *base
                                                                                        .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l196 = *base
                                                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base198 = l195;
                                                                                    let len198 = l196;
                                                                                    let mut result198 = _rt::Vec::with_capacity(len198);
                                                                                    for i in 0..len198 {
                                                                                        let base = base198.add(i * 1);
                                                                                        let e198 = {
                                                                                            let l197 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l197 as u8,
                                                                                            )
                                                                                        };
                                                                                        result198.push(e198);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base198, len198 * 1, 1);
                                                                                    result198
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l199 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l200 = *base
                                                                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l200
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l201 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l202 = *base
                                                                                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l203 = *base
                                                                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len204 = l203;
                                                                                    let bytes204 = _rt::Vec::from_raw_parts(
                                                                                        l202.cast(),
                                                                                        len204,
                                                                                        len204,
                                                                                    );
                                                                                    _rt::string_lift(bytes204)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        meta: match l205 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l206 = *base
                                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l207 = *base
                                                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base214 = l206;
                                                                    let len214 = l207;
                                                                    let mut result214 = _rt::Vec::with_capacity(len214);
                                                                    for i in 0..len214 {
                                                                        let base = base214
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e214 = {
                                                                            let l208 = *base.add(0).cast::<*mut u8>();
                                                                            let l209 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len210 = l209;
                                                                            let bytes210 = _rt::Vec::from_raw_parts(
                                                                                l208.cast(),
                                                                                len210,
                                                                                len210,
                                                                            );
                                                                            let l211 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l212 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len213 = l212;
                                                                            let bytes213 = _rt::Vec::from_raw_parts(
                                                                                l211.cast(),
                                                                                len213,
                                                                                len213,
                                                                            );
                                                                            (_rt::string_lift(bytes210), _rt::string_lift(bytes213))
                                                                        };
                                                                        result214.push(e214);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base214,
                                                                        len214 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result214
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V215::EmbeddedResource(e215)
                                            }
                                        };
                                        v215
                                    };
                                    result216.push(e216);
                                }
                                _rt::cabi_dealloc(
                                    base216,
                                    len216 * (80 + 18 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l217 = i32::from(
                                    *ptr22
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l221 = i32::from(
                                    *ptr22
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l223 = i32::from(
                                    *ptr22
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::tools_types::CallToolResult {
                                    content: result216,
                                    structured_content: match l217 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l218 = *ptr22
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l219 = *ptr22
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len220 = l219;
                                                let bytes220 = _rt::Vec::from_raw_parts(
                                                    l218.cast(),
                                                    len220,
                                                    len220,
                                                );
                                                _rt::string_lift(bytes220)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    is_error: match l221 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l222 = i32::from(
                                                    *ptr22
                                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l222 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l223 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l224 = *ptr22
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l225 = *ptr22
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base232 = l224;
                                                let len232 = l225;
                                                let mut result232 = _rt::Vec::with_capacity(len232);
                                                for i in 0..len232 {
                                                    let base = base232
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e232 = {
                                                        let l226 = *base.add(0).cast::<*mut u8>();
                                                        let l227 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len228 = l227;
                                                        let bytes228 = _rt::Vec::from_raw_parts(
                                                            l226.cast(),
                                                            len228,
                                                            len228,
                                                        );
                                                        let l229 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l230 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len231 = l230;
                                                        let bytes231 = _rt::Vec::from_raw_parts(
                                                            l229.cast(),
                                                            len231,
                                                            len231,
                                                        );
                                                        (_rt::string_lift(bytes228), _rt::string_lift(bytes231))
                                                    };
                                                    result232.push(e232);
                                                }
                                                _rt::cabi_dealloc(
                                                    base232,
                                                    len232 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result232
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l233 = i32::from(
                                    *ptr22.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V235;
                                let v235 = match l233 {
                                    0 => V235::ParseError,
                                    1 => V235::InvalidRequest,
                                    2 => V235::MethodNotFound,
                                    3 => V235::InvalidParams,
                                    4 => V235::InternalError,
                                    5 => V235::ResourceNotFound,
                                    6 => V235::ToolNotFound,
                                    7 => V235::PromptNotFound,
                                    8 => V235::Unauthorized,
                                    9 => V235::RateLimited,
                                    10 => V235::Timeout,
                                    11 => V235::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e235 = {
                                            let l234 = *ptr22
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l234
                                        };
                                        V235::CustomCode(e235)
                                    }
                                };
                                let l236 = *ptr22
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l237 = *ptr22
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len238 = l237;
                                let bytes238 = _rt::Vec::from_raw_parts(
                                    l236.cast(),
                                    len238,
                                    len238,
                                );
                                let l239 = i32::from(
                                    *ptr22
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v235,
                                    message: _rt::string_lift(bytes238),
                                    data: match l239 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l240 = *ptr22
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l241 = *ptr22
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len242 = l241;
                                                let bytes242 = _rt::Vec::from_raw_parts(
                                                    l240.cast(),
                                                    len242,
                                                    len242,
                                                );
                                                _rt::string_lift(bytes242)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result243
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
}
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:mcp@0.2.0-alpha.10:tools-transport:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3832] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf2\x1c\x01A\x02\x01\
A\x1b\x01B9\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajs\
on-value\x03\0\x02\x01o\x02ss\x01p\x04\x04\0\x0bmeta-fields\x03\0\x05\x01p\x01\x01\
k\x07\x01ku\x01ks\x01r\x03\x08audience\x08\x08priority\x09\x0dlast-modified\x0a\x04\
\0\x0bannotations\x03\0\x0b\x01r\x02\x04names\x05title\x0a\x04\0\x0dbase-metadat\
a\x03\0\x0d\x01k\x0c\x01k\x06\x01r\x03\x04texts\x0bannotations\x0f\x04meta\x10\x04\
\0\x0ctext-content\x03\0\x11\x01p}\x01r\x04\x04data\x13\x09mime-types\x0bannotat\
ions\x0f\x04meta\x10\x04\0\x0dimage-content\x03\0\x14\x01r\x04\x04data\x13\x09mi\
me-types\x0bannotations\x0f\x04meta\x10\x04\0\x0daudio-content\x03\0\x16\x01kw\x01\
r\x08\x03uris\x04names\x05title\x0a\x0bdescription\x0a\x09mime-type\x0a\x04size\x18\
\x0bannotations\x0f\x04meta\x10\x04\0\x0dresource-link\x03\0\x19\x01r\x04\x03uri\
s\x09mime-type\x0a\x04texts\x04meta\x10\x04\0\x16text-resource-contents\x03\0\x1b\
\x01r\x04\x03uris\x09mime-type\x0a\x04blob\x13\x04meta\x10\x04\0\x16blob-resourc\
e-contents\x03\0\x1d\x01q\x02\x04text\x01\x1c\0\x04blob\x01\x1e\0\x04\0\x11resou\
rce-contents\x03\0\x1f\x01r\x03\x08contents\x20\x0bannotations\x0f\x04meta\x10\x04\
\0\x11embedded-resource\x03\0!\x01q\x05\x04text\x01\x12\0\x05image\x01\x15\0\x05\
audio\x01\x17\0\x0dresource-link\x01\x1a\0\x11embedded-resource\x01\"\0\x04\0\x0d\
content-block\x03\0#\x01s\x04\0\x0bjson-schema\x03\0%\x01q\x0d\x0bparse-error\0\0\
\x0finvalid-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einterna\
l-error\0\0\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\
\0\x0cunauthorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcu\
stom-code\x01z\0\x04\0\x0aerror-code\x03\0'\x01r\x03\x04code(\x07messages\x04dat\
a\x0a\x04\0\x09mcp-error\x03\0)\x01s\x04\0\x06cursor\x03\0+\x01s\x04\0\x0eprogre\
ss-token\x03\0-\x01q\x02\x03str\x01s\0\x03num\x01x\0\x04\0\x0arequest-id\x03\0/\x01\
m\x03\x04user\x09assistant\x06system\x04\0\x0cmessage-role\x03\01\x01r\x01\x04na\
me\x0a\x04\0\x0amodel-hint\x03\03\x01p4\x01k5\x01r\x04\x05hints6\x0dcost-priorit\
y\x09\x0espeed-priority\x09\x15intelligence-priority\x09\x04\0\x11model-preferen\
ces\x03\07\x03\0#wasmcp:mcp/mcp-types@0.2.0-alpha.10\x05\0\x02\x03\0\0\x0bmeta-f\
ields\x01B\x1d\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\x03\0\0\x01m\x02\x09v202\
50326\x09v20250618\x04\0\x10protocol-version\x03\0\x02\x01ks\x01r\x03\x04names\x07\
versions\x05title\x04\x04\0\x13implementation-info\x03\0\x05\x01k\x7f\x01r\x01\x0c\
list-changed\x07\x04\0\x10roots-capability\x03\0\x08\x01r\x01\x0clist-changed\x07\
\x04\0\x12prompts-capability\x03\0\x0a\x01r\x02\x09subscribe\x07\x0clist-changed\
\x07\x04\0\x14resources-capability\x03\0\x0c\x01r\x01\x0clist-changed\x07\x04\0\x10\
tools-capability\x03\0\x0e\x01k\x01\x01k\x09\x01r\x04\x0cexperimental\x10\x05roo\
ts\x11\x08sampling\x07\x0belicitation\x07\x04\0\x13client-capabilities\x03\0\x12\
\x01k\x0b\x01k\x0d\x01k\x0f\x01r\x06\x0cexperimental\x10\x07logging\x07\x0bcompl\
etions\x07\x07prompts\x14\x09resources\x15\x05tools\x16\x04\0\x13server-capabili\
ties\x03\0\x17\x01r\x04\x10protocol-version\x03\x0ccapabilities\x13\x0bclient-in\
fo\x06\x04meta\x10\x04\0\x12initialize-request\x03\0\x19\x01r\x05\x10protocol-ve\
rsion\x03\x0ccapabilities\x18\x0bserver-info\x06\x0cinstructions\x04\x04meta\x10\
\x04\0\x11initialize-result\x03\0\x1b\x03\0)wasmcp:mcp/lifecycle-types@0.2.0-alp\
ha.10\x05\x02\x02\x03\0\0\x09mcp-error\x02\x03\0\x01\x12initialize-request\x02\x03\
\0\x01\x11initialize-result\x01B\x09\x02\x03\x02\x01\x03\x04\0\x09mcp-error\x03\0\
\0\x02\x03\x02\x01\x04\x04\0\x12initialize-request\x03\0\x02\x02\x03\x02\x01\x05\
\x04\0\x11initialize-result\x03\0\x04\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\
\0\x06\x04\0\x0ainitialize\x01\x07\x03\0#wasmcp:mcp/lifecycle@0.2.0-alpha.10\x05\
\x06\x02\x03\0\0\x0dcontent-block\x02\x03\0\0\x0ajson-value\x02\x03\0\0\x0bjson-\
schema\x02\x03\0\0\x0dbase-metadata\x02\x03\0\0\x06cursor\x02\x03\0\0\x0eprogres\
s-token\x01B$\x02\x03\x02\x01\x07\x04\0\x0dcontent-block\x03\0\0\x02\x03\x02\x01\
\x08\x04\0\x0ajson-value\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x0bjson-schema\x03\0\
\x04\x02\x03\x02\x01\x0a\x04\0\x0dbase-metadata\x03\0\x06\x02\x03\x02\x01\x01\x04\
\0\x0bmeta-fields\x03\0\x08\x02\x03\x02\x01\x0b\x04\0\x06cursor\x03\0\x0a\x02\x03\
\x02\x01\x0c\x04\0\x0eprogress-token\x03\0\x0c\x01ks\x01k\x7f\x01r\x05\x05title\x0e\
\x0eread-only-hint\x0f\x10destructive-hint\x0f\x0fidempotent-hint\x0f\x0fopen-wo\
rld-hint\x0f\x04\0\x10tool-annotations\x03\0\x10\x01k\x05\x01k\x11\x01k\x09\x01r\
\x06\x04base\x07\x0bdescription\x0e\x0cinput-schema\x05\x0doutput-schema\x12\x0b\
annotations\x13\x04meta\x14\x04\0\x04tool\x03\0\x15\x01k\x03\x01k\x0d\x01r\x04\x04\
names\x09arguments\x17\x0eprogress-token\x18\x04meta\x14\x04\0\x11call-tool-requ\
est\x03\0\x19\x01p\x01\x01r\x04\x07content\x1b\x12structured-content\x17\x08is-e\
rror\x0f\x04meta\x14\x04\0\x10call-tool-result\x03\0\x1c\x01k\x0b\x01r\x03\x06cu\
rsor\x1e\x0eprogress-token\x18\x04meta\x14\x04\0\x12list-tools-request\x03\0\x1f\
\x01p\x16\x01r\x03\x05tools!\x0bnext-cursor\x1e\x04meta\x14\x04\0\x11list-tools-\
result\x03\0\"\x03\0%wasmcp:mcp/tools-types@0.2.0-alpha.10\x05\x0d\x01B\x09\x02\x03\
\x02\x01\x01\x04\0\x0bmeta-fields\x03\0\0\x01ps\x01ks\x01r\x07\x0fexpected-issue\
rs\x12expected-audiences\x02\x08jwks-uris\x08pass-jwt\x7f\x10expected-subject\x03\
\x06policy\x03\x0bpolicy-data\x03\x04\0\x14provider-auth-config\x03\0\x04\x01kw\x01\
r\x0a\x09client-id\x03\x03subs\x06scopes\x02\x03isss\x03aud\x02\x06claims\x01\x03\
expw\x03iat\x06\x03nbf\x06\x03jwt\x03\x04\0\x0cauth-context\x03\0\x07\x03\0-wasm\
cp:mcp/authorization-types@0.2.0-alpha.10\x05\x0e\x02\x03\0\x03\x12list-tools-re\
quest\x02\x03\0\x03\x11list-tools-result\x02\x03\0\x03\x11call-tool-request\x02\x03\
\0\x03\x10call-tool-result\x02\x03\0\x04\x0cauth-context\x01B\x13\x02\x03\x02\x01\
\x03\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x0f\x04\0\x12list-tools-request\x03\
\0\x02\x02\x03\x02\x01\x10\x04\0\x11list-tools-result\x03\0\x04\x02\x03\x02\x01\x11\
\x04\0\x11call-tool-request\x03\0\x06\x02\x03\x02\x01\x12\x04\0\x10call-tool-res\
ult\x03\0\x08\x02\x03\x02\x01\x13\x04\0\x0cauth-context\x03\0\x0a\x01j\x01\x05\x01\
\x01\x01@\x01\x07request\x03\0\x0c\x04\0\x0alist-tools\x01\x0d\x01k\x0b\x01j\x01\
\x09\x01\x01\x01@\x02\x07request\x07\x0cauth-context\x0e\0\x0f\x04\0\x09call-too\
l\x01\x10\x03\0\x1fwasmcp:mcp/tools@0.2.0-alpha.10\x05\x14\x04\0)wasmcp:mcp/tool\
s-transport@0.2.0-alpha.10\x04\0\x0b\x15\x01\0\x0ftools-transport\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
