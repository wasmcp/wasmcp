// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Clone"]
//   * with "wasmcp:mcp/authorization-types@0.2.0" = "wasmcp_core"
//   * with "wasmcp:mcp/lifecycle-types@0.2.0" = "wasmcp_core"
//   * with "wasmcp:mcp/mcp-types@0.2.0" = "wasmcp_core"
//   * with "wasmcp:mcp/tools-types@0.2.0" = "wasmcp_core"
use wasmcp_core as __with_name0;
use wasmcp_core as __with_name1;
use wasmcp_core as __with_name2;
use wasmcp_core as __with_name3;
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod transport {
        /// Tools enable models to interact with external systems, such as querying databases, calling APIs, or performing computations.
        /// Each tool is uniquely identified by a name and includes metadata describing its schema.
        ///
        /// https://modelcontextprotocol.io/specification/2025-06-18/server/tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::__with_name0::McpError;
            pub type AuthContext = super::super::super::__with_name1::AuthContext;
            pub type ListToolsRequest = super::super::super::__with_name2::ListToolsRequest;
            pub type ListToolsResult = super::super::super::__with_name2::ListToolsResult;
            pub type CallToolRequest = super::super::super::__with_name2::CallToolRequest;
            pub type CallToolResult = super::super::super::__with_name2::CallToolResult;
            #[allow(unused_unsafe, clippy::all)]
            /// List available tools
            pub fn list_tools(
                request: &ListToolsRequest,
            ) -> Result<ListToolsResult, McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::__with_name2::ListToolsRequest {
                        cursor: cursor0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/tools@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "list-tools"]
                        fn wit_import4(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import4(result2_0, result2_1, result2_2, ptr3) };
                    let l5 = i32::from(*ptr3.add(0).cast::<u8>());
                    let result69 = match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base54 = l6;
                                let len54 = l7;
                                let mut result54 = _rt::Vec::with_capacity(len54);
                                for i in 0..len54 {
                                    let base = base54
                                        .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                    let e54 = {
                                        let l8 = *base.add(0).cast::<*mut u8>();
                                        let l9 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        let l11 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l15 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l19 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l20 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len21 = l20;
                                        let bytes21 = _rt::Vec::from_raw_parts(
                                            l19.cast(),
                                            len21,
                                            len21,
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = i32::from(
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l39 = i32::from(
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::__with_name2::Tool {
                                            name: _rt::string_lift(bytes10),
                                            title: match l11 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l12 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l13 = *base
                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len14 = l13;
                                                        let bytes14 = _rt::Vec::from_raw_parts(
                                                            l12.cast(),
                                                            len14,
                                                            len14,
                                                        );
                                                        _rt::string_lift(bytes14)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            description: match l15 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l16 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l17 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len18 = l17;
                                                        let bytes18 = _rt::Vec::from_raw_parts(
                                                            l16.cast(),
                                                            len18,
                                                            len18,
                                                        );
                                                        _rt::string_lift(bytes18)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            input_schema: _rt::string_lift(bytes21),
                                            output_schema: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l26 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l27 = i32::from(
                                                            *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l31 = i32::from(
                                                            *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l33 = i32::from(
                                                            *base
                                                                .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l35 = i32::from(
                                                            *base
                                                                .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l37 = i32::from(
                                                            *base
                                                                .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::__with_name2::ToolAnnotations {
                                                            title: match l27 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l28 = *base
                                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l29 = *base
                                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len30 = l29;
                                                                        let bytes30 = _rt::Vec::from_raw_parts(
                                                                            l28.cast(),
                                                                            len30,
                                                                            len30,
                                                                        );
                                                                        _rt::string_lift(bytes30)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            read_only_hint: match l31 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l32 = i32::from(
                                                                            *base
                                                                                .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l32 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            destructive_hint: match l33 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l34 = i32::from(
                                                                            *base
                                                                                .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l34 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            idempotent_hint: match l35 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l36 = i32::from(
                                                                            *base
                                                                                .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l36 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            open_world_hint: match l37 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l38 = i32::from(
                                                                            *base
                                                                                .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l38 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            icons: match l39 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l40 = *base
                                                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l41 = *base
                                                            .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base53 = l40;
                                                        let len53 = l41;
                                                        let mut result53 = _rt::Vec::with_capacity(len53);
                                                        for i in 0..len53 {
                                                            let base = base53
                                                                .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                            let e53 = {
                                                                let l42 = *base.add(0).cast::<*mut u8>();
                                                                let l43 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len44 = l43;
                                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                                    l42.cast(),
                                                                    len44,
                                                                    len44,
                                                                );
                                                                let l45 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l49 = i32::from(
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::__with_name0::Icon {
                                                                    src: _rt::string_lift(bytes44),
                                                                    mime_type: match l45 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l46 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l47 = *base
                                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len48 = l47;
                                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                                    l46.cast(),
                                                                                    len48,
                                                                                    len48,
                                                                                );
                                                                                _rt::string_lift(bytes48)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    sizes: match l49 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l50 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l51 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len52 = l51;
                                                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                                                    l50.cast(),
                                                                                    len52,
                                                                                    len52,
                                                                                );
                                                                                _rt::string_lift(bytes52)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result53.push(e53);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base53,
                                                            len53 * (8 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result53
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result54.push(e54);
                                }
                                _rt::cabi_dealloc(
                                    base54,
                                    len54 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l55 = i32::from(
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name2::ListToolsResult {
                                    tools: result54,
                                    next_cursor: match l55 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l56 = *ptr3
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l57 = *ptr3
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len58 = l57;
                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                    l56.cast(),
                                                    len58,
                                                    len58,
                                                );
                                                _rt::string_lift(bytes58)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l59 = i32::from(
                                    *ptr3.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::__with_name0::ErrorCode as V61;
                                let v61 = match l59 {
                                    0 => V61::ParseError,
                                    1 => V61::InvalidRequest,
                                    2 => V61::MethodNotFound,
                                    3 => V61::InvalidParams,
                                    4 => V61::InternalError,
                                    5 => V61::ResourceNotFound,
                                    6 => V61::ToolNotFound,
                                    7 => V61::PromptNotFound,
                                    8 => V61::Unauthorized,
                                    9 => V61::RateLimited,
                                    10 => V61::Timeout,
                                    11 => V61::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e61 = {
                                            let l60 = *ptr3
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l60
                                        };
                                        V61::CustomCode(e61)
                                    }
                                };
                                let l62 = *ptr3
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l63 = *ptr3
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len64 = l63;
                                let bytes64 = _rt::Vec::from_raw_parts(
                                    l62.cast(),
                                    len64,
                                    len64,
                                );
                                let l65 = i32::from(
                                    *ptr3
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name0::McpError {
                                    code: v61,
                                    message: _rt::string_lift(bytes64),
                                    data: match l65 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l66 = *ptr3
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l67 = *ptr3
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                _rt::string_lift(bytes68)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result69
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a tool
            pub fn call_tool(
                request: &CallToolRequest,
                context: Option<&AuthContext>,
            ) -> Result<CallToolResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 72 + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 72
                            + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::__with_name2::CallToolRequest {
                        name: name1,
                        arguments: arguments1,
                    } = request;
                    let vec2 = name1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    match arguments1 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context {
                        Some(e) => {
                            *ptr0
                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::__with_name1::AuthContext {
                                client_id: client_id4,
                                sub: sub4,
                                scopes: scopes4,
                                iss: iss4,
                                aud: aud4,
                                claims: claims4,
                                exp: exp4,
                                iat: iat4,
                                nbf: nbf4,
                                jwt: jwt4,
                            } = e;
                            match client_id4 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *ptr0
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr0
                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec6 = sub4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *ptr0
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr0
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                            let vec8 = scopes4;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr0
                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result8;
                            let vec9 = iss4;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *ptr0
                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr0
                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                            let vec11 = aud4;
                            let len11 = vec11.len();
                            let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec11.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result11 = if layout11.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout11);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec11.into_iter().enumerate() {
                                let base = result11
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec10 = e;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr0
                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result11;
                            let vec15 = claims4;
                            let len15 = vec15.len();
                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec15.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t12_0, t12_1) = e;
                                    let vec13 = t12_0;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = t12_1;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr0
                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result15;
                            *ptr0
                                .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(exp4);
                            match iat4 {
                                Some(e) => {
                                    *ptr0
                                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match nbf4 {
                                Some(e) => {
                                    *ptr0
                                        .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match jwt4 {
                                Some(e) => {
                                    *ptr0
                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec16 = e;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *ptr0
                                        .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *ptr0
                                        .add(64 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            cleanup_list
                                .extend_from_slice(
                                    &[
                                        (result8, layout8),
                                        (result11, layout11),
                                        (result15, layout15),
                                    ],
                                );
                        }
                        None => {
                            *ptr0
                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr17 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/tools@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "call-tool"]
                        fn wit_import18(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import18(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import18(ptr0, ptr17) };
                    let l19 = i32::from(*ptr17.add(0).cast::<u8>());
                    let result185 = match l19 {
                        0 => {
                            let e = {
                                let l20 = *ptr17
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l21 = *ptr17
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base164 = l20;
                                let len164 = l21;
                                let mut result164 = _rt::Vec::with_capacity(len164);
                                for i in 0..len164 {
                                    let base = base164
                                        .add(i * (48 + 18 * ::core::mem::size_of::<*const u8>()));
                                    let e164 = {
                                        let l22 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::__with_name0::ContentBlock as V163;
                                        let v163 = match l22 {
                                            0 => {
                                                let e163 = {
                                                    let l23 = *base.add(8).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len25 = l24;
                                                    let bytes25 = _rt::Vec::from_raw_parts(
                                                        l23.cast(),
                                                        len25,
                                                        len25,
                                                    );
                                                    let l26 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l30 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name0::TextContent {
                                                        text: _rt::string_lift(bytes25),
                                                        meta: match l26 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l27 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l28 = *base
                                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len29 = l28;
                                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                                        l27.cast(),
                                                                        len29,
                                                                        len29,
                                                                    );
                                                                    _rt::string_lift(bytes29)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l30 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l31 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l36 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l38 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::__with_name0::Annotations {
                                                                        audience: match l31 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l32 = *base
                                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l33 = *base
                                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base35 = l32;
                                                                                    let len35 = l33;
                                                                                    let mut result35 = _rt::Vec::with_capacity(len35);
                                                                                    for i in 0..len35 {
                                                                                        let base = base35.add(i * 1);
                                                                                        let e35 = {
                                                                                            let l34 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::__with_name0::Role::_lift(l34 as u8)
                                                                                        };
                                                                                        result35.push(e35);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base35, len35 * 1, 1);
                                                                                    result35
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l36 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l37 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l37
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l38 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l39 = *base
                                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l40 = *base
                                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len41 = l40;
                                                                                    let bytes41 = _rt::Vec::from_raw_parts(
                                                                                        l39.cast(),
                                                                                        len41,
                                                                                        len41,
                                                                                    );
                                                                                    _rt::string_lift(bytes41)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Text(e163)
                                            }
                                            1 => {
                                                let e163 = {
                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len44 = l43;
                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                        l42.cast(),
                                                        len44,
                                                        len44,
                                                    );
                                                    let l45 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    let l48 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l52 = i32::from(
                                                        *base
                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name0::ImageContent {
                                                        data: _rt::string_lift(bytes44),
                                                        mime_type: _rt::string_lift(bytes47),
                                                        meta: match l48 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l49 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l50 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len51 = l50;
                                                                    let bytes51 = _rt::Vec::from_raw_parts(
                                                                        l49.cast(),
                                                                        len51,
                                                                        len51,
                                                                    );
                                                                    _rt::string_lift(bytes51)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l52 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l53 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l58 = i32::from(
                                                                        *base
                                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l60 = i32::from(
                                                                        *base
                                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::__with_name0::Annotations {
                                                                        audience: match l53 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l54 = *base
                                                                                        .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l55 = *base
                                                                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base57 = l54;
                                                                                    let len57 = l55;
                                                                                    let mut result57 = _rt::Vec::with_capacity(len57);
                                                                                    for i in 0..len57 {
                                                                                        let base = base57.add(i * 1);
                                                                                        let e57 = {
                                                                                            let l56 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::__with_name0::Role::_lift(l56 as u8)
                                                                                        };
                                                                                        result57.push(e57);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base57, len57 * 1, 1);
                                                                                    result57
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l58 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l59 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l59
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l60 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l61 = *base
                                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l62 = *base
                                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len63 = l62;
                                                                                    let bytes63 = _rt::Vec::from_raw_parts(
                                                                                        l61.cast(),
                                                                                        len63,
                                                                                        len63,
                                                                                    );
                                                                                    _rt::string_lift(bytes63)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Image(e163)
                                            }
                                            2 => {
                                                let e163 = {
                                                    let l64 = *base.add(8).cast::<*mut u8>();
                                                    let l65 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len66 = l65;
                                                    let bytes66 = _rt::Vec::from_raw_parts(
                                                        l64.cast(),
                                                        len66,
                                                        len66,
                                                    );
                                                    let l67 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l68 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len69 = l68;
                                                    let bytes69 = _rt::Vec::from_raw_parts(
                                                        l67.cast(),
                                                        len69,
                                                        len69,
                                                    );
                                                    let l70 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name0::AudioContent {
                                                        data: _rt::string_lift(bytes66),
                                                        mime_type: _rt::string_lift(bytes69),
                                                        annotations: match l70 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l71 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l76 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l78 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::__with_name0::Annotations {
                                                                        audience: match l71 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l72 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l73 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base75 = l72;
                                                                                    let len75 = l73;
                                                                                    let mut result75 = _rt::Vec::with_capacity(len75);
                                                                                    for i in 0..len75 {
                                                                                        let base = base75.add(i * 1);
                                                                                        let e75 = {
                                                                                            let l74 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::__with_name0::Role::_lift(l74 as u8)
                                                                                        };
                                                                                        result75.push(e75);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                                                    result75
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l76 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l77 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l77
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l78 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l79 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l80 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len81 = l80;
                                                                                    let bytes81 = _rt::Vec::from_raw_parts(
                                                                                        l79.cast(),
                                                                                        len81,
                                                                                        len81,
                                                                                    );
                                                                                    _rt::string_lift(bytes81)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Audio(e163)
                                            }
                                            3 => {
                                                let e163 = {
                                                    let l82 = i32::from(*base.add(8).cast::<u8>());
                                                    let l86 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::__with_name0::ResourceContents as V115;
                                                    let v115 = match l86 {
                                                        0 => {
                                                            let e115 = {
                                                                let l87 = *base
                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l88 = *base
                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len89 = l88;
                                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                                    l87.cast(),
                                                                    len89,
                                                                    len89,
                                                                );
                                                                let l90 = i32::from(
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l94 = *base
                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l95 = *base
                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len96 = l95;
                                                                let bytes96 = _rt::Vec::from_raw_parts(
                                                                    l94.cast(),
                                                                    len96,
                                                                    len96,
                                                                );
                                                                let l97 = i32::from(
                                                                    *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::__with_name0::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes89),
                                                                    mime_type: match l90 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l91 = *base
                                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l92 = *base
                                                                                    .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len93 = l92;
                                                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                                                    l91.cast(),
                                                                                    len93,
                                                                                    len93,
                                                                                );
                                                                                _rt::string_lift(bytes93)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes96),
                                                                    meta: match l97 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l98 = *base
                                                                                    .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l99 = *base
                                                                                    .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len100 = l99;
                                                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                                                    l98.cast(),
                                                                                    len100,
                                                                                    len100,
                                                                                );
                                                                                _rt::string_lift(bytes100)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V115::Text(e115)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e115 = {
                                                                let l101 = *base
                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l102 = *base
                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len103 = l102;
                                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                                    l101.cast(),
                                                                    len103,
                                                                    len103,
                                                                );
                                                                let l104 = i32::from(
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l108 = *base
                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l109 = *base
                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len110 = l109;
                                                                let bytes110 = _rt::Vec::from_raw_parts(
                                                                    l108.cast(),
                                                                    len110,
                                                                    len110,
                                                                );
                                                                let l111 = i32::from(
                                                                    *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::__with_name0::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes103),
                                                                    mime_type: match l104 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l105 = *base
                                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l106 = *base
                                                                                    .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len107 = l106;
                                                                                let bytes107 = _rt::Vec::from_raw_parts(
                                                                                    l105.cast(),
                                                                                    len107,
                                                                                    len107,
                                                                                );
                                                                                _rt::string_lift(bytes107)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::string_lift(bytes110),
                                                                    meta: match l111 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l112 = *base
                                                                                    .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l113 = *base
                                                                                    .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len114 = l113;
                                                                                let bytes114 = _rt::Vec::from_raw_parts(
                                                                                    l112.cast(),
                                                                                    len114,
                                                                                    len114,
                                                                                );
                                                                                _rt::string_lift(bytes114)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V115::Blob(e115)
                                                        }
                                                    };
                                                    let l116 = i32::from(
                                                        *base
                                                            .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name0::EmbeddedResource {
                                                        meta: match l82 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l83 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l84 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len85 = l84;
                                                                    let bytes85 = _rt::Vec::from_raw_parts(
                                                                        l83.cast(),
                                                                        len85,
                                                                        len85,
                                                                    );
                                                                    _rt::string_lift(bytes85)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        resource: v115,
                                                        annotations: match l116 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l117 = i32::from(
                                                                        *base
                                                                            .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l122 = i32::from(
                                                                        *base
                                                                            .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l124 = i32::from(
                                                                        *base
                                                                            .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::__with_name0::Annotations {
                                                                        audience: match l117 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l118 = *base
                                                                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l119 = *base
                                                                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base121 = l118;
                                                                                    let len121 = l119;
                                                                                    let mut result121 = _rt::Vec::with_capacity(len121);
                                                                                    for i in 0..len121 {
                                                                                        let base = base121.add(i * 1);
                                                                                        let e121 = {
                                                                                            let l120 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::__with_name0::Role::_lift(l120 as u8)
                                                                                        };
                                                                                        result121.push(e121);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base121, len121 * 1, 1);
                                                                                    result121
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l122 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l123 = *base
                                                                                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l123
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l124 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l125 = *base
                                                                                        .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l126 = *base
                                                                                        .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len127 = l126;
                                                                                    let bytes127 = _rt::Vec::from_raw_parts(
                                                                                        l125.cast(),
                                                                                        len127,
                                                                                        len127,
                                                                                    );
                                                                                    _rt::string_lift(bytes127)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Resource(e163)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e163 = {
                                                    let l128 = *base.add(8).cast::<*mut u8>();
                                                    let l129 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len130 = l129;
                                                    let bytes130 = _rt::Vec::from_raw_parts(
                                                        l128.cast(),
                                                        len130,
                                                        len130,
                                                    );
                                                    let l131 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l132 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len133 = l132;
                                                    let bytes133 = _rt::Vec::from_raw_parts(
                                                        l131.cast(),
                                                        len133,
                                                        len133,
                                                    );
                                                    let l134 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l138 = i32::from(
                                                        *base
                                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l142 = i32::from(
                                                        *base
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l146 = i32::from(
                                                        *base
                                                            .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l148 = i32::from(
                                                        *base
                                                            .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name0::RawResource {
                                                        uri: _rt::string_lift(bytes130),
                                                        name: _rt::string_lift(bytes133),
                                                        title: match l134 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l135 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l136 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len137 = l136;
                                                                    let bytes137 = _rt::Vec::from_raw_parts(
                                                                        l135.cast(),
                                                                        len137,
                                                                        len137,
                                                                    );
                                                                    _rt::string_lift(bytes137)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        description: match l138 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l139 = *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l140 = *base
                                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len141 = l140;
                                                                    let bytes141 = _rt::Vec::from_raw_parts(
                                                                        l139.cast(),
                                                                        len141,
                                                                        len141,
                                                                    );
                                                                    _rt::string_lift(bytes141)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l142 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l143 = *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l144 = *base
                                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len145 = l144;
                                                                    let bytes145 = _rt::Vec::from_raw_parts(
                                                                        l143.cast(),
                                                                        len145,
                                                                        len145,
                                                                    );
                                                                    _rt::string_lift(bytes145)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l146 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l147 = *base
                                                                        .add(12 + 13 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    l147 as u32
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        icons: match l148 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l149 = *base
                                                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l150 = *base
                                                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base162 = l149;
                                                                    let len162 = l150;
                                                                    let mut result162 = _rt::Vec::with_capacity(len162);
                                                                    for i in 0..len162 {
                                                                        let base = base162
                                                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                                        let e162 = {
                                                                            let l151 = *base.add(0).cast::<*mut u8>();
                                                                            let l152 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len153 = l152;
                                                                            let bytes153 = _rt::Vec::from_raw_parts(
                                                                                l151.cast(),
                                                                                len153,
                                                                                len153,
                                                                            );
                                                                            let l154 = i32::from(
                                                                                *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l158 = i32::from(
                                                                                *base
                                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            super::super::super::__with_name0::Icon {
                                                                                src: _rt::string_lift(bytes153),
                                                                                mime_type: match l154 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l155 = *base
                                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l156 = *base
                                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len157 = l156;
                                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                                l155.cast(),
                                                                                                len157,
                                                                                                len157,
                                                                                            );
                                                                                            _rt::string_lift(bytes157)
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                                sizes: match l158 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l159 = *base
                                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l160 = *base
                                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len161 = l160;
                                                                                            let bytes161 = _rt::Vec::from_raw_parts(
                                                                                                l159.cast(),
                                                                                                len161,
                                                                                                len161,
                                                                                            );
                                                                                            _rt::string_lift(bytes161)
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result162.push(e162);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base162,
                                                                        len162 * (8 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result162
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::ResourceLink(e163)
                                            }
                                        };
                                        v163
                                    };
                                    result164.push(e164);
                                }
                                _rt::cabi_dealloc(
                                    base164,
                                    len164 * (48 + 18 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l165 = i32::from(
                                    *ptr17
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l169 = i32::from(
                                    *ptr17
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l171 = i32::from(
                                    *ptr17
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name2::CallToolResult {
                                    content: result164,
                                    structured_content: match l165 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l166 = *ptr17
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l167 = *ptr17
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );
                                                _rt::string_lift(bytes168)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    is_error: match l169 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l170 = i32::from(
                                                    *ptr17
                                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l170 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l171 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l172 = *ptr17
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l173 = *ptr17
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len174 = l173;
                                                let bytes174 = _rt::Vec::from_raw_parts(
                                                    l172.cast(),
                                                    len174,
                                                    len174,
                                                );
                                                _rt::string_lift(bytes174)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l175 = i32::from(
                                    *ptr17.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::__with_name0::ErrorCode as V177;
                                let v177 = match l175 {
                                    0 => V177::ParseError,
                                    1 => V177::InvalidRequest,
                                    2 => V177::MethodNotFound,
                                    3 => V177::InvalidParams,
                                    4 => V177::InternalError,
                                    5 => V177::ResourceNotFound,
                                    6 => V177::ToolNotFound,
                                    7 => V177::PromptNotFound,
                                    8 => V177::Unauthorized,
                                    9 => V177::RateLimited,
                                    10 => V177::Timeout,
                                    11 => V177::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e177 = {
                                            let l176 = *ptr17
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l176
                                        };
                                        V177::CustomCode(e177)
                                    }
                                };
                                let l178 = *ptr17
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l179 = *ptr17
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len180 = l179;
                                let bytes180 = _rt::Vec::from_raw_parts(
                                    l178.cast(),
                                    len180,
                                    len180,
                                );
                                let l181 = i32::from(
                                    *ptr17
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name0::McpError {
                                    code: v177,
                                    message: _rt::string_lift(bytes180),
                                    data: match l181 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l182 = *ptr17
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l183 = *ptr17
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len184 = l183;
                                                let bytes184 = _rt::Vec::from_raw_parts(
                                                    l182.cast(),
                                                    len184,
                                                    len184,
                                                );
                                                _rt::string_lift(bytes184)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result185
                }
            }
        }
        /// A lifecycle for client-server connections that ensures proper capability negotiation and state management.
        /// Initialization: Capability negotiation and protocol version agreement
        /// Operation: Normal protocol communication
        /// Shutdown: Graceful termination of the connection
        ///
        /// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod lifecycle {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::__with_name0::McpError;
            pub type InitializeRequest = super::super::super::__with_name3::InitializeRequest;
            pub type InitializeResult = super::super::super::__with_name3::InitializeResult;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle session initialization
            /// Implementations should declare their capabilities here
            pub fn initialize(
                request: &InitializeRequest,
            ) -> Result<InitializeResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 29 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 29 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::__with_name3::InitializeRequest {
                        protocol_version: protocol_version1,
                        capabilities: capabilities1,
                        client_info: client_info1,
                    } = request;
                    let vec2 = protocol_version1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    let super::super::super::__with_name3::ClientCapabilities {
                        experimental: experimental3,
                        roots: roots3,
                        sampling: sampling3,
                        elicitation: elicitation3,
                    } = capabilities1;
                    match experimental3 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match roots3 {
                        Some(e) => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::__with_name3::RootsCapability {
                                list_changed: list_changed5,
                            } = e;
                            match list_changed5 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match sampling3 {
                        Some(e) => {
                            *ptr0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = e;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *ptr0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr0
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match elicitation3 {
                        Some(e) => {
                            *ptr0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::__with_name3::ElicitationCapability {
                                schema_validation: schema_validation7,
                            } = e;
                            match schema_validation7 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let super::super::super::__with_name3::Implementation {
                        name: name8,
                        title: title8,
                        version: version8,
                        website_url: website_url8,
                        icons: icons8,
                    } = client_info1;
                    let vec9 = name8;
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    *ptr0
                        .add(11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len9;
                    *ptr0
                        .add(10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr9.cast_mut();
                    match title8 {
                        Some(e) => {
                            *ptr0
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec10 = e;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len10;
                            *ptr0
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec11 = version8;
                    let ptr11 = vec11.as_ptr().cast::<u8>();
                    let len11 = vec11.len();
                    *ptr0
                        .add(16 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len11;
                    *ptr0
                        .add(15 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr11.cast_mut();
                    match website_url8 {
                        Some(e) => {
                            *ptr0
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec12 = e;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            *ptr0
                                .add(19 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len12;
                            *ptr0
                                .add(18 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr12.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match icons8 {
                        Some(e) => {
                            *ptr0
                                .add(20 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec17 = e;
                            let len17 = vec17.len();
                            let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec17.len() * (8 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result17 = if layout17.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout17);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec17.into_iter().enumerate() {
                                let base = result17
                                    .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::__with_name0::Icon {
                                        src: src13,
                                        mime_type: mime_type13,
                                        sizes: sizes13,
                                    } = e;
                                    let vec14 = src13;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    match mime_type13 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = e;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match sizes13 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = e;
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr0
                                .add(22 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len17;
                            *ptr0
                                .add(21 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result17;
                            cleanup_list.extend_from_slice(&[(result17, layout17)]);
                        }
                        None => {
                            *ptr0
                                .add(20 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/lifecycle@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "initialize"]
                        fn wit_import19(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import19(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import19(ptr0, ptr18) };
                    let l20 = i32::from(*ptr18.add(0).cast::<u8>());
                    let result90 = match l20 {
                        0 => {
                            let e = {
                                let l21 = *ptr18
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr18
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(
                                    l21.cast(),
                                    len23,
                                    len23,
                                );
                                let l24 = i32::from(
                                    *ptr18
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l28 = i32::from(
                                    *ptr18
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l32 = i32::from(
                                    *ptr18
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l36 = i32::from(
                                    *ptr18
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l39 = i32::from(
                                    *ptr18
                                        .add(3 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l44 = i32::from(
                                    *ptr18
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l47 = *ptr18
                                    .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l48 = *ptr18
                                    .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len49 = l48;
                                let bytes49 = _rt::Vec::from_raw_parts(
                                    l47.cast(),
                                    len49,
                                    len49,
                                );
                                let l50 = i32::from(
                                    *ptr18
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l54 = *ptr18
                                    .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l55 = *ptr18
                                    .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len56 = l55;
                                let bytes56 = _rt::Vec::from_raw_parts(
                                    l54.cast(),
                                    len56,
                                    len56,
                                );
                                let l57 = i32::from(
                                    *ptr18
                                        .add(8 + 20 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l61 = i32::from(
                                    *ptr18
                                        .add(8 + 23 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l76 = i32::from(
                                    *ptr18
                                        .add(8 + 26 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name3::InitializeResult {
                                    protocol_version: _rt::string_lift(bytes23),
                                    capabilities: super::super::super::__with_name3::ServerCapabilities {
                                        experimental: match l24 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l25 = *ptr18
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *ptr18
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len27 = l26;
                                                    let bytes27 = _rt::Vec::from_raw_parts(
                                                        l25.cast(),
                                                        len27,
                                                        len27,
                                                    );
                                                    _rt::string_lift(bytes27)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        logging: match l28 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l29 = *ptr18
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l30 = *ptr18
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len31 = l30;
                                                    let bytes31 = _rt::Vec::from_raw_parts(
                                                        l29.cast(),
                                                        len31,
                                                        len31,
                                                    );
                                                    _rt::string_lift(bytes31)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        completions: match l32 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l33 = *ptr18
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *ptr18
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len35 = l34;
                                                    let bytes35 = _rt::Vec::from_raw_parts(
                                                        l33.cast(),
                                                        len35,
                                                        len35,
                                                    );
                                                    _rt::string_lift(bytes35)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        prompts: match l36 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l37 = i32::from(
                                                        *ptr18
                                                            .add(1 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name3::PromptsCapability {
                                                        list_changed: match l37 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l38 = i32::from(
                                                                        *ptr18
                                                                            .add(2 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l38 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        resources: match l39 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l40 = i32::from(
                                                        *ptr18
                                                            .add(4 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l42 = i32::from(
                                                        *ptr18
                                                            .add(6 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name3::ResourcesCapability {
                                                        subscribe: match l40 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(
                                                                        *ptr18
                                                                            .add(5 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        list_changed: match l42 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l43 = i32::from(
                                                                        *ptr18
                                                                            .add(7 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l43 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tools: match l44 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l45 = i32::from(
                                                        *ptr18
                                                            .add(9 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::__with_name3::ToolsCapability {
                                                        list_changed: match l45 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l46 = i32::from(
                                                                        *ptr18
                                                                            .add(10 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l46 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    server_info: super::super::super::__with_name3::Implementation {
                                        name: _rt::string_lift(bytes49),
                                        title: match l50 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l51 = *ptr18
                                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l52 = *ptr18
                                                        .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len53 = l52;
                                                    let bytes53 = _rt::Vec::from_raw_parts(
                                                        l51.cast(),
                                                        len53,
                                                        len53,
                                                    );
                                                    _rt::string_lift(bytes53)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        version: _rt::string_lift(bytes56),
                                        website_url: match l57 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l58 = *ptr18
                                                        .add(8 + 21 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l59 = *ptr18
                                                        .add(8 + 22 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len60 = l59;
                                                    let bytes60 = _rt::Vec::from_raw_parts(
                                                        l58.cast(),
                                                        len60,
                                                        len60,
                                                    );
                                                    _rt::string_lift(bytes60)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        icons: match l61 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l62 = *ptr18
                                                        .add(8 + 24 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l63 = *ptr18
                                                        .add(8 + 25 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base75 = l62;
                                                    let len75 = l63;
                                                    let mut result75 = _rt::Vec::with_capacity(len75);
                                                    for i in 0..len75 {
                                                        let base = base75
                                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                        let e75 = {
                                                            let l64 = *base.add(0).cast::<*mut u8>();
                                                            let l65 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len66 = l65;
                                                            let bytes66 = _rt::Vec::from_raw_parts(
                                                                l64.cast(),
                                                                len66,
                                                                len66,
                                                            );
                                                            let l67 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l71 = i32::from(
                                                                *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::__with_name0::Icon {
                                                                src: _rt::string_lift(bytes66),
                                                                mime_type: match l67 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l68 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l69 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len70 = l69;
                                                                            let bytes70 = _rt::Vec::from_raw_parts(
                                                                                l68.cast(),
                                                                                len70,
                                                                                len70,
                                                                            );
                                                                            _rt::string_lift(bytes70)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                sizes: match l71 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l72 = *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l73 = *base
                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len74 = l73;
                                                                            let bytes74 = _rt::Vec::from_raw_parts(
                                                                                l72.cast(),
                                                                                len74,
                                                                                len74,
                                                                            );
                                                                            _rt::string_lift(bytes74)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        result75.push(e75);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base75,
                                                        len75 * (8 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result75
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    instructions: match l76 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l77 = *ptr18
                                                    .add(8 + 27 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l78 = *ptr18
                                                    .add(8 + 28 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len79 = l78;
                                                let bytes79 = _rt::Vec::from_raw_parts(
                                                    l77.cast(),
                                                    len79,
                                                    len79,
                                                );
                                                _rt::string_lift(bytes79)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l80 = i32::from(
                                    *ptr18.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::__with_name0::ErrorCode as V82;
                                let v82 = match l80 {
                                    0 => V82::ParseError,
                                    1 => V82::InvalidRequest,
                                    2 => V82::MethodNotFound,
                                    3 => V82::InvalidParams,
                                    4 => V82::InternalError,
                                    5 => V82::ResourceNotFound,
                                    6 => V82::ToolNotFound,
                                    7 => V82::PromptNotFound,
                                    8 => V82::Unauthorized,
                                    9 => V82::RateLimited,
                                    10 => V82::Timeout,
                                    11 => V82::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e82 = {
                                            let l81 = *ptr18
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l81
                                        };
                                        V82::CustomCode(e82)
                                    }
                                };
                                let l83 = *ptr18
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l84 = *ptr18
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len85 = l84;
                                let bytes85 = _rt::Vec::from_raw_parts(
                                    l83.cast(),
                                    len85,
                                    len85,
                                );
                                let l86 = i32::from(
                                    *ptr18
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name0::McpError {
                                    code: v82,
                                    message: _rt::string_lift(bytes85),
                                    data: match l86 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l87 = *ptr18
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l88 = *ptr18
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len89 = l88;
                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                    l87.cast(),
                                                    len89,
                                                    len89,
                                                );
                                                _rt::string_lift(bytes89)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result90
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Handle initialization complete notification
            pub fn client_initialized() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/lifecycle@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "client-initialized"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::__with_name0::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name0::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Handle shutdown request
            pub fn shutdown() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/lifecycle@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::__with_name0::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name0::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Authorization capabilities are provided at the transport level, enabling MCP clients to make requests to restricted MCP servers on behalf of resource owners.
        ///
        /// https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod authorization {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ProviderAuthConfig = super::super::super::__with_name1::ProviderAuthConfig;
            #[allow(unused_unsafe, clippy::all)]
            /// Get provider's auth configuration
            /// The transport should enforce authorization
            pub fn get_auth_config() -> Option<ProviderAuthConfig> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 17 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 17
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/authorization@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "get-auth-config"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result28 = match l2 {
                        0 => None,
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                let l6 = *ptr0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base11 = l6;
                                let len11 = l7;
                                let mut result11 = _rt::Vec::with_capacity(len11);
                                for i in 0..len11 {
                                    let base = base11
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e11 = {
                                        let l8 = *base.add(0).cast::<*mut u8>();
                                        let l9 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        _rt::string_lift(bytes10)
                                    };
                                    result11.push(e11);
                                }
                                _rt::cabi_dealloc(
                                    base11,
                                    len11 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l12 = *ptr0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len14 = l13;
                                let bytes14 = _rt::Vec::from_raw_parts(
                                    l12.cast(),
                                    len14,
                                    len14,
                                );
                                let l15 = i32::from(
                                    *ptr0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l16 = i32::from(
                                    *ptr0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l20 = i32::from(
                                    *ptr0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l24 = i32::from(
                                    *ptr0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::__with_name1::ProviderAuthConfig {
                                    expected_issuer: _rt::string_lift(bytes5),
                                    expected_audiences: result11,
                                    jwks_uri: _rt::string_lift(bytes14),
                                    pass_jwt: _rt::bool_lift(l15 as u8),
                                    expected_subject: match l16 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l17 = *ptr0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr0
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    policy: match l20 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l21 = *ptr0
                                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l22 = *ptr0
                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    policy_data: match l24 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l25 = *ptr0
                                                    .add(15 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l26 = *ptr0
                                                    .add(16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result28
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get cached JWKS for a given URI (optional - return none if not cached or not implemented)
            /// Allows providers to implement JWKS caching via WASI-KV or other persistence mechanisms
            /// The transport will call this before fetching from jwks-uri to check for cached keys
            pub fn jwks_cache_get(jwks_uri: &str) -> Option<_rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = jwks_uri;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/authorization@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "jwks-cache-get"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Cache JWKS for a given URI (optional - no-op if caching not implemented)
            /// The transport calls this after successfully fetching JWKS from jwks-uri
            /// Providers can implement caching via WASI-KV or other persistence mechanisms
            /// The jwks parameter contains the raw JWKS JSON string to cache
            pub fn jwks_cache_set(jwks_uri: &str, jwks: &str) -> () {
                unsafe {
                    let vec0 = jwks_uri;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = jwks;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:transport/authorization@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "jwks-cache-set"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1) };
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:transport@0.2.0:tools-transport:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3913] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc3\x1d\x01A\x02\x01\
A\x1c\x01B:\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajs\
on-value\x03\0\x02\x01s\x04\0\x0bjson-object\x03\0\x04\x01s\x04\0\x0bjson-schema\
\x03\0\x06\x01o\x02ss\x01p\x08\x04\0\x0bmeta-fields\x03\0\x09\x01ks\x01r\x03\x03\
srcs\x09mime-type\x0b\x05sizes\x0b\x04\0\x04icon\x03\0\x0c\x01p\x01\x01k\x0e\x01\
ku\x01r\x03\x08audience\x0f\x08priority\x10\x0dlast-modified\x0b\x04\0\x0bannota\
tions\x03\0\x11\x01k\x05\x01k\x12\x01r\x03\x04texts\x04meta\x13\x0bannotations\x14\
\x04\0\x0ctext-content\x03\0\x15\x01r\x04\x04datas\x09mime-types\x04meta\x13\x0b\
annotations\x14\x04\0\x0dimage-content\x03\0\x17\x01r\x03\x04datas\x09mime-types\
\x0bannotations\x14\x04\0\x0daudio-content\x03\0\x19\x01ky\x01p\x0d\x01k\x1c\x01\
r\x07\x03uris\x04names\x05title\x0b\x0bdescription\x0b\x09mime-type\x0b\x04size\x1b\
\x05icons\x1d\x04\0\x0craw-resource\x03\0\x1e\x01r\x04\x03uris\x09mime-type\x0b\x04\
texts\x04meta\x13\x04\0\x16text-resource-contents\x03\0\x20\x01r\x04\x03uris\x09\
mime-type\x0b\x04blobs\x04meta\x13\x04\0\x16blob-resource-contents\x03\0\"\x01q\x02\
\x04text\x01!\0\x04blob\x01#\0\x04\0\x11resource-contents\x03\0$\x01r\x03\x04met\
a\x13\x08resource%\x0bannotations\x14\x04\0\x11embedded-resource\x03\0&\x01q\x05\
\x04text\x01\x16\0\x05image\x01\x18\0\x05audio\x01\x1a\0\x08resource\x01'\0\x0dr\
esource-link\x01\x1f\0\x04\0\x0dcontent-block\x03\0(\x01q\x0d\x0bparse-error\0\0\
\x0finvalid-request\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einterna\
l-error\0\0\x12resource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\
\0\x0cunauthorized\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcu\
stom-code\x01z\0\x04\0\x0aerror-code\x03\0*\x01r\x03\x04code+\x07messages\x04dat\
a\x0b\x04\0\x09mcp-error\x03\0,\x01s\x04\0\x0eprogress-token\x03\0.\x01q\x02\x03\
str\x01s\0\x03num\x01x\0\x04\0\x0arequest-id\x03\00\x01m\x03\x04user\x09assistan\
t\x06system\x04\0\x0cmessage-role\x03\02\x01r\x01\x04name\x0b\x04\0\x0amodel-hin\
t\x03\04\x01p5\x01k6\x01r\x04\x05hints7\x0dcost-priority\x10\x0espeed-priority\x10\
\x15intelligence-priority\x10\x04\0\x11model-preferences\x03\08\x03\0\x1awasmcp:\
mcp/mcp-types@0.2.0\x05\0\x02\x03\0\0\x0bmeta-fields\x01B\x09\x02\x03\x02\x01\x01\
\x04\0\x0bmeta-fields\x03\0\0\x01ps\x01ks\x01r\x07\x0fexpected-issuers\x12expect\
ed-audiences\x02\x08jwks-uris\x08pass-jwt\x7f\x10expected-subject\x03\x06policy\x03\
\x0bpolicy-data\x03\x04\0\x14provider-auth-config\x03\0\x04\x01kw\x01r\x0a\x09cl\
ient-id\x03\x03subs\x06scopes\x02\x03isss\x03aud\x02\x06claims\x01\x03expw\x03ia\
t\x06\x03nbf\x06\x03jwt\x03\x04\0\x0cauth-context\x03\0\x07\x03\0$wasmcp:mcp/aut\
horization-types@0.2.0\x05\x02\x02\x03\0\0\x0dcontent-block\x02\x03\0\0\x0ajson-\
value\x02\x03\0\0\x0bjson-object\x02\x03\0\0\x04icon\x01B\x1d\x02\x03\x02\x01\x03\
\x04\0\x0dcontent-block\x03\0\0\x02\x03\x02\x01\x04\x04\0\x0ajson-value\x03\0\x02\
\x02\x03\x02\x01\x05\x04\0\x0bjson-object\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x04\
icon\x03\0\x06\x01ks\x01k\x7f\x01r\x05\x05title\x08\x0eread-only-hint\x09\x10des\
tructive-hint\x09\x0fidempotent-hint\x09\x0fopen-world-hint\x09\x04\0\x10tool-an\
notations\x03\0\x0a\x01k\x05\x01k\x0b\x01p\x07\x01k\x0e\x01r\x07\x04names\x05tit\
le\x08\x0bdescription\x08\x0cinput-schema\x05\x0doutput-schema\x0c\x0bannotation\
s\x0d\x05icons\x0f\x04\0\x04tool\x03\0\x10\x01r\x02\x04names\x09arguments\x0c\x04\
\0\x11call-tool-request\x03\0\x12\x01p\x01\x01k\x03\x01r\x04\x07content\x14\x12s\
tructured-content\x15\x08is-error\x09\x04meta\x0c\x04\0\x10call-tool-result\x03\0\
\x16\x01r\x01\x06cursor\x08\x04\0\x12list-tools-request\x03\0\x18\x01p\x11\x01r\x02\
\x05tools\x1a\x0bnext-cursor\x08\x04\0\x11list-tools-result\x03\0\x1b\x03\0\x1cw\
asmcp:mcp/tools-types@0.2.0\x05\x07\x02\x03\0\0\x09mcp-error\x02\x03\0\x01\x0cau\
th-context\x02\x03\0\x02\x12list-tools-request\x02\x03\0\x02\x11list-tools-resul\
t\x02\x03\0\x02\x11call-tool-request\x02\x03\0\x02\x10call-tool-result\x01B\x13\x02\
\x03\x02\x01\x08\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0cauth-co\
ntext\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x12list-tools-request\x03\0\x04\x02\x03\
\x02\x01\x0b\x04\0\x11list-tools-result\x03\0\x06\x02\x03\x02\x01\x0c\x04\0\x11c\
all-tool-request\x03\0\x08\x02\x03\x02\x01\x0d\x04\0\x10call-tool-result\x03\0\x0a\
\x01j\x01\x07\x01\x01\x01@\x01\x07request\x05\0\x0c\x04\0\x0alist-tools\x01\x0d\x01\
k\x03\x01j\x01\x0b\x01\x01\x01@\x02\x07request\x09\x07context\x0e\0\x0f\x04\0\x09\
call-tool\x01\x10\x03\0\x1cwasmcp:transport/tools@0.2.0\x05\x0e\x01B$\x02\x03\x02\
\x01\x06\x04\0\x04icon\x03\0\0\x02\x03\x02\x01\x05\x04\0\x0bjson-object\x03\0\x02\
\x01s\x04\0\x10protocol-version\x03\0\x04\x01ks\x01p\x01\x01k\x07\x01r\x05\x04na\
mes\x05title\x06\x07versions\x0bwebsite-url\x06\x05icons\x08\x04\0\x0eimplementa\
tion\x03\0\x09\x01k\x7f\x01r\x01\x0clist-changed\x0b\x04\0\x10roots-capability\x03\
\0\x0c\x01r\x01\x0clist-changed\x0b\x04\0\x12prompts-capability\x03\0\x0e\x01r\x02\
\x09subscribe\x0b\x0clist-changed\x0b\x04\0\x14resources-capability\x03\0\x10\x01\
r\x01\x0clist-changed\x0b\x04\0\x10tools-capability\x03\0\x12\x01r\x01\x11schema\
-validation\x0b\x04\0\x16elicitation-capability\x03\0\x14\x01k\x03\x01k\x0d\x01k\
\x15\x01r\x04\x0cexperimental\x16\x05roots\x17\x08sampling\x16\x0belicitation\x18\
\x04\0\x13client-capabilities\x03\0\x19\x01k\x0f\x01k\x11\x01k\x13\x01r\x06\x0ce\
xperimental\x16\x07logging\x16\x0bcompletions\x16\x07prompts\x1b\x09resources\x1c\
\x05tools\x1d\x04\0\x13server-capabilities\x03\0\x1e\x01r\x03\x10protocol-versio\
n\x05\x0ccapabilities\x1a\x0bclient-info\x0a\x04\0\x12initialize-request\x03\0\x20\
\x01r\x04\x10protocol-version\x05\x0ccapabilities\x1f\x0bserver-info\x0a\x0cinst\
ructions\x06\x04\0\x11initialize-result\x03\0\"\x03\0\x20wasmcp:mcp/lifecycle-ty\
pes@0.2.0\x05\x0f\x02\x03\0\x04\x12initialize-request\x02\x03\0\x04\x11initializ\
e-result\x01B\x0d\x02\x03\x02\x01\x08\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\
\x10\x04\0\x12initialize-request\x03\0\x02\x02\x03\x02\x01\x11\x04\0\x11initiali\
ze-result\x03\0\x04\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x06\x04\0\x0a\
initialize\x01\x07\x01j\0\x01\x01\x01@\0\0\x08\x04\0\x12client-initialized\x01\x09\
\x04\0\x08shutdown\x01\x09\x03\0\x20wasmcp:transport/lifecycle@0.2.0\x05\x12\x02\
\x03\0\x01\x14provider-auth-config\x01B\x0a\x02\x03\x02\x01\x13\x04\0\x14provide\
r-auth-config\x03\0\0\x01k\x01\x01@\0\0\x02\x04\0\x0fget-auth-config\x01\x03\x01\
ks\x01@\x01\x08jwks-uris\0\x04\x04\0\x0ejwks-cache-get\x01\x05\x01@\x02\x08jwks-\
uris\x04jwkss\x01\0\x04\0\x0ejwks-cache-set\x01\x06\x03\0$wasmcp:transport/autho\
rization@0.2.0\x05\x14\x04\0&wasmcp:transport/tools-transport@0.2.0\x04\0\x0b\x15\
\x01\0\x0ftools-transport\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit\
-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
