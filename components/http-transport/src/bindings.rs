// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["Clone"]
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
        }
    }
    pub mod otel {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tracing {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            /// The trace that this `span-context` belongs to.
            ///
            /// 16 bytes encoded as a hexadecimal string.
            pub type TraceId = _rt::String;
            /// The id of this `span-context`.
            ///
            /// 8 bytes encoded as a hexadecimal string.
            pub type SpanId = _rt::String;
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Flags that can be set on a `span-context`."]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct TraceFlags : u8 { #[doc =
                " Whether the `span` should be sampled or not."] const SAMPLED = 1 << 0;
                }
            }
            /// Carries system-specific configuration data, represented as a list of key-value pairs. `trace-state` allows multiple tracing systems to participate in the same trace.
            ///
            /// If any invalid keys or values are provided then the `trace-state` will be treated as an empty list.
            pub type TraceState = _rt::Vec<(_rt::String, _rt::String)>;
            /// Identifying trace information about a span that can be serialized and propagated.
            #[derive(Clone)]
            pub struct SpanContext {
                /// The `trace-id` for this `span-context`.
                pub trace_id: TraceId,
                /// The `span-id` for this `span-context`.
                pub span_id: SpanId,
                /// The `trace-flags` for this `span-context`.
                pub trace_flags: TraceFlags,
                /// Whether this `span-context` was propagated from a remote parent.
                pub is_remote: bool,
                /// The `trace-state` for this `span-context`.
                pub trace_state: TraceState,
            }
            impl ::core::fmt::Debug for SpanContext {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SpanContext")
                        .field("trace-id", &self.trace_id)
                        .field("span-id", &self.span_id)
                        .field("trace-flags", &self.trace_flags)
                        .field("is-remote", &self.is_remote)
                        .field("trace-state", &self.trace_state)
                        .finish()
                }
            }
            /// Describes the relationship between the Span, its parents, and its children in a trace.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum SpanKind {
                /// Indicates that the span describes a request to some remote service. This span is usually the parent of a remote server span and does not end until the response is received.
                Client,
                /// Indicates that the span covers server-side handling of a synchronous RPC or other remote request. This span is often the child of a remote client span that was expected to wait for a response.
                Server,
                /// Indicates that the span describes the initiators of an asynchronous request. This parent span will often end before the corresponding child consumer span, possibly even before the child span starts. In messaging scenarios with batching, tracing individual messages requires a new producer span per message to be created.
                Producer,
                /// Indicates that the span describes a child of an asynchronous consumer request.
                Consumer,
                /// Default value. Indicates that the span represents an internal operation within an application, as opposed to an operations with remote parents or children.
                Internal,
            }
            impl ::core::fmt::Debug for SpanKind {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SpanKind::Client => f.debug_tuple("SpanKind::Client").finish(),
                        SpanKind::Server => f.debug_tuple("SpanKind::Server").finish(),
                        SpanKind::Producer => {
                            f.debug_tuple("SpanKind::Producer").finish()
                        }
                        SpanKind::Consumer => {
                            f.debug_tuple("SpanKind::Consumer").finish()
                        }
                        SpanKind::Internal => {
                            f.debug_tuple("SpanKind::Internal").finish()
                        }
                    }
                }
            }
            impl SpanKind {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> SpanKind {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => SpanKind::Client,
                        1 => SpanKind::Server,
                        2 => SpanKind::Producer,
                        3 => SpanKind::Consumer,
                        4 => SpanKind::Internal,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// The key part of attribute `key-value` pairs.
            pub type Key = _rt::String;
            /// The value part of attribute `key-value` pairs.
            #[derive(Clone)]
            pub enum Value {
                /// A string value.
                String(_rt::String),
                /// A boolean value.
                Bool(bool),
                /// A double precision floating point value.
                F64(f64),
                /// A signed 64 bit integer value.
                S64(i64),
                /// A homogeneous array of string values.
                StringArray(_rt::Vec<_rt::String>),
                /// A homogeneous array of boolean values.
                BoolArray(_rt::Vec<bool>),
                /// A homogeneous array of double precision floating point values.
                F64Array(_rt::Vec<f64>),
                /// A homogeneous array of 64 bit integer values.
                S64Array(_rt::Vec<i64>),
            }
            impl ::core::fmt::Debug for Value {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Value::String(e) => {
                            f.debug_tuple("Value::String").field(e).finish()
                        }
                        Value::Bool(e) => f.debug_tuple("Value::Bool").field(e).finish(),
                        Value::F64(e) => f.debug_tuple("Value::F64").field(e).finish(),
                        Value::S64(e) => f.debug_tuple("Value::S64").field(e).finish(),
                        Value::StringArray(e) => {
                            f.debug_tuple("Value::StringArray").field(e).finish()
                        }
                        Value::BoolArray(e) => {
                            f.debug_tuple("Value::BoolArray").field(e).finish()
                        }
                        Value::F64Array(e) => {
                            f.debug_tuple("Value::F64Array").field(e).finish()
                        }
                        Value::S64Array(e) => {
                            f.debug_tuple("Value::S64Array").field(e).finish()
                        }
                    }
                }
            }
            /// A key-value pair describing an attribute.
            #[derive(Clone)]
            pub struct KeyValue {
                /// The attribute name.
                pub key: Key,
                /// The attribute value.
                pub value: Value,
            }
            impl ::core::fmt::Debug for KeyValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("KeyValue")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// An event describing a specific moment in time on a span and associated attributes.
            #[derive(Clone)]
            pub struct Event {
                /// Event name.
                pub name: _rt::String,
                /// Event time.
                pub time: Datetime,
                /// Event attributes.
                pub attributes: _rt::Vec<KeyValue>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("name", &self.name)
                        .field("time", &self.time)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            /// Describes a relationship to another `span`.
            #[derive(Clone)]
            pub struct Link {
                /// Denotes which `span` to link to.
                pub span_context: SpanContext,
                /// Attributes describing the link.
                pub attributes: _rt::Vec<KeyValue>,
            }
            impl ::core::fmt::Debug for Link {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Link")
                        .field("span-context", &self.span_context)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            /// The `status` of a `span`.
            #[derive(Clone)]
            pub enum Status {
                /// The default status.
                Unset,
                /// The operation has been validated by an Application developer or Operator to have completed successfully.
                Ok,
                /// The operation contains an error with a description.
                Error(_rt::String),
            }
            impl ::core::fmt::Debug for Status {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Status::Unset => f.debug_tuple("Status::Unset").finish(),
                        Status::Ok => f.debug_tuple("Status::Ok").finish(),
                        Status::Error(e) => {
                            f.debug_tuple("Status::Error").field(e).finish()
                        }
                    }
                }
            }
            /// Describes the instrumentation scope that produced a span.
            #[derive(Clone)]
            pub struct InstrumentationScope {
                /// Name of the instrumentation scope.
                pub name: _rt::String,
                /// The library version.
                pub version: Option<_rt::String>,
                /// Schema URL used by this library.
                /// https://github.com/open-telemetry/opentelemetry-specification/blob/v1.9.0/specification/schemas/overview.md#schema-url
                pub schema_url: Option<_rt::String>,
                /// Specifies the instrumentation scope attributes to associate with emitted telemetry.
                pub attributes: _rt::Vec<KeyValue>,
            }
            impl ::core::fmt::Debug for InstrumentationScope {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InstrumentationScope")
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("schema-url", &self.schema_url)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            /// The data associated with a span.
            #[derive(Clone)]
            pub struct SpanData {
                /// Span context.
                pub span_context: SpanContext,
                /// Span parent id.
                pub parent_span_id: _rt::String,
                /// Span kind.
                pub span_kind: SpanKind,
                /// Span name.
                pub name: _rt::String,
                /// Span start time.
                pub start_time: Datetime,
                /// Span end time.
                pub end_time: Datetime,
                /// Span attributes.
                pub attributes: _rt::Vec<KeyValue>,
                /// Span events.
                pub events: _rt::Vec<Event>,
                /// Span Links.
                pub links: _rt::Vec<Link>,
                /// Span status.
                pub status: Status,
                /// Instrumentation scope that produced this span.
                pub instrumentation_scope: InstrumentationScope,
                /// Number of attributes dropped by the span due to limits being reached.
                pub dropped_attributes: u32,
                /// Number of events dropped by the span due to limits being reached.
                pub dropped_events: u32,
                /// Number of links dropped by the span due to limits being reached.
                pub dropped_links: u32,
            }
            impl ::core::fmt::Debug for SpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SpanData")
                        .field("span-context", &self.span_context)
                        .field("parent-span-id", &self.parent_span_id)
                        .field("span-kind", &self.span_kind)
                        .field("name", &self.name)
                        .field("start-time", &self.start_time)
                        .field("end-time", &self.end_time)
                        .field("attributes", &self.attributes)
                        .field("events", &self.events)
                        .field("links", &self.links)
                        .field("status", &self.status)
                        .field("instrumentation-scope", &self.instrumentation_scope)
                        .field("dropped-attributes", &self.dropped_attributes)
                        .field("dropped-events", &self.dropped_events)
                        .field("dropped-links", &self.dropped_links)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Called when a span is started.
            pub fn on_start(span: &SpanData, parent: &SpanContext) -> () {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 48 + 38 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 48
                            + 38 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let SpanData {
                        span_context: span_context1,
                        parent_span_id: parent_span_id1,
                        span_kind: span_kind1,
                        name: name1,
                        start_time: start_time1,
                        end_time: end_time1,
                        attributes: attributes1,
                        events: events1,
                        links: links1,
                        status: status1,
                        instrumentation_scope: instrumentation_scope1,
                        dropped_attributes: dropped_attributes1,
                        dropped_events: dropped_events1,
                        dropped_links: dropped_links1,
                    } = span;
                    let SpanContext {
                        trace_id: trace_id2,
                        span_id: span_id2,
                        trace_flags: trace_flags2,
                        is_remote: is_remote2,
                        trace_state: trace_state2,
                    } = span_context1;
                    let vec3 = trace_id2;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr0.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = span_id2;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    *ptr0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr4.cast_mut();
                    let flags5 = trace_flags2;
                    *ptr0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = ((flags5
                        .bits() >> 0) as i32) as u8;
                    *ptr0
                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<u8>() = (match is_remote2 {
                        true => 1,
                        false => 0,
                    }) as u8;
                    let vec9 = trace_state2;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t6_0, t6_1) = e;
                            let vec7 = t6_0;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            let vec8 = t6_1;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    *ptr0.add(6 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
                    *ptr0
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result9;
                    let vec10 = parent_span_id1;
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    *ptr0.add(8 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len10;
                    *ptr0
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    *ptr0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = (span_kind1
                        .clone() as i32) as u8;
                    let vec11 = name1;
                    let ptr11 = vec11.as_ptr().cast::<u8>();
                    let len11 = vec11.len();
                    *ptr0
                        .add(11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len11;
                    *ptr0
                        .add(10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr11.cast_mut();
                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                        seconds: seconds12,
                        nanoseconds: nanoseconds12,
                    } = start_time1;
                    *ptr0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(
                        seconds12,
                    );
                    *ptr0
                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(nanoseconds12);
                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                        seconds: seconds13,
                        nanoseconds: nanoseconds13,
                    } = end_time1;
                    *ptr0
                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>() = _rt::as_i64(seconds13);
                    *ptr0
                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(nanoseconds13);
                    let vec22 = attributes1;
                    let len22 = vec22.len();
                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec22.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result22 = if layout22.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout22);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec22.into_iter().enumerate() {
                        let base = result22
                            .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let KeyValue { key: key14, value: value14 } = e;
                            let vec15 = key14;
                            let ptr15 = vec15.as_ptr().cast::<u8>();
                            let len15 = vec15.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                            match value14 {
                                Value::String(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec16 = e;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                Value::Bool(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                Value::F64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                Value::S64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                Value::StringArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec17 = e;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                Value::BoolArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec19 = e;
                                    let len19 = vec19.len();
                                    let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec19.len() * 1,
                                        1,
                                    );
                                    let result19 = if layout19.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout19);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec19.into_iter().enumerate() {
                                        let base = result19.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len19;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result19;
                                    cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                }
                                Value::F64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec20 = e;
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len20;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                }
                                Value::S64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec21 = e;
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                }
                            }
                        }
                    }
                    *ptr0
                        .add(32 + 13 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len22;
                    *ptr0
                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result22;
                    let vec35 = events1;
                    let len35 = vec35.len();
                    let layout35 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec35.len() * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result35 = if layout35.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout35).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout35);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec35.into_iter().enumerate() {
                        let base = result35
                            .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Event {
                                name: name23,
                                time: time23,
                                attributes: attributes23,
                            } = e;
                            let vec24 = name23;
                            let ptr24 = vec24.as_ptr().cast::<u8>();
                            let len24 = vec24.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len24;
                            *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                            let super::super::super::wasi::clocks::wall_clock::Datetime {
                                seconds: seconds25,
                                nanoseconds: nanoseconds25,
                            } = time23;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(seconds25);
                            *base
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(nanoseconds25);
                            let vec34 = attributes23;
                            let len34 = vec34.len();
                            let layout34 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec34.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result34 = if layout34.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout34).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout34);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec34.into_iter().enumerate() {
                                let base = result34
                                    .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let KeyValue { key: key26, value: value26 } = e;
                                    let vec27 = key26;
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len27;
                                    *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                    match value26 {
                                        Value::String(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec28 = e;
                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                            let len28 = vec28.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len28;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr28.cast_mut();
                                        }
                                        Value::Bool(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        Value::F64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(e);
                                        }
                                        Value::S64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        Value::StringArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec30 = e;
                                            let len30 = vec30.len();
                                            let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec30.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result30 = if layout30.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout30);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec30.into_iter().enumerate() {
                                                let base = result30
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let vec29 = e;
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len30;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result30;
                                            cleanup_list.extend_from_slice(&[(result30, layout30)]);
                                        }
                                        Value::BoolArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let vec31 = e;
                                            let len31 = vec31.len();
                                            let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec31.len() * 1,
                                                1,
                                            );
                                            let result31 = if layout31.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout31);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec31.into_iter().enumerate() {
                                                let base = result31.add(i * 1);
                                                {
                                                    *base.add(0).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len31;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result31;
                                            cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                        }
                                        Value::F64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (6i32) as u8;
                                            let vec32 = e;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len32;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr32.cast_mut();
                                        }
                                        Value::S64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (7i32) as u8;
                                            let vec33 = e;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len33;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr33.cast_mut();
                                        }
                                    }
                                }
                            }
                            *base
                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len34;
                            *base
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result34;
                            cleanup_list.extend_from_slice(&[(result34, layout34)]);
                        }
                    }
                    *ptr0
                        .add(32 + 15 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len35;
                    *ptr0
                        .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result35;
                    let vec54 = links1;
                    let len54 = vec54.len();
                    let layout54 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec54.len() * (9 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result54 = if layout54.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout54).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout54);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec54.into_iter().enumerate() {
                        let base = result54
                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Link {
                                span_context: span_context36,
                                attributes: attributes36,
                            } = e;
                            let SpanContext {
                                trace_id: trace_id37,
                                span_id: span_id37,
                                trace_flags: trace_flags37,
                                is_remote: is_remote37,
                                trace_state: trace_state37,
                            } = span_context36;
                            let vec38 = trace_id37;
                            let ptr38 = vec38.as_ptr().cast::<u8>();
                            let len38 = vec38.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len38;
                            *base.add(0).cast::<*mut u8>() = ptr38.cast_mut();
                            let vec39 = span_id37;
                            let ptr39 = vec39.as_ptr().cast::<u8>();
                            let len39 = vec39.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len39;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr39.cast_mut();
                            let flags40 = trace_flags37;
                            *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = ((flags40.bits() >> 0) as i32) as u8;
                            *base
                                .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match is_remote37 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            let vec44 = trace_state37;
                            let len44 = vec44.len();
                            let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec44.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result44 = if layout44.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout44);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec44.into_iter().enumerate() {
                                let base = result44
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t41_0, t41_1) = e;
                                    let vec42 = t41_0;
                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                    let len42 = vec42.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len42;
                                    *base.add(0).cast::<*mut u8>() = ptr42.cast_mut();
                                    let vec43 = t41_1;
                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                    let len43 = vec43.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len43;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr43.cast_mut();
                                }
                            }
                            *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len44;
                            *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result44;
                            let vec53 = attributes36;
                            let len53 = vec53.len();
                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec53.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result53 = if layout53.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout53);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec53.into_iter().enumerate() {
                                let base = result53
                                    .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let KeyValue { key: key45, value: value45 } = e;
                                    let vec46 = key45;
                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                    let len46 = vec46.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len46;
                                    *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                    match value45 {
                                        Value::String(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec47 = e;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                        }
                                        Value::Bool(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        Value::F64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(e);
                                        }
                                        Value::S64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        Value::StringArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec49 = e;
                                            let len49 = vec49.len();
                                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec49.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result49 = if layout49.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout49);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec49.into_iter().enumerate() {
                                                let base = result49
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let vec48 = e;
                                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                                    let len48 = vec48.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len48;
                                                    *base.add(0).cast::<*mut u8>() = ptr48.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len49;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result49;
                                            cleanup_list.extend_from_slice(&[(result49, layout49)]);
                                        }
                                        Value::BoolArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let vec50 = e;
                                            let len50 = vec50.len();
                                            let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec50.len() * 1,
                                                1,
                                            );
                                            let result50 = if layout50.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout50);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec50.into_iter().enumerate() {
                                                let base = result50.add(i * 1);
                                                {
                                                    *base.add(0).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len50;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result50;
                                            cleanup_list.extend_from_slice(&[(result50, layout50)]);
                                        }
                                        Value::F64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (6i32) as u8;
                                            let vec51 = e;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len51;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr51.cast_mut();
                                        }
                                        Value::S64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (7i32) as u8;
                                            let vec52 = e;
                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                            let len52 = vec52.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len52;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr52.cast_mut();
                                        }
                                    }
                                }
                            }
                            *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len53;
                            *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result53;
                            cleanup_list
                                .extend_from_slice(
                                    &[(result44, layout44), (result53, layout53)],
                                );
                        }
                    }
                    *ptr0
                        .add(32 + 17 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len54;
                    *ptr0
                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result54;
                    match status1 {
                        Status::Unset => {
                            *ptr0
                                .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                        Status::Ok => {
                            *ptr0
                                .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                        }
                        Status::Error(e) => {
                            *ptr0
                                .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (2i32) as u8;
                            let vec55 = e;
                            let ptr55 = vec55.as_ptr().cast::<u8>();
                            let len55 = vec55.len();
                            *ptr0
                                .add(32 + 20 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len55;
                            *ptr0
                                .add(32 + 19 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr55.cast_mut();
                        }
                    }
                    let InstrumentationScope {
                        name: name56,
                        version: version56,
                        schema_url: schema_url56,
                        attributes: attributes56,
                    } = instrumentation_scope1;
                    let vec57 = name56;
                    let ptr57 = vec57.as_ptr().cast::<u8>();
                    let len57 = vec57.len();
                    *ptr0
                        .add(32 + 22 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len57;
                    *ptr0
                        .add(32 + 21 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr57.cast_mut();
                    match version56 {
                        Some(e) => {
                            *ptr0
                                .add(32 + 23 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec58 = e;
                            let ptr58 = vec58.as_ptr().cast::<u8>();
                            let len58 = vec58.len();
                            *ptr0
                                .add(32 + 25 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len58;
                            *ptr0
                                .add(32 + 24 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr58.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(32 + 23 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match schema_url56 {
                        Some(e) => {
                            *ptr0
                                .add(32 + 26 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec59 = e;
                            let ptr59 = vec59.as_ptr().cast::<u8>();
                            let len59 = vec59.len();
                            *ptr0
                                .add(32 + 28 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len59;
                            *ptr0
                                .add(32 + 27 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr59.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(32 + 26 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec68 = attributes56;
                    let len68 = vec68.len();
                    let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec68.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result68 = if layout68.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout68);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec68.into_iter().enumerate() {
                        let base = result68
                            .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let KeyValue { key: key60, value: value60 } = e;
                            let vec61 = key60;
                            let ptr61 = vec61.as_ptr().cast::<u8>();
                            let len61 = vec61.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len61;
                            *base.add(0).cast::<*mut u8>() = ptr61.cast_mut();
                            match value60 {
                                Value::String(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec62 = e;
                                    let ptr62 = vec62.as_ptr().cast::<u8>();
                                    let len62 = vec62.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len62;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr62.cast_mut();
                                }
                                Value::Bool(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                Value::F64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                Value::S64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                Value::StringArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec64 = e;
                                    let len64 = vec64.len();
                                    let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec64.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result64 = if layout64.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout64);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec64.into_iter().enumerate() {
                                        let base = result64
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec63 = e;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len63;
                                            *base.add(0).cast::<*mut u8>() = ptr63.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len64;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result64;
                                    cleanup_list.extend_from_slice(&[(result64, layout64)]);
                                }
                                Value::BoolArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec65 = e;
                                    let len65 = vec65.len();
                                    let layout65 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec65.len() * 1,
                                        1,
                                    );
                                    let result65 = if layout65.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout65).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout65);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec65.into_iter().enumerate() {
                                        let base = result65.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len65;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result65;
                                    cleanup_list.extend_from_slice(&[(result65, layout65)]);
                                }
                                Value::F64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec66 = e;
                                    let ptr66 = vec66.as_ptr().cast::<u8>();
                                    let len66 = vec66.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len66;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr66.cast_mut();
                                }
                                Value::S64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec67 = e;
                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                    let len67 = vec67.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len67;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr67.cast_mut();
                                }
                            }
                        }
                    }
                    *ptr0
                        .add(32 + 30 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len68;
                    *ptr0
                        .add(32 + 29 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result68;
                    *ptr0
                        .add(32 + 31 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(dropped_attributes1);
                    *ptr0
                        .add(36 + 31 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(dropped_events1);
                    *ptr0
                        .add(40 + 31 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(dropped_links1);
                    let SpanContext {
                        trace_id: trace_id69,
                        span_id: span_id69,
                        trace_flags: trace_flags69,
                        is_remote: is_remote69,
                        trace_state: trace_state69,
                    } = parent;
                    let vec70 = trace_id69;
                    let ptr70 = vec70.as_ptr().cast::<u8>();
                    let len70 = vec70.len();
                    *ptr0
                        .add(40 + 33 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len70;
                    *ptr0
                        .add(40 + 32 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr70.cast_mut();
                    let vec71 = span_id69;
                    let ptr71 = vec71.as_ptr().cast::<u8>();
                    let len71 = vec71.len();
                    *ptr0
                        .add(40 + 35 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len71;
                    *ptr0
                        .add(40 + 34 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr71.cast_mut();
                    let flags72 = trace_flags69;
                    *ptr0
                        .add(40 + 36 * ::core::mem::size_of::<*const u8>())
                        .cast::<u8>() = ((flags72.bits() >> 0) as i32) as u8;
                    *ptr0
                        .add(41 + 36 * ::core::mem::size_of::<*const u8>())
                        .cast::<u8>() = (match is_remote69 {
                        true => 1,
                        false => 0,
                    }) as u8;
                    let vec76 = trace_state69;
                    let len76 = vec76.len();
                    let layout76 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec76.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result76 = if layout76.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout76).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout76);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec76.into_iter().enumerate() {
                        let base = result76
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t73_0, t73_1) = e;
                            let vec74 = t73_0;
                            let ptr74 = vec74.as_ptr().cast::<u8>();
                            let len74 = vec74.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len74;
                            *base.add(0).cast::<*mut u8>() = ptr74.cast_mut();
                            let vec75 = t73_1;
                            let ptr75 = vec75.as_ptr().cast::<u8>();
                            let len75 = vec75.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len75;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr75.cast_mut();
                        }
                    }
                    *ptr0
                        .add(40 + 38 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len76;
                    *ptr0
                        .add(40 + 37 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result76;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:otel/tracing@0.2.0-draft")]
                    unsafe extern "C" {
                        #[link_name = "on-start"]
                        fn wit_import77(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import77(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import77(ptr0) };
                    if layout9.size() != 0 {
                        _rt::alloc::dealloc(result9.cast(), layout9);
                    }
                    if layout22.size() != 0 {
                        _rt::alloc::dealloc(result22.cast(), layout22);
                    }
                    if layout35.size() != 0 {
                        _rt::alloc::dealloc(result35.cast(), layout35);
                    }
                    if layout54.size() != 0 {
                        _rt::alloc::dealloc(result54.cast(), layout54);
                    }
                    if layout68.size() != 0 {
                        _rt::alloc::dealloc(result68.cast(), layout68);
                    }
                    if layout76.size() != 0 {
                        _rt::alloc::dealloc(result76.cast(), layout76);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Called when a span is ended.
            pub fn on_end(span: &SpanData) -> () {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 32 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 32 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let SpanData {
                        span_context: span_context1,
                        parent_span_id: parent_span_id1,
                        span_kind: span_kind1,
                        name: name1,
                        start_time: start_time1,
                        end_time: end_time1,
                        attributes: attributes1,
                        events: events1,
                        links: links1,
                        status: status1,
                        instrumentation_scope: instrumentation_scope1,
                        dropped_attributes: dropped_attributes1,
                        dropped_events: dropped_events1,
                        dropped_links: dropped_links1,
                    } = span;
                    let SpanContext {
                        trace_id: trace_id2,
                        span_id: span_id2,
                        trace_flags: trace_flags2,
                        is_remote: is_remote2,
                        trace_state: trace_state2,
                    } = span_context1;
                    let vec3 = trace_id2;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr0.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = span_id2;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    *ptr0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr4.cast_mut();
                    let flags5 = trace_flags2;
                    *ptr0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = ((flags5
                        .bits() >> 0) as i32) as u8;
                    *ptr0
                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<u8>() = (match is_remote2 {
                        true => 1,
                        false => 0,
                    }) as u8;
                    let vec9 = trace_state2;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t6_0, t6_1) = e;
                            let vec7 = t6_0;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            let vec8 = t6_1;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    *ptr0.add(6 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
                    *ptr0
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result9;
                    let vec10 = parent_span_id1;
                    let ptr10 = vec10.as_ptr().cast::<u8>();
                    let len10 = vec10.len();
                    *ptr0.add(8 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len10;
                    *ptr0
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr10.cast_mut();
                    *ptr0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = (span_kind1
                        .clone() as i32) as u8;
                    let vec11 = name1;
                    let ptr11 = vec11.as_ptr().cast::<u8>();
                    let len11 = vec11.len();
                    *ptr0
                        .add(11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len11;
                    *ptr0
                        .add(10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr11.cast_mut();
                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                        seconds: seconds12,
                        nanoseconds: nanoseconds12,
                    } = start_time1;
                    *ptr0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(
                        seconds12,
                    );
                    *ptr0
                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(nanoseconds12);
                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                        seconds: seconds13,
                        nanoseconds: nanoseconds13,
                    } = end_time1;
                    *ptr0
                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>() = _rt::as_i64(seconds13);
                    *ptr0
                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(nanoseconds13);
                    let vec22 = attributes1;
                    let len22 = vec22.len();
                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec22.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result22 = if layout22.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout22);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec22.into_iter().enumerate() {
                        let base = result22
                            .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let KeyValue { key: key14, value: value14 } = e;
                            let vec15 = key14;
                            let ptr15 = vec15.as_ptr().cast::<u8>();
                            let len15 = vec15.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                            match value14 {
                                Value::String(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec16 = e;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                Value::Bool(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                Value::F64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                Value::S64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                Value::StringArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec17 = e;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                Value::BoolArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec19 = e;
                                    let len19 = vec19.len();
                                    let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec19.len() * 1,
                                        1,
                                    );
                                    let result19 = if layout19.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout19);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec19.into_iter().enumerate() {
                                        let base = result19.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len19;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result19;
                                    cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                }
                                Value::F64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec20 = e;
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len20;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                }
                                Value::S64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec21 = e;
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                }
                            }
                        }
                    }
                    *ptr0
                        .add(32 + 13 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len22;
                    *ptr0
                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result22;
                    let vec35 = events1;
                    let len35 = vec35.len();
                    let layout35 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec35.len() * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result35 = if layout35.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout35).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout35);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec35.into_iter().enumerate() {
                        let base = result35
                            .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Event {
                                name: name23,
                                time: time23,
                                attributes: attributes23,
                            } = e;
                            let vec24 = name23;
                            let ptr24 = vec24.as_ptr().cast::<u8>();
                            let len24 = vec24.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len24;
                            *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                            let super::super::super::wasi::clocks::wall_clock::Datetime {
                                seconds: seconds25,
                                nanoseconds: nanoseconds25,
                            } = time23;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(seconds25);
                            *base
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(nanoseconds25);
                            let vec34 = attributes23;
                            let len34 = vec34.len();
                            let layout34 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec34.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result34 = if layout34.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout34).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout34);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec34.into_iter().enumerate() {
                                let base = result34
                                    .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let KeyValue { key: key26, value: value26 } = e;
                                    let vec27 = key26;
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len27;
                                    *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                    match value26 {
                                        Value::String(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec28 = e;
                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                            let len28 = vec28.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len28;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr28.cast_mut();
                                        }
                                        Value::Bool(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        Value::F64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(e);
                                        }
                                        Value::S64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        Value::StringArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec30 = e;
                                            let len30 = vec30.len();
                                            let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec30.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result30 = if layout30.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout30);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec30.into_iter().enumerate() {
                                                let base = result30
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let vec29 = e;
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len30;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result30;
                                            cleanup_list.extend_from_slice(&[(result30, layout30)]);
                                        }
                                        Value::BoolArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let vec31 = e;
                                            let len31 = vec31.len();
                                            let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec31.len() * 1,
                                                1,
                                            );
                                            let result31 = if layout31.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout31);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec31.into_iter().enumerate() {
                                                let base = result31.add(i * 1);
                                                {
                                                    *base.add(0).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len31;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result31;
                                            cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                        }
                                        Value::F64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (6i32) as u8;
                                            let vec32 = e;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len32;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr32.cast_mut();
                                        }
                                        Value::S64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (7i32) as u8;
                                            let vec33 = e;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len33;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr33.cast_mut();
                                        }
                                    }
                                }
                            }
                            *base
                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len34;
                            *base
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result34;
                            cleanup_list.extend_from_slice(&[(result34, layout34)]);
                        }
                    }
                    *ptr0
                        .add(32 + 15 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len35;
                    *ptr0
                        .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result35;
                    let vec54 = links1;
                    let len54 = vec54.len();
                    let layout54 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec54.len() * (9 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result54 = if layout54.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout54).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout54);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec54.into_iter().enumerate() {
                        let base = result54
                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                        {
                            let Link {
                                span_context: span_context36,
                                attributes: attributes36,
                            } = e;
                            let SpanContext {
                                trace_id: trace_id37,
                                span_id: span_id37,
                                trace_flags: trace_flags37,
                                is_remote: is_remote37,
                                trace_state: trace_state37,
                            } = span_context36;
                            let vec38 = trace_id37;
                            let ptr38 = vec38.as_ptr().cast::<u8>();
                            let len38 = vec38.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len38;
                            *base.add(0).cast::<*mut u8>() = ptr38.cast_mut();
                            let vec39 = span_id37;
                            let ptr39 = vec39.as_ptr().cast::<u8>();
                            let len39 = vec39.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len39;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr39.cast_mut();
                            let flags40 = trace_flags37;
                            *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = ((flags40.bits() >> 0) as i32) as u8;
                            *base
                                .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match is_remote37 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            let vec44 = trace_state37;
                            let len44 = vec44.len();
                            let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec44.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result44 = if layout44.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout44);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec44.into_iter().enumerate() {
                                let base = result44
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t41_0, t41_1) = e;
                                    let vec42 = t41_0;
                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                    let len42 = vec42.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len42;
                                    *base.add(0).cast::<*mut u8>() = ptr42.cast_mut();
                                    let vec43 = t41_1;
                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                    let len43 = vec43.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len43;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr43.cast_mut();
                                }
                            }
                            *base
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len44;
                            *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result44;
                            let vec53 = attributes36;
                            let len53 = vec53.len();
                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec53.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result53 = if layout53.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout53);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec53.into_iter().enumerate() {
                                let base = result53
                                    .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let KeyValue { key: key45, value: value45 } = e;
                                    let vec46 = key45;
                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                    let len46 = vec46.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len46;
                                    *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                    match value45 {
                                        Value::String(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec47 = e;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                        }
                                        Value::Bool(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        Value::F64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(e);
                                        }
                                        Value::S64(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        Value::StringArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec49 = e;
                                            let len49 = vec49.len();
                                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec49.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result49 = if layout49.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout49);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec49.into_iter().enumerate() {
                                                let base = result49
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let vec48 = e;
                                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                                    let len48 = vec48.len();
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len48;
                                                    *base.add(0).cast::<*mut u8>() = ptr48.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len49;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result49;
                                            cleanup_list.extend_from_slice(&[(result49, layout49)]);
                                        }
                                        Value::BoolArray(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let vec50 = e;
                                            let len50 = vec50.len();
                                            let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec50.len() * 1,
                                                1,
                                            );
                                            let result50 = if layout50.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout50);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec50.into_iter().enumerate() {
                                                let base = result50.add(i * 1);
                                                {
                                                    *base.add(0).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                            }
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len50;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result50;
                                            cleanup_list.extend_from_slice(&[(result50, layout50)]);
                                        }
                                        Value::F64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (6i32) as u8;
                                            let vec51 = e;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len51;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr51.cast_mut();
                                        }
                                        Value::S64Array(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (7i32) as u8;
                                            let vec52 = e;
                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                            let len52 = vec52.len();
                                            *base
                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len52;
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr52.cast_mut();
                                        }
                                    }
                                }
                            }
                            *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len53;
                            *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result53;
                            cleanup_list
                                .extend_from_slice(
                                    &[(result44, layout44), (result53, layout53)],
                                );
                        }
                    }
                    *ptr0
                        .add(32 + 17 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len54;
                    *ptr0
                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result54;
                    match status1 {
                        Status::Unset => {
                            *ptr0
                                .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                        Status::Ok => {
                            *ptr0
                                .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                        }
                        Status::Error(e) => {
                            *ptr0
                                .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (2i32) as u8;
                            let vec55 = e;
                            let ptr55 = vec55.as_ptr().cast::<u8>();
                            let len55 = vec55.len();
                            *ptr0
                                .add(32 + 20 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len55;
                            *ptr0
                                .add(32 + 19 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr55.cast_mut();
                        }
                    }
                    let InstrumentationScope {
                        name: name56,
                        version: version56,
                        schema_url: schema_url56,
                        attributes: attributes56,
                    } = instrumentation_scope1;
                    let vec57 = name56;
                    let ptr57 = vec57.as_ptr().cast::<u8>();
                    let len57 = vec57.len();
                    *ptr0
                        .add(32 + 22 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len57;
                    *ptr0
                        .add(32 + 21 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr57.cast_mut();
                    match version56 {
                        Some(e) => {
                            *ptr0
                                .add(32 + 23 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec58 = e;
                            let ptr58 = vec58.as_ptr().cast::<u8>();
                            let len58 = vec58.len();
                            *ptr0
                                .add(32 + 25 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len58;
                            *ptr0
                                .add(32 + 24 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr58.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(32 + 23 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match schema_url56 {
                        Some(e) => {
                            *ptr0
                                .add(32 + 26 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec59 = e;
                            let ptr59 = vec59.as_ptr().cast::<u8>();
                            let len59 = vec59.len();
                            *ptr0
                                .add(32 + 28 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len59;
                            *ptr0
                                .add(32 + 27 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr59.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(32 + 26 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec68 = attributes56;
                    let len68 = vec68.len();
                    let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec68.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result68 = if layout68.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout68);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec68.into_iter().enumerate() {
                        let base = result68
                            .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let KeyValue { key: key60, value: value60 } = e;
                            let vec61 = key60;
                            let ptr61 = vec61.as_ptr().cast::<u8>();
                            let len61 = vec61.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len61;
                            *base.add(0).cast::<*mut u8>() = ptr61.cast_mut();
                            match value60 {
                                Value::String(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec62 = e;
                                    let ptr62 = vec62.as_ptr().cast::<u8>();
                                    let len62 = vec62.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len62;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr62.cast_mut();
                                }
                                Value::Bool(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                Value::F64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                Value::S64(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                Value::StringArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec64 = e;
                                    let len64 = vec64.len();
                                    let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec64.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result64 = if layout64.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout64);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec64.into_iter().enumerate() {
                                        let base = result64
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec63 = e;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len63;
                                            *base.add(0).cast::<*mut u8>() = ptr63.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len64;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result64;
                                    cleanup_list.extend_from_slice(&[(result64, layout64)]);
                                }
                                Value::BoolArray(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec65 = e;
                                    let len65 = vec65.len();
                                    let layout65 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec65.len() * 1,
                                        1,
                                    );
                                    let result65 = if layout65.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout65).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout65);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec65.into_iter().enumerate() {
                                        let base = result65.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len65;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result65;
                                    cleanup_list.extend_from_slice(&[(result65, layout65)]);
                                }
                                Value::F64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec66 = e;
                                    let ptr66 = vec66.as_ptr().cast::<u8>();
                                    let len66 = vec66.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len66;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr66.cast_mut();
                                }
                                Value::S64Array(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec67 = e;
                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                    let len67 = vec67.len();
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len67;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr67.cast_mut();
                                }
                            }
                        }
                    }
                    *ptr0
                        .add(32 + 30 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len68;
                    *ptr0
                        .add(32 + 29 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result68;
                    *ptr0
                        .add(32 + 31 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(dropped_attributes1);
                    *ptr0
                        .add(36 + 31 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(dropped_events1);
                    *ptr0
                        .add(40 + 31 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>() = _rt::as_i32(dropped_links1);
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:otel/tracing@0.2.0-draft")]
                    unsafe extern "C" {
                        #[link_name = "on-end"]
                        fn wit_import69(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import69(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import69(ptr0) };
                    if layout9.size() != 0 {
                        _rt::alloc::dealloc(result9.cast(), layout9);
                    }
                    if layout22.size() != 0 {
                        _rt::alloc::dealloc(result22.cast(), layout22);
                    }
                    if layout35.size() != 0 {
                        _rt::alloc::dealloc(result35.cast(), layout35);
                    }
                    if layout54.size() != 0 {
                        _rt::alloc::dealloc(result54.cast(), layout54);
                    }
                    if layout68.size() != 0 {
                        _rt::alloc::dealloc(result68.cast(), layout68);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current span context of the host.
            pub fn current_span_context() -> SpanContext {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 7 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 7
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:otel/tracing@0.2.0-draft")]
                    unsafe extern "C" {
                        #[link_name = "current-span-context"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len4 = l3;
                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                    let l5 = *ptr0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l6 = *ptr0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len7 = l6;
                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                    let l8 = i32::from(
                        *ptr0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l9 = i32::from(
                        *ptr0
                            .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l10 = *ptr0
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l11 = *ptr0
                        .add(6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base18 = l10;
                    let len18 = l11;
                    let mut result18 = _rt::Vec::with_capacity(len18);
                    for i in 0..len18 {
                        let base = base18
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e18 = {
                            let l12 = *base.add(0).cast::<*mut u8>();
                            let l13 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len14 = l13;
                            let bytes14 = _rt::Vec::from_raw_parts(
                                l12.cast(),
                                len14,
                                len14,
                            );
                            let l15 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l16 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            (_rt::string_lift(bytes14), _rt::string_lift(bytes17))
                        };
                        result18.push(e18);
                    }
                    _rt::cabi_dealloc(
                        base18,
                        len18 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result19 = SpanContext {
                        trace_id: _rt::string_lift(bytes4),
                        span_id: _rt::string_lift(bytes7),
                        trace_flags: TraceFlags::empty()
                            | TraceFlags::from_bits_retain(((l8 as u8) << 0) as _),
                        is_remote: _rt::bool_lift(l9 as u8),
                        trace_state: result18,
                    };
                    result19
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core type definitions for the Model Context Protocol, shared by other interfaces.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod mcp_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Role in a conversation
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// JSON value as a string
            /// This is a JSON-encoded value that should be parsed/validated by implementations
            pub type JsonValue = _rt::String;
            /// JSON object as a string
            /// This is a JSON-encoded object that should be parsed/validated by implementations
            pub type JsonObject = _rt::String;
            /// Metadata fields for extensibility
            /// Key-value pairs where values are JSON-encoded strings
            pub type MetaFields = _rt::Vec<(_rt::String, _rt::String)>;
            /// Icon specification for visual representation
            #[derive(Clone)]
            pub struct Icon {
                /// A standard URI pointing to an icon resource
                pub src: _rt::String,
                /// Optional override if the server's MIME type is missing or generic
                pub mime_type: Option<_rt::String>,
                /// Size specification (e.g., "48x48", "any" for SVG, or "48x48 96x96")
                pub sizes: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Icon {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Icon")
                        .field("src", &self.src)
                        .field("mime-type", &self.mime_type)
                        .field("sizes", &self.sizes)
                        .finish()
                }
            }
            /// Annotations provide hints to clients about how to handle data
            #[derive(Clone)]
            pub struct Annotations {
                /// Who this data is intended for
                pub audience: Option<_rt::Vec<Role>>,
                /// Priority from 0.0 (least) to 1.0 (most important)
                /// Implementations SHOULD validate this is within [0.0, 1.0] range
                pub priority: Option<f64>,
                /// ISO 8601 timestamp of last modification
                /// Format: YYYY-MM-DDTHH:mm:ss[.sss]Z or ±HH:MM offset
                pub last_modified: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("priority", &self.priority)
                        .field("last-modified", &self.last_modified)
                        .finish()
                }
            }
            /// Text content with optional annotations
            #[derive(Clone)]
            pub struct TextContent {
                pub text: _rt::String,
                /// Optional protocol-level metadata for this content block
                pub meta: Option<JsonObject>,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Image content as base64-encoded string
            #[derive(Clone)]
            pub struct ImageContent {
                /// Base64-encoded image data
                pub data: _rt::String,
                /// MIME type (e.g., "image/png", "image/jpeg")
                pub mime_type: _rt::String,
                /// Optional protocol-level metadata for this content block
                pub meta: Option<JsonObject>,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("meta", &self.meta)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Audio content as base64-encoded string
            #[derive(Clone)]
            pub struct AudioContent {
                /// Base64-encoded audio data
                pub data: _rt::String,
                /// MIME type (e.g., "audio/wav", "audio/mp3")
                pub mime_type: _rt::String,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Raw resource representation (for resource links)
            #[derive(Clone)]
            pub struct RawResource {
                /// URI representing the resource location
                pub uri: _rt::String,
                /// Name of the resource
                pub name: _rt::String,
                /// Human-readable title of the resource
                pub title: Option<_rt::String>,
                /// Optional description of the resource
                pub description: Option<_rt::String>,
                /// MIME type of the resource content
                pub mime_type: Option<_rt::String>,
                /// Size in bytes (before encoding), if known
                pub size: Option<u32>,
                /// Optional list of icons for the resource
                pub icons: Option<_rt::Vec<Icon>>,
            }
            impl ::core::fmt::Debug for RawResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RawResource")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("icons", &self.icons)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub text: _rt::String,
                pub meta: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("text", &self.text)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                /// Base64-encoded binary data
                pub blob: _rt::String,
                pub meta: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("blob", &self.blob)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Resource contents can be either text or binary
            #[derive(Clone)]
            pub enum ResourceContents {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for ResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceContents::Text(e) => {
                            f.debug_tuple("ResourceContents::Text").field(e).finish()
                        }
                        ResourceContents::Blob(e) => {
                            f.debug_tuple("ResourceContents::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource content
            #[derive(Clone)]
            pub struct EmbeddedResource {
                /// Optional protocol-level metadata for this content block
                pub meta: Option<JsonObject>,
                /// The actual resource contents
                pub resource: ResourceContents,
                pub annotations: Option<Annotations>,
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResource")
                        .field("meta", &self.meta)
                        .field("resource", &self.resource)
                        .field("annotations", &self.annotations)
                        .finish()
                }
            }
            /// Content block types that can be included in messages
            #[derive(Clone)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                Resource(EmbeddedResource),
                ResourceLink(RawResource),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::Resource(e) => {
                            f.debug_tuple("ContentBlock::Resource").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                    }
                }
            }
            /// Standard JSON-RPC and MCP error codes
            #[derive(Clone, Copy)]
            pub enum ErrorCode {
                /// JSON-RPC standard errors
                ParseError,
                /// -32700
                InvalidRequest,
                /// -32600
                MethodNotFound,
                /// -32601
                InvalidParams,
                /// -32602
                InternalError,
                /// -32603
                /// MCP-specific errors
                ResourceNotFound,
                ToolNotFound,
                PromptNotFound,
                Unauthorized,
                RateLimited,
                Timeout,
                Cancelled,
                /// Custom error with specific code
                CustomCode(i32),
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                        ErrorCode::ResourceNotFound => {
                            f.debug_tuple("ErrorCode::ResourceNotFound").finish()
                        }
                        ErrorCode::ToolNotFound => {
                            f.debug_tuple("ErrorCode::ToolNotFound").finish()
                        }
                        ErrorCode::PromptNotFound => {
                            f.debug_tuple("ErrorCode::PromptNotFound").finish()
                        }
                        ErrorCode::Unauthorized => {
                            f.debug_tuple("ErrorCode::Unauthorized").finish()
                        }
                        ErrorCode::RateLimited => {
                            f.debug_tuple("ErrorCode::RateLimited").finish()
                        }
                        ErrorCode::Timeout => {
                            f.debug_tuple("ErrorCode::Timeout").finish()
                        }
                        ErrorCode::Cancelled => {
                            f.debug_tuple("ErrorCode::Cancelled").finish()
                        }
                        ErrorCode::CustomCode(e) => {
                            f.debug_tuple("ErrorCode::CustomCode").field(e).finish()
                        }
                    }
                }
            }
            /// Standard error structure
            #[derive(Clone)]
            pub struct McpError {
                pub code: ErrorCode,
                pub message: _rt::String,
                /// Additional error context (JSON-encoded)
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpError")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for McpError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for McpError {}
            /// Message role for LLM interactions
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            impl MessageRole {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> MessageRole {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => MessageRole::User,
                        1 => MessageRole::Assistant,
                        2 => MessageRole::System,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
        }
        /// Type definitions for authentication and authorization
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod authorization_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type MetaFields = super::super::super::wasmcp::mcp::mcp_types::MetaFields;
            /// Provider declares its authorization requirements
            /// This is returned by get-auth-config()
            /// and used by the transport to enforce authorization
            #[derive(Clone)]
            pub struct ProviderAuthConfig {
                /// Expected JWT issuer (REQUIRED for auth)
                pub expected_issuer: _rt::String,
                /// Expected JWT audiences (REQUIRED for auth - must have at least one)
                pub expected_audiences: _rt::Vec<_rt::String>,
                /// JWKS URI for key discovery (REQUIRED for auth)
                pub jwks_uri: _rt::String,
                /// Pass raw JWT token to tools via "jwt.token" meta field.
                pub pass_jwt: bool,
                /// Expected JWT subject - if set, only this exact subject is allowed
                pub expected_subject: Option<_rt::String>,
                /// Optional Rego policy for complex authorization rules
                pub policy: Option<_rt::String>,
                /// Optional data for policy evaluation
                pub policy_data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ProviderAuthConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProviderAuthConfig")
                        .field("expected-issuer", &self.expected_issuer)
                        .field("expected-audiences", &self.expected_audiences)
                        .field("jwks-uri", &self.jwks_uri)
                        .field("pass-jwt", &self.pass_jwt)
                        .field("expected-subject", &self.expected_subject)
                        .field("policy", &self.policy)
                        .field("policy-data", &self.policy_data)
                        .finish()
                }
            }
            /// Authorization context passed between components after successful authorization
            #[derive(Clone)]
            pub struct AuthContext {
                /// OAuth client ID that made the request
                pub client_id: Option<_rt::String>,
                /// Subject claim from the token - always present from validated JWT
                pub sub: _rt::String,
                /// OAuth scopes granted to this token
                pub scopes: _rt::Vec<_rt::String>,
                /// Issuer claim from the token - always present from validated JWT
                pub iss: _rt::String,
                /// Audience claim from token (aud) - always validated, can be multiple values
                pub aud: _rt::Vec<_rt::String>,
                /// Additional claims from token as key-value pairs
                pub claims: MetaFields,
                /// Expiration timestamp (Unix seconds) - always validated and required for security
                pub exp: u64,
                /// Issued at timestamp (Unix seconds)
                pub iat: Option<u64>,
                /// Not before timestamp (Unix seconds)
                pub nbf: Option<u64>,
                /// Raw JWT iff enabled by pass-jwt flag in provider-auth-config
                pub jwt: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for AuthContext {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AuthContext")
                        .field("client-id", &self.client_id)
                        .field("sub", &self.sub)
                        .field("scopes", &self.scopes)
                        .field("iss", &self.iss)
                        .field("aud", &self.aud)
                        .field("claims", &self.claims)
                        .field("exp", &self.exp)
                        .field("iat", &self.iat)
                        .field("nbf", &self.nbf)
                        .field("jwt", &self.jwt)
                        .finish()
                }
            }
        }
        /// Type definitions for tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ContentBlock = super::super::super::wasmcp::mcp::mcp_types::ContentBlock;
            pub type JsonValue = super::super::super::wasmcp::mcp::mcp_types::JsonValue;
            pub type JsonObject = super::super::super::wasmcp::mcp::mcp_types::JsonObject;
            pub type Icon = super::super::super::wasmcp::mcp::mcp_types::Icon;
            /// Behavioral hints about tool operations
            #[derive(Clone)]
            pub struct ToolAnnotations {
                /// Human-readable title for display
                pub title: Option<_rt::String>,
                /// Tool does not modify environment (default: false)
                pub read_only_hint: Option<bool>,
                /// Tool may perform destructive updates (default: true)
                pub destructive_hint: Option<bool>,
                /// Repeated calls with same args have no additional effect (default: false)
                pub idempotent_hint: Option<bool>,
                /// Tool interacts with external entities (default: true)
                pub open_world_hint: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolAnnotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolAnnotations")
                        .field("title", &self.title)
                        .field("read-only-hint", &self.read_only_hint)
                        .field("destructive-hint", &self.destructive_hint)
                        .field("idempotent-hint", &self.idempotent_hint)
                        .field("open-world-hint", &self.open_world_hint)
                        .finish()
                }
            }
            /// Tool definition with metadata and schema
            #[derive(Clone)]
            pub struct Tool {
                /// The name of the tool
                pub name: _rt::String,
                /// A human-readable title for the tool
                pub title: Option<_rt::String>,
                /// Human-readable description of what the tool does
                pub description: Option<_rt::String>,
                /// JSON Schema object for input parameters
                pub input_schema: JsonObject,
                /// Optional JSON Schema object for structured output
                pub output_schema: Option<JsonObject>,
                /// Behavioral hints for clients
                pub annotations: Option<ToolAnnotations>,
                /// Optional list of icons for the tool
                pub icons: Option<_rt::Vec<Icon>>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("icons", &self.icons)
                        .finish()
                }
            }
            /// Request to execute a tool
            #[derive(Clone)]
            pub struct CallToolRequest {
                /// Name of the tool to execute
                pub name: _rt::String,
                /// Arguments as JSON object (must match the tool's input schema)
                pub arguments: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for CallToolRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolRequest")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            /// Result from executing a tool
            #[derive(Clone)]
            pub struct CallToolResult {
                /// Unstructured content blocks (text, images, etc.)
                pub content: _rt::Vec<ContentBlock>,
                /// Optional structured JSON output
                pub structured_content: Option<JsonValue>,
                /// Whether the tool execution resulted in an error
                pub is_error: Option<bool>,
                /// Optional metadata
                pub meta: Option<JsonObject>,
            }
            impl ::core::fmt::Debug for CallToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CallToolResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Request to list available tools
            #[derive(Clone)]
            pub struct ListToolsRequest {
                /// Pagination cursor from previous response
                pub cursor: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ListToolsRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsRequest")
                        .field("cursor", &self.cursor)
                        .finish()
                }
            }
            /// Response with list of available tools
            #[derive(Clone)]
            pub struct ListToolsResult {
                /// Available tools
                pub tools: _rt::Vec<Tool>,
                /// Cursor for next page if more tools exist
                pub next_cursor: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ListToolsResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResult")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .finish()
                }
            }
        }
        /// Tools enable models to interact with external systems, such as querying databases, calling APIs, or performing computations.
        /// Each tool is uniquely identified by a name and includes metadata describing its schema.
        ///
        /// https://modelcontextprotocol.io/specification/2025-06-18/server/tools
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tools {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::wasmcp::mcp::mcp_types::McpError;
            pub type AuthContext = super::super::super::wasmcp::mcp::authorization_types::AuthContext;
            pub type ListToolsRequest = super::super::super::wasmcp::mcp::tools_types::ListToolsRequest;
            pub type ListToolsResult = super::super::super::wasmcp::mcp::tools_types::ListToolsResult;
            pub type CallToolRequest = super::super::super::wasmcp::mcp::tools_types::CallToolRequest;
            pub type CallToolResult = super::super::super::wasmcp::mcp::tools_types::CallToolResult;
            #[allow(unused_unsafe, clippy::all)]
            /// List available tools
            pub fn list_tools(
                request: &ListToolsRequest,
            ) -> Result<ListToolsResult, McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::wasmcp::mcp::tools_types::ListToolsRequest {
                        cursor: cursor0,
                    } = request;
                    let (result2_0, result2_1, result2_2) = match cursor0 {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/tools@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "list-tools"]
                        fn wit_import4(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import4(result2_0, result2_1, result2_2, ptr3) };
                    let l5 = i32::from(*ptr3.add(0).cast::<u8>());
                    let result69 = match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base54 = l6;
                                let len54 = l7;
                                let mut result54 = _rt::Vec::with_capacity(len54);
                                for i in 0..len54 {
                                    let base = base54
                                        .add(i * (8 + 20 * ::core::mem::size_of::<*const u8>()));
                                    let e54 = {
                                        let l8 = *base.add(0).cast::<*mut u8>();
                                        let l9 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        let l11 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l15 = i32::from(
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l19 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l20 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len21 = l20;
                                        let bytes21 = _rt::Vec::from_raw_parts(
                                            l19.cast(),
                                            len21,
                                            len21,
                                        );
                                        let l22 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l26 = i32::from(
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l39 = i32::from(
                                            *base
                                                .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::wasmcp::mcp::tools_types::Tool {
                                            name: _rt::string_lift(bytes10),
                                            title: match l11 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l12 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l13 = *base
                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len14 = l13;
                                                        let bytes14 = _rt::Vec::from_raw_parts(
                                                            l12.cast(),
                                                            len14,
                                                            len14,
                                                        );
                                                        _rt::string_lift(bytes14)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            description: match l15 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l16 = *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l17 = *base
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len18 = l17;
                                                        let bytes18 = _rt::Vec::from_raw_parts(
                                                            l16.cast(),
                                                            len18,
                                                            len18,
                                                        );
                                                        _rt::string_lift(bytes18)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            input_schema: _rt::string_lift(bytes21),
                                            output_schema: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = *base
                                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l26 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l27 = i32::from(
                                                            *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l31 = i32::from(
                                                            *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l33 = i32::from(
                                                            *base
                                                                .add(2 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l35 = i32::from(
                                                            *base
                                                                .add(4 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l37 = i32::from(
                                                            *base
                                                                .add(6 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::wasmcp::mcp::tools_types::ToolAnnotations {
                                                            title: match l27 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l28 = *base
                                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l29 = *base
                                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len30 = l29;
                                                                        let bytes30 = _rt::Vec::from_raw_parts(
                                                                            l28.cast(),
                                                                            len30,
                                                                            len30,
                                                                        );
                                                                        _rt::string_lift(bytes30)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            read_only_hint: match l31 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l32 = i32::from(
                                                                            *base
                                                                                .add(1 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l32 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            destructive_hint: match l33 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l34 = i32::from(
                                                                            *base
                                                                                .add(3 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l34 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            idempotent_hint: match l35 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l36 = i32::from(
                                                                            *base
                                                                                .add(5 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l36 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            open_world_hint: match l37 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l38 = i32::from(
                                                                            *base
                                                                                .add(7 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l38 as u8)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            icons: match l39 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l40 = *base
                                                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l41 = *base
                                                            .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base53 = l40;
                                                        let len53 = l41;
                                                        let mut result53 = _rt::Vec::with_capacity(len53);
                                                        for i in 0..len53 {
                                                            let base = base53
                                                                .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                            let e53 = {
                                                                let l42 = *base.add(0).cast::<*mut u8>();
                                                                let l43 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len44 = l43;
                                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                                    l42.cast(),
                                                                    len44,
                                                                    len44,
                                                                );
                                                                let l45 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l49 = i32::from(
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::wasmcp::mcp::mcp_types::Icon {
                                                                    src: _rt::string_lift(bytes44),
                                                                    mime_type: match l45 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l46 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l47 = *base
                                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len48 = l47;
                                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                                    l46.cast(),
                                                                                    len48,
                                                                                    len48,
                                                                                );
                                                                                _rt::string_lift(bytes48)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    sizes: match l49 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l50 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l51 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len52 = l51;
                                                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                                                    l50.cast(),
                                                                                    len52,
                                                                                    len52,
                                                                                );
                                                                                _rt::string_lift(bytes52)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result53.push(e53);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base53,
                                                            len53 * (8 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result53
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result54.push(e54);
                                }
                                _rt::cabi_dealloc(
                                    base54,
                                    len54 * (8 + 20 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l55 = i32::from(
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::tools_types::ListToolsResult {
                                    tools: result54,
                                    next_cursor: match l55 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l56 = *ptr3
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l57 = *ptr3
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len58 = l57;
                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                    l56.cast(),
                                                    len58,
                                                    len58,
                                                );
                                                _rt::string_lift(bytes58)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l59 = i32::from(
                                    *ptr3.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V61;
                                let v61 = match l59 {
                                    0 => V61::ParseError,
                                    1 => V61::InvalidRequest,
                                    2 => V61::MethodNotFound,
                                    3 => V61::InvalidParams,
                                    4 => V61::InternalError,
                                    5 => V61::ResourceNotFound,
                                    6 => V61::ToolNotFound,
                                    7 => V61::PromptNotFound,
                                    8 => V61::Unauthorized,
                                    9 => V61::RateLimited,
                                    10 => V61::Timeout,
                                    11 => V61::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e61 = {
                                            let l60 = *ptr3
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l60
                                        };
                                        V61::CustomCode(e61)
                                    }
                                };
                                let l62 = *ptr3
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l63 = *ptr3
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len64 = l63;
                                let bytes64 = _rt::Vec::from_raw_parts(
                                    l62.cast(),
                                    len64,
                                    len64,
                                );
                                let l65 = i32::from(
                                    *ptr3
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v61,
                                    message: _rt::string_lift(bytes64),
                                    data: match l65 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l66 = *ptr3
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l67 = *ptr3
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                _rt::string_lift(bytes68)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result69
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a tool
            pub fn call_tool(
                request: &CallToolRequest,
                context: Option<&AuthContext>,
            ) -> Result<CallToolResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 72 + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 72
                            + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::wasmcp::mcp::tools_types::CallToolRequest {
                        name: name1,
                        arguments: arguments1,
                    } = request;
                    let vec2 = name1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    match arguments1 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match context {
                        Some(e) => {
                            *ptr0
                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::wasmcp::mcp::authorization_types::AuthContext {
                                client_id: client_id4,
                                sub: sub4,
                                scopes: scopes4,
                                iss: iss4,
                                aud: aud4,
                                claims: claims4,
                                exp: exp4,
                                iat: iat4,
                                nbf: nbf4,
                                jwt: jwt4,
                            } = e;
                            match client_id4 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *ptr0
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr0
                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec6 = sub4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *ptr0
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr0
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                            let vec8 = scopes4;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr0
                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result8;
                            let vec9 = iss4;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *ptr0
                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr0
                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                            let vec11 = aud4;
                            let len11 = vec11.len();
                            let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec11.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result11 = if layout11.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout11);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec11.into_iter().enumerate() {
                                let base = result11
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec10 = e;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len11;
                            *ptr0
                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result11;
                            let vec15 = claims4;
                            let len15 = vec15.len();
                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec15.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t12_0, t12_1) = e;
                                    let vec13 = t12_0;
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = t12_1;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                            }
                            *ptr0
                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr0
                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result15;
                            *ptr0
                                .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(exp4);
                            match iat4 {
                                Some(e) => {
                                    *ptr0
                                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match nbf4 {
                                Some(e) => {
                                    *ptr0
                                        .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr0
                                        .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match jwt4 {
                                Some(e) => {
                                    *ptr0
                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec16 = e;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *ptr0
                                        .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *ptr0
                                        .add(64 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            cleanup_list
                                .extend_from_slice(
                                    &[
                                        (result8, layout8),
                                        (result11, layout11),
                                        (result15, layout15),
                                    ],
                                );
                        }
                        None => {
                            *ptr0
                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr17 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/tools@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "call-tool"]
                        fn wit_import18(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import18(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import18(ptr0, ptr17) };
                    let l19 = i32::from(*ptr17.add(0).cast::<u8>());
                    let result185 = match l19 {
                        0 => {
                            let e = {
                                let l20 = *ptr17
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l21 = *ptr17
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base164 = l20;
                                let len164 = l21;
                                let mut result164 = _rt::Vec::with_capacity(len164);
                                for i in 0..len164 {
                                    let base = base164
                                        .add(i * (48 + 18 * ::core::mem::size_of::<*const u8>()));
                                    let e164 = {
                                        let l22 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::wasmcp::mcp::mcp_types::ContentBlock as V163;
                                        let v163 = match l22 {
                                            0 => {
                                                let e163 = {
                                                    let l23 = *base.add(8).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len25 = l24;
                                                    let bytes25 = _rt::Vec::from_raw_parts(
                                                        l23.cast(),
                                                        len25,
                                                        len25,
                                                    );
                                                    let l26 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l30 = i32::from(
                                                        *base
                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::TextContent {
                                                        text: _rt::string_lift(bytes25),
                                                        meta: match l26 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l27 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l28 = *base
                                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len29 = l28;
                                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                                        l27.cast(),
                                                                        len29,
                                                                        len29,
                                                                    );
                                                                    _rt::string_lift(bytes29)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l30 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l31 = i32::from(
                                                                        *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l36 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l38 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l31 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l32 = *base
                                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l33 = *base
                                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base35 = l32;
                                                                                    let len35 = l33;
                                                                                    let mut result35 = _rt::Vec::with_capacity(len35);
                                                                                    for i in 0..len35 {
                                                                                        let base = base35.add(i * 1);
                                                                                        let e35 = {
                                                                                            let l34 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l34 as u8,
                                                                                            )
                                                                                        };
                                                                                        result35.push(e35);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base35, len35 * 1, 1);
                                                                                    result35
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l36 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l37 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l37
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l38 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l39 = *base
                                                                                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l40 = *base
                                                                                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len41 = l40;
                                                                                    let bytes41 = _rt::Vec::from_raw_parts(
                                                                                        l39.cast(),
                                                                                        len41,
                                                                                        len41,
                                                                                    );
                                                                                    _rt::string_lift(bytes41)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Text(e163)
                                            }
                                            1 => {
                                                let e163 = {
                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len44 = l43;
                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                        l42.cast(),
                                                        len44,
                                                        len44,
                                                    );
                                                    let l45 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l46 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    let l48 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l52 = i32::from(
                                                        *base
                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::ImageContent {
                                                        data: _rt::string_lift(bytes44),
                                                        mime_type: _rt::string_lift(bytes47),
                                                        meta: match l48 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l49 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l50 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len51 = l50;
                                                                    let bytes51 = _rt::Vec::from_raw_parts(
                                                                        l49.cast(),
                                                                        len51,
                                                                        len51,
                                                                    );
                                                                    _rt::string_lift(bytes51)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        annotations: match l52 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l53 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l58 = i32::from(
                                                                        *base
                                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l60 = i32::from(
                                                                        *base
                                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l53 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l54 = *base
                                                                                        .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l55 = *base
                                                                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base57 = l54;
                                                                                    let len57 = l55;
                                                                                    let mut result57 = _rt::Vec::with_capacity(len57);
                                                                                    for i in 0..len57 {
                                                                                        let base = base57.add(i * 1);
                                                                                        let e57 = {
                                                                                            let l56 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l56 as u8,
                                                                                            )
                                                                                        };
                                                                                        result57.push(e57);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base57, len57 * 1, 1);
                                                                                    result57
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l58 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l59 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l59
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l60 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l61 = *base
                                                                                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l62 = *base
                                                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len63 = l62;
                                                                                    let bytes63 = _rt::Vec::from_raw_parts(
                                                                                        l61.cast(),
                                                                                        len63,
                                                                                        len63,
                                                                                    );
                                                                                    _rt::string_lift(bytes63)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Image(e163)
                                            }
                                            2 => {
                                                let e163 = {
                                                    let l64 = *base.add(8).cast::<*mut u8>();
                                                    let l65 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len66 = l65;
                                                    let bytes66 = _rt::Vec::from_raw_parts(
                                                        l64.cast(),
                                                        len66,
                                                        len66,
                                                    );
                                                    let l67 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l68 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len69 = l68;
                                                    let bytes69 = _rt::Vec::from_raw_parts(
                                                        l67.cast(),
                                                        len69,
                                                        len69,
                                                    );
                                                    let l70 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::AudioContent {
                                                        data: _rt::string_lift(bytes66),
                                                        mime_type: _rt::string_lift(bytes69),
                                                        annotations: match l70 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l71 = i32::from(
                                                                        *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l76 = i32::from(
                                                                        *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l78 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l71 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l72 = *base
                                                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l73 = *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base75 = l72;
                                                                                    let len75 = l73;
                                                                                    let mut result75 = _rt::Vec::with_capacity(len75);
                                                                                    for i in 0..len75 {
                                                                                        let base = base75.add(i * 1);
                                                                                        let e75 = {
                                                                                            let l74 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l74 as u8,
                                                                                            )
                                                                                        };
                                                                                        result75.push(e75);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                                                    result75
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l76 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l77 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l77
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l78 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l79 = *base
                                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l80 = *base
                                                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len81 = l80;
                                                                                    let bytes81 = _rt::Vec::from_raw_parts(
                                                                                        l79.cast(),
                                                                                        len81,
                                                                                        len81,
                                                                                    );
                                                                                    _rt::string_lift(bytes81)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Audio(e163)
                                            }
                                            3 => {
                                                let e163 = {
                                                    let l82 = i32::from(*base.add(8).cast::<u8>());
                                                    let l86 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::wasmcp::mcp::mcp_types::ResourceContents as V115;
                                                    let v115 = match l86 {
                                                        0 => {
                                                            let e115 = {
                                                                let l87 = *base
                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l88 = *base
                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len89 = l88;
                                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                                    l87.cast(),
                                                                    len89,
                                                                    len89,
                                                                );
                                                                let l90 = i32::from(
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l94 = *base
                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l95 = *base
                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len96 = l95;
                                                                let bytes96 = _rt::Vec::from_raw_parts(
                                                                    l94.cast(),
                                                                    len96,
                                                                    len96,
                                                                );
                                                                let l97 = i32::from(
                                                                    *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::wasmcp::mcp::mcp_types::TextResourceContents {
                                                                    uri: _rt::string_lift(bytes89),
                                                                    mime_type: match l90 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l91 = *base
                                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l92 = *base
                                                                                    .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len93 = l92;
                                                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                                                    l91.cast(),
                                                                                    len93,
                                                                                    len93,
                                                                                );
                                                                                _rt::string_lift(bytes93)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    text: _rt::string_lift(bytes96),
                                                                    meta: match l97 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l98 = *base
                                                                                    .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l99 = *base
                                                                                    .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len100 = l99;
                                                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                                                    l98.cast(),
                                                                                    len100,
                                                                                    len100,
                                                                                );
                                                                                _rt::string_lift(bytes100)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V115::Text(e115)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e115 = {
                                                                let l101 = *base
                                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l102 = *base
                                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len103 = l102;
                                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                                    l101.cast(),
                                                                    len103,
                                                                    len103,
                                                                );
                                                                let l104 = i32::from(
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l108 = *base
                                                                    .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l109 = *base
                                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len110 = l109;
                                                                let bytes110 = _rt::Vec::from_raw_parts(
                                                                    l108.cast(),
                                                                    len110,
                                                                    len110,
                                                                );
                                                                let l111 = i32::from(
                                                                    *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::wasmcp::mcp::mcp_types::BlobResourceContents {
                                                                    uri: _rt::string_lift(bytes103),
                                                                    mime_type: match l104 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l105 = *base
                                                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l106 = *base
                                                                                    .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len107 = l106;
                                                                                let bytes107 = _rt::Vec::from_raw_parts(
                                                                                    l105.cast(),
                                                                                    len107,
                                                                                    len107,
                                                                                );
                                                                                _rt::string_lift(bytes107)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    blob: _rt::string_lift(bytes110),
                                                                    meta: match l111 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l112 = *base
                                                                                    .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l113 = *base
                                                                                    .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len114 = l113;
                                                                                let bytes114 = _rt::Vec::from_raw_parts(
                                                                                    l112.cast(),
                                                                                    len114,
                                                                                    len114,
                                                                                );
                                                                                _rt::string_lift(bytes114)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V115::Blob(e115)
                                                        }
                                                    };
                                                    let l116 = i32::from(
                                                        *base
                                                            .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::EmbeddedResource {
                                                        meta: match l82 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l83 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l84 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len85 = l84;
                                                                    let bytes85 = _rt::Vec::from_raw_parts(
                                                                        l83.cast(),
                                                                        len85,
                                                                        len85,
                                                                    );
                                                                    _rt::string_lift(bytes85)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        resource: v115,
                                                        annotations: match l116 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l117 = i32::from(
                                                                        *base
                                                                            .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l122 = i32::from(
                                                                        *base
                                                                            .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l124 = i32::from(
                                                                        *base
                                                                            .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::wasmcp::mcp::mcp_types::Annotations {
                                                                        audience: match l117 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l118 = *base
                                                                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l119 = *base
                                                                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base121 = l118;
                                                                                    let len121 = l119;
                                                                                    let mut result121 = _rt::Vec::with_capacity(len121);
                                                                                    for i in 0..len121 {
                                                                                        let base = base121.add(i * 1);
                                                                                        let e121 = {
                                                                                            let l120 = i32::from(*base.add(0).cast::<u8>());
                                                                                            super::super::super::wasmcp::mcp::mcp_types::Role::_lift(
                                                                                                l120 as u8,
                                                                                            )
                                                                                        };
                                                                                        result121.push(e121);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base121, len121 * 1, 1);
                                                                                    result121
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        priority: match l122 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l123 = *base
                                                                                        .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l123
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        last_modified: match l124 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l125 = *base
                                                                                        .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l126 = *base
                                                                                        .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len127 = l126;
                                                                                    let bytes127 = _rt::Vec::from_raw_parts(
                                                                                        l125.cast(),
                                                                                        len127,
                                                                                        len127,
                                                                                    );
                                                                                    _rt::string_lift(bytes127)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::Resource(e163)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e163 = {
                                                    let l128 = *base.add(8).cast::<*mut u8>();
                                                    let l129 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len130 = l129;
                                                    let bytes130 = _rt::Vec::from_raw_parts(
                                                        l128.cast(),
                                                        len130,
                                                        len130,
                                                    );
                                                    let l131 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l132 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len133 = l132;
                                                    let bytes133 = _rt::Vec::from_raw_parts(
                                                        l131.cast(),
                                                        len133,
                                                        len133,
                                                    );
                                                    let l134 = i32::from(
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l138 = i32::from(
                                                        *base
                                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l142 = i32::from(
                                                        *base
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l146 = i32::from(
                                                        *base
                                                            .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l148 = i32::from(
                                                        *base
                                                            .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::mcp_types::RawResource {
                                                        uri: _rt::string_lift(bytes130),
                                                        name: _rt::string_lift(bytes133),
                                                        title: match l134 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l135 = *base
                                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l136 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len137 = l136;
                                                                    let bytes137 = _rt::Vec::from_raw_parts(
                                                                        l135.cast(),
                                                                        len137,
                                                                        len137,
                                                                    );
                                                                    _rt::string_lift(bytes137)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        description: match l138 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l139 = *base
                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l140 = *base
                                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len141 = l140;
                                                                    let bytes141 = _rt::Vec::from_raw_parts(
                                                                        l139.cast(),
                                                                        len141,
                                                                        len141,
                                                                    );
                                                                    _rt::string_lift(bytes141)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        mime_type: match l142 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l143 = *base
                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l144 = *base
                                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len145 = l144;
                                                                    let bytes145 = _rt::Vec::from_raw_parts(
                                                                        l143.cast(),
                                                                        len145,
                                                                        len145,
                                                                    );
                                                                    _rt::string_lift(bytes145)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        size: match l146 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l147 = *base
                                                                        .add(12 + 13 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    l147 as u32
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        icons: match l148 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l149 = *base
                                                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l150 = *base
                                                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base162 = l149;
                                                                    let len162 = l150;
                                                                    let mut result162 = _rt::Vec::with_capacity(len162);
                                                                    for i in 0..len162 {
                                                                        let base = base162
                                                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                                        let e162 = {
                                                                            let l151 = *base.add(0).cast::<*mut u8>();
                                                                            let l152 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len153 = l152;
                                                                            let bytes153 = _rt::Vec::from_raw_parts(
                                                                                l151.cast(),
                                                                                len153,
                                                                                len153,
                                                                            );
                                                                            let l154 = i32::from(
                                                                                *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l158 = i32::from(
                                                                                *base
                                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            super::super::super::wasmcp::mcp::mcp_types::Icon {
                                                                                src: _rt::string_lift(bytes153),
                                                                                mime_type: match l154 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l155 = *base
                                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l156 = *base
                                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len157 = l156;
                                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                                l155.cast(),
                                                                                                len157,
                                                                                                len157,
                                                                                            );
                                                                                            _rt::string_lift(bytes157)
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                                sizes: match l158 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l159 = *base
                                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l160 = *base
                                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len161 = l160;
                                                                                            let bytes161 = _rt::Vec::from_raw_parts(
                                                                                                l159.cast(),
                                                                                                len161,
                                                                                                len161,
                                                                                            );
                                                                                            _rt::string_lift(bytes161)
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result162.push(e162);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base162,
                                                                        len162 * (8 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result162
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V163::ResourceLink(e163)
                                            }
                                        };
                                        v163
                                    };
                                    result164.push(e164);
                                }
                                _rt::cabi_dealloc(
                                    base164,
                                    len164 * (48 + 18 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let l165 = i32::from(
                                    *ptr17
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l169 = i32::from(
                                    *ptr17
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l171 = i32::from(
                                    *ptr17
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::tools_types::CallToolResult {
                                    content: result164,
                                    structured_content: match l165 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l166 = *ptr17
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l167 = *ptr17
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );
                                                _rt::string_lift(bytes168)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    is_error: match l169 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l170 = i32::from(
                                                    *ptr17
                                                        .add(1 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                _rt::bool_lift(l170 as u8)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    meta: match l171 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l172 = *ptr17
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l173 = *ptr17
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len174 = l173;
                                                let bytes174 = _rt::Vec::from_raw_parts(
                                                    l172.cast(),
                                                    len174,
                                                    len174,
                                                );
                                                _rt::string_lift(bytes174)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l175 = i32::from(
                                    *ptr17.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V177;
                                let v177 = match l175 {
                                    0 => V177::ParseError,
                                    1 => V177::InvalidRequest,
                                    2 => V177::MethodNotFound,
                                    3 => V177::InvalidParams,
                                    4 => V177::InternalError,
                                    5 => V177::ResourceNotFound,
                                    6 => V177::ToolNotFound,
                                    7 => V177::PromptNotFound,
                                    8 => V177::Unauthorized,
                                    9 => V177::RateLimited,
                                    10 => V177::Timeout,
                                    11 => V177::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e177 = {
                                            let l176 = *ptr17
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l176
                                        };
                                        V177::CustomCode(e177)
                                    }
                                };
                                let l178 = *ptr17
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l179 = *ptr17
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len180 = l179;
                                let bytes180 = _rt::Vec::from_raw_parts(
                                    l178.cast(),
                                    len180,
                                    len180,
                                );
                                let l181 = i32::from(
                                    *ptr17
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v177,
                                    message: _rt::string_lift(bytes180),
                                    data: match l181 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l182 = *ptr17
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l183 = *ptr17
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len184 = l183;
                                                let bytes184 = _rt::Vec::from_raw_parts(
                                                    l182.cast(),
                                                    len184,
                                                    len184,
                                                );
                                                _rt::string_lift(bytes184)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result185
                }
            }
        }
        /// Type definitions for the MCP lifecycle
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod lifecycle_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type JsonObject = super::super::super::wasmcp::mcp::mcp_types::JsonObject;
            pub type Icon = super::super::super::wasmcp::mcp::mcp_types::Icon;
            /// Protocol version string
            /// Common values: "2024-11-05", "2025-03-26", "2025-06-18"
            pub type ProtocolVersion = _rt::String;
            /// Information about an MCP implementation
            #[derive(Clone)]
            pub struct Implementation {
                /// Implementation name (e.g., "weather-server")
                pub name: _rt::String,
                /// Optional human-readable title
                pub title: Option<_rt::String>,
                /// Implementation version (e.g., "1.0.0")
                pub version: _rt::String,
                /// Optional website URL for more information
                pub website_url: Option<_rt::String>,
                /// Optional list of icons for the implementation
                pub icons: Option<_rt::Vec<Icon>>,
            }
            impl ::core::fmt::Debug for Implementation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Implementation")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("version", &self.version)
                        .field("website-url", &self.website_url)
                        .field("icons", &self.icons)
                        .finish()
                }
            }
            /// Root listing capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RootsCapability {
                /// Server will notify when roots list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for RootsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RootsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Prompts capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct PromptsCapability {
                /// Server will notify when prompts list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for PromptsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromptsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Resources capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ResourcesCapability {
                /// Server supports resource subscriptions
                pub subscribe: Option<bool>,
                /// Server will notify when resource list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ResourcesCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourcesCapability")
                        .field("subscribe", &self.subscribe)
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Tools capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ToolsCapability {
                /// Server will notify when tools list changes
                pub list_changed: Option<bool>,
            }
            impl ::core::fmt::Debug for ToolsCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolsCapability")
                        .field("list-changed", &self.list_changed)
                        .finish()
                }
            }
            /// Elicitation capability details
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ElicitationCapability {
                /// Whether the client supports JSON Schema validation
                pub schema_validation: Option<bool>,
            }
            impl ::core::fmt::Debug for ElicitationCapability {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ElicitationCapability")
                        .field("schema-validation", &self.schema_validation)
                        .finish()
                }
            }
            /// Capabilities that a client supports
            #[derive(Clone)]
            pub struct ClientCapabilities {
                /// Experimental/custom capabilities as JSON objects
                pub experimental: Option<JsonObject>,
                /// Support for roots (directory access)
                pub roots: Option<RootsCapability>,
                /// Support for LLM sampling (empty object when enabled)
                pub sampling: Option<JsonObject>,
                /// Support for user elicitation
                pub elicitation: Option<ElicitationCapability>,
            }
            impl ::core::fmt::Debug for ClientCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ClientCapabilities")
                        .field("experimental", &self.experimental)
                        .field("roots", &self.roots)
                        .field("sampling", &self.sampling)
                        .field("elicitation", &self.elicitation)
                        .finish()
                }
            }
            /// Capabilities that a server provides
            #[derive(Clone)]
            pub struct ServerCapabilities {
                /// Experimental/custom capabilities as JSON objects
                pub experimental: Option<JsonObject>,
                /// Server can send log messages (empty object when enabled)
                pub logging: Option<JsonObject>,
                /// Server supports argument autocompletion (empty object when enabled)
                pub completions: Option<JsonObject>,
                /// Server offers prompts
                pub prompts: Option<PromptsCapability>,
                /// Server offers resources
                pub resources: Option<ResourcesCapability>,
                /// Server offers tools
                pub tools: Option<ToolsCapability>,
            }
            impl ::core::fmt::Debug for ServerCapabilities {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerCapabilities")
                        .field("experimental", &self.experimental)
                        .field("logging", &self.logging)
                        .field("completions", &self.completions)
                        .field("prompts", &self.prompts)
                        .field("resources", &self.resources)
                        .field("tools", &self.tools)
                        .finish()
                }
            }
            /// Initialize request sent by client on connection
            #[derive(Clone)]
            pub struct InitializeRequest {
                /// Protocol version the client supports
                pub protocol_version: ProtocolVersion,
                /// Client's capabilities
                pub capabilities: ClientCapabilities,
                /// Client implementation details
                pub client_info: Implementation,
            }
            impl ::core::fmt::Debug for InitializeRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeRequest")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("client-info", &self.client_info)
                        .finish()
                }
            }
            /// Initialize response from server
            #[derive(Clone)]
            pub struct InitializeResult {
                /// Protocol version the server supports
                pub protocol_version: ProtocolVersion,
                /// Server's capabilities
                pub capabilities: ServerCapabilities,
                /// Server implementation details
                pub server_info: Implementation,
                /// Optional instructions for using the server
                pub instructions: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for InitializeResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("InitializeResult")
                        .field("protocol-version", &self.protocol_version)
                        .field("capabilities", &self.capabilities)
                        .field("server-info", &self.server_info)
                        .field("instructions", &self.instructions)
                        .finish()
                }
            }
        }
        /// A lifecycle for client-server connections that ensures proper capability negotiation and state management.
        /// Initialization: Capability negotiation and protocol version agreement
        /// Operation: Normal protocol communication
        /// Shutdown: Graceful termination of the connection
        ///
        /// https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod lifecycle {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type McpError = super::super::super::wasmcp::mcp::mcp_types::McpError;
            pub type InitializeRequest = super::super::super::wasmcp::mcp::lifecycle_types::InitializeRequest;
            pub type InitializeResult = super::super::super::wasmcp::mcp::lifecycle_types::InitializeResult;
            #[allow(unused_unsafe, clippy::all)]
            /// Handle session initialization
            /// Implementations should declare their capabilities here
            pub fn initialize(
                request: &InitializeRequest,
            ) -> Result<InitializeResult, McpError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 29 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 29 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::wasmcp::mcp::lifecycle_types::InitializeRequest {
                        protocol_version: protocol_version1,
                        capabilities: capabilities1,
                        client_info: client_info1,
                    } = request;
                    let vec2 = protocol_version1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    let super::super::super::wasmcp::mcp::lifecycle_types::ClientCapabilities {
                        experimental: experimental3,
                        roots: roots3,
                        sampling: sampling3,
                        elicitation: elicitation3,
                    } = capabilities1;
                    match experimental3 {
                        Some(e) => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match roots3 {
                        Some(e) => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::wasmcp::mcp::lifecycle_types::RootsCapability {
                                list_changed: list_changed5,
                            } = e;
                            match list_changed5 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match sampling3 {
                        Some(e) => {
                            *ptr0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = e;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *ptr0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr0
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match elicitation3 {
                        Some(e) => {
                            *ptr0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let super::super::super::wasmcp::mcp::lifecycle_types::ElicitationCapability {
                                schema_validation: schema_validation7,
                            } = e;
                            match schema_validation7 {
                                Some(e) => {
                                    *ptr0
                                        .add(1 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(2 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(1 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let super::super::super::wasmcp::mcp::lifecycle_types::Implementation {
                        name: name8,
                        title: title8,
                        version: version8,
                        website_url: website_url8,
                        icons: icons8,
                    } = client_info1;
                    let vec9 = name8;
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    *ptr0
                        .add(11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len9;
                    *ptr0
                        .add(10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr9.cast_mut();
                    match title8 {
                        Some(e) => {
                            *ptr0
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec10 = e;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len10;
                            *ptr0
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec11 = version8;
                    let ptr11 = vec11.as_ptr().cast::<u8>();
                    let len11 = vec11.len();
                    *ptr0
                        .add(16 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len11;
                    *ptr0
                        .add(15 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr11.cast_mut();
                    match website_url8 {
                        Some(e) => {
                            *ptr0
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec12 = e;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            *ptr0
                                .add(19 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len12;
                            *ptr0
                                .add(18 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr12.cast_mut();
                        }
                        None => {
                            *ptr0
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match icons8 {
                        Some(e) => {
                            *ptr0
                                .add(20 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec17 = e;
                            let len17 = vec17.len();
                            let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec17.len() * (8 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result17 = if layout17.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout17);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec17.into_iter().enumerate() {
                                let base = result17
                                    .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::wasmcp::mcp::mcp_types::Icon {
                                        src: src13,
                                        mime_type: mime_type13,
                                        sizes: sizes13,
                                    } = e;
                                    let vec14 = src13;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                    match mime_type13 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = e;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match sizes13 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec16 = e;
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr0
                                .add(22 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len17;
                            *ptr0
                                .add(21 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result17;
                            cleanup_list.extend_from_slice(&[(result17, layout17)]);
                        }
                        None => {
                            *ptr0
                                .add(20 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/lifecycle@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "initialize"]
                        fn wit_import19(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import19(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import19(ptr0, ptr18) };
                    let l20 = i32::from(*ptr18.add(0).cast::<u8>());
                    let result90 = match l20 {
                        0 => {
                            let e = {
                                let l21 = *ptr18
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr18
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(
                                    l21.cast(),
                                    len23,
                                    len23,
                                );
                                let l24 = i32::from(
                                    *ptr18
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l28 = i32::from(
                                    *ptr18
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l32 = i32::from(
                                    *ptr18
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l36 = i32::from(
                                    *ptr18
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l39 = i32::from(
                                    *ptr18
                                        .add(3 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l44 = i32::from(
                                    *ptr18
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l47 = *ptr18
                                    .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l48 = *ptr18
                                    .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len49 = l48;
                                let bytes49 = _rt::Vec::from_raw_parts(
                                    l47.cast(),
                                    len49,
                                    len49,
                                );
                                let l50 = i32::from(
                                    *ptr18
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l54 = *ptr18
                                    .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l55 = *ptr18
                                    .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len56 = l55;
                                let bytes56 = _rt::Vec::from_raw_parts(
                                    l54.cast(),
                                    len56,
                                    len56,
                                );
                                let l57 = i32::from(
                                    *ptr18
                                        .add(8 + 20 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l61 = i32::from(
                                    *ptr18
                                        .add(8 + 23 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l76 = i32::from(
                                    *ptr18
                                        .add(8 + 26 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::lifecycle_types::InitializeResult {
                                    protocol_version: _rt::string_lift(bytes23),
                                    capabilities: super::super::super::wasmcp::mcp::lifecycle_types::ServerCapabilities {
                                        experimental: match l24 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l25 = *ptr18
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *ptr18
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len27 = l26;
                                                    let bytes27 = _rt::Vec::from_raw_parts(
                                                        l25.cast(),
                                                        len27,
                                                        len27,
                                                    );
                                                    _rt::string_lift(bytes27)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        logging: match l28 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l29 = *ptr18
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l30 = *ptr18
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len31 = l30;
                                                    let bytes31 = _rt::Vec::from_raw_parts(
                                                        l29.cast(),
                                                        len31,
                                                        len31,
                                                    );
                                                    _rt::string_lift(bytes31)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        completions: match l32 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l33 = *ptr18
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *ptr18
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len35 = l34;
                                                    let bytes35 = _rt::Vec::from_raw_parts(
                                                        l33.cast(),
                                                        len35,
                                                        len35,
                                                    );
                                                    _rt::string_lift(bytes35)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        prompts: match l36 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l37 = i32::from(
                                                        *ptr18
                                                            .add(1 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::lifecycle_types::PromptsCapability {
                                                        list_changed: match l37 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l38 = i32::from(
                                                                        *ptr18
                                                                            .add(2 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l38 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        resources: match l39 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l40 = i32::from(
                                                        *ptr18
                                                            .add(4 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    let l42 = i32::from(
                                                        *ptr18
                                                            .add(6 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::lifecycle_types::ResourcesCapability {
                                                        subscribe: match l40 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(
                                                                        *ptr18
                                                                            .add(5 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        list_changed: match l42 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l43 = i32::from(
                                                                        *ptr18
                                                                            .add(7 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l43 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        tools: match l44 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l45 = i32::from(
                                                        *ptr18
                                                            .add(9 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::wasmcp::mcp::lifecycle_types::ToolsCapability {
                                                        list_changed: match l45 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l46 = i32::from(
                                                                        *ptr18
                                                                            .add(10 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    _rt::bool_lift(l46 as u8)
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    server_info: super::super::super::wasmcp::mcp::lifecycle_types::Implementation {
                                        name: _rt::string_lift(bytes49),
                                        title: match l50 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l51 = *ptr18
                                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l52 = *ptr18
                                                        .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len53 = l52;
                                                    let bytes53 = _rt::Vec::from_raw_parts(
                                                        l51.cast(),
                                                        len53,
                                                        len53,
                                                    );
                                                    _rt::string_lift(bytes53)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        version: _rt::string_lift(bytes56),
                                        website_url: match l57 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l58 = *ptr18
                                                        .add(8 + 21 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l59 = *ptr18
                                                        .add(8 + 22 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len60 = l59;
                                                    let bytes60 = _rt::Vec::from_raw_parts(
                                                        l58.cast(),
                                                        len60,
                                                        len60,
                                                    );
                                                    _rt::string_lift(bytes60)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        icons: match l61 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l62 = *ptr18
                                                        .add(8 + 24 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l63 = *ptr18
                                                        .add(8 + 25 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base75 = l62;
                                                    let len75 = l63;
                                                    let mut result75 = _rt::Vec::with_capacity(len75);
                                                    for i in 0..len75 {
                                                        let base = base75
                                                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                                                        let e75 = {
                                                            let l64 = *base.add(0).cast::<*mut u8>();
                                                            let l65 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len66 = l65;
                                                            let bytes66 = _rt::Vec::from_raw_parts(
                                                                l64.cast(),
                                                                len66,
                                                                len66,
                                                            );
                                                            let l67 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l71 = i32::from(
                                                                *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::wasmcp::mcp::mcp_types::Icon {
                                                                src: _rt::string_lift(bytes66),
                                                                mime_type: match l67 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l68 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l69 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len70 = l69;
                                                                            let bytes70 = _rt::Vec::from_raw_parts(
                                                                                l68.cast(),
                                                                                len70,
                                                                                len70,
                                                                            );
                                                                            _rt::string_lift(bytes70)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                sizes: match l71 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l72 = *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l73 = *base
                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len74 = l73;
                                                                            let bytes74 = _rt::Vec::from_raw_parts(
                                                                                l72.cast(),
                                                                                len74,
                                                                                len74,
                                                                            );
                                                                            _rt::string_lift(bytes74)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        result75.push(e75);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base75,
                                                        len75 * (8 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result75
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    },
                                    instructions: match l76 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l77 = *ptr18
                                                    .add(8 + 27 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l78 = *ptr18
                                                    .add(8 + 28 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len79 = l78;
                                                let bytes79 = _rt::Vec::from_raw_parts(
                                                    l77.cast(),
                                                    len79,
                                                    len79,
                                                );
                                                _rt::string_lift(bytes79)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l80 = i32::from(
                                    *ptr18.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V82;
                                let v82 = match l80 {
                                    0 => V82::ParseError,
                                    1 => V82::InvalidRequest,
                                    2 => V82::MethodNotFound,
                                    3 => V82::InvalidParams,
                                    4 => V82::InternalError,
                                    5 => V82::ResourceNotFound,
                                    6 => V82::ToolNotFound,
                                    7 => V82::PromptNotFound,
                                    8 => V82::Unauthorized,
                                    9 => V82::RateLimited,
                                    10 => V82::Timeout,
                                    11 => V82::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e82 = {
                                            let l81 = *ptr18
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l81
                                        };
                                        V82::CustomCode(e82)
                                    }
                                };
                                let l83 = *ptr18
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l84 = *ptr18
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len85 = l84;
                                let bytes85 = _rt::Vec::from_raw_parts(
                                    l83.cast(),
                                    len85,
                                    len85,
                                );
                                let l86 = i32::from(
                                    *ptr18
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v82,
                                    message: _rt::string_lift(bytes85),
                                    data: match l86 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l87 = *ptr18
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l88 = *ptr18
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len89 = l88;
                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                    l87.cast(),
                                                    len89,
                                                    len89,
                                                );
                                                _rt::string_lift(bytes89)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result90
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Handle initialization complete notification
            pub fn client_initialized() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/lifecycle@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "client-initialized"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Handle shutdown request
            pub fn shutdown() -> Result<(), McpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/lifecycle@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result13 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                use super::super::super::wasmcp::mcp::mcp_types::ErrorCode as V5;
                                let v5 = match l3 {
                                    0 => V5::ParseError,
                                    1 => V5::InvalidRequest,
                                    2 => V5::MethodNotFound,
                                    3 => V5::InvalidParams,
                                    4 => V5::InternalError,
                                    5 => V5::ResourceNotFound,
                                    6 => V5::ToolNotFound,
                                    7 => V5::PromptNotFound,
                                    8 => V5::Unauthorized,
                                    9 => V5::RateLimited,
                                    10 => V5::Timeout,
                                    11 => V5::Cancelled,
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e5 = {
                                            let l4 = *ptr0
                                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            l4
                                        };
                                        V5::CustomCode(e5)
                                    }
                                };
                                let l6 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                let l9 = i32::from(
                                    *ptr0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::mcp_types::McpError {
                                    code: v5,
                                    message: _rt::string_lift(bytes8),
                                    data: match l9 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l10 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result13
                }
            }
        }
        /// Authorization capabilities are provided at the transport level, enabling MCP clients to make requests to restricted MCP servers on behalf of resource owners.
        ///
        /// https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod authorization {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ProviderAuthConfig = super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig;
            #[allow(unused_unsafe, clippy::all)]
            /// Get provider's auth configuration
            /// The transport should enforce authorization
            pub fn get_auth_config() -> Option<ProviderAuthConfig> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 17 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 17
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/authorization@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "get-auth-config"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result28 = match l2 {
                        0 => None,
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                let l6 = *ptr0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base11 = l6;
                                let len11 = l7;
                                let mut result11 = _rt::Vec::with_capacity(len11);
                                for i in 0..len11 {
                                    let base = base11
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e11 = {
                                        let l8 = *base.add(0).cast::<*mut u8>();
                                        let l9 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        _rt::string_lift(bytes10)
                                    };
                                    result11.push(e11);
                                }
                                _rt::cabi_dealloc(
                                    base11,
                                    len11 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l12 = *ptr0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len14 = l13;
                                let bytes14 = _rt::Vec::from_raw_parts(
                                    l12.cast(),
                                    len14,
                                    len14,
                                );
                                let l15 = i32::from(
                                    *ptr0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l16 = i32::from(
                                    *ptr0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l20 = i32::from(
                                    *ptr0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l24 = i32::from(
                                    *ptr0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::wasmcp::mcp::authorization_types::ProviderAuthConfig {
                                    expected_issuer: _rt::string_lift(bytes5),
                                    expected_audiences: result11,
                                    jwks_uri: _rt::string_lift(bytes14),
                                    pass_jwt: _rt::bool_lift(l15 as u8),
                                    expected_subject: match l16 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l17 = *ptr0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr0
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    policy: match l20 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l21 = *ptr0
                                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l22 = *ptr0
                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    policy_data: match l24 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l25 = *ptr0
                                                    .add(15 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l26 = *ptr0
                                                    .add(16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result28
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get cached JWKS for a given URI (optional - return none if not cached or not implemented)
            /// Allows providers to implement JWKS caching via WASI-KV or other persistence mechanisms
            /// The transport will call this before fetching from jwks-uri to check for cached keys
            pub fn jwks_cache_get(jwks_uri: &str) -> Option<_rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = jwks_uri;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/authorization@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "jwks-cache-get"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Cache JWKS for a given URI (optional - no-op if caching not implemented)
            /// The transport calls this after successfully fetching JWKS from jwks-uri
            /// Providers can implement caching via WASI-KV or other persistence mechanisms
            /// The jwks parameter contains the raw JWKS JSON string to cache
            pub fn jwks_cache_set(jwks_uri: &str, jwks: &str) -> () {
                unsafe {
                    let vec0 = jwks_uri;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = jwks;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:mcp/authorization@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "jwks-cache-set"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1) };
                }
            }
        }
    }
    pub mod otel_exporter {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type SpanContext = super::super::super::wasi::otel::tracing::SpanContext;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Span {
                handle: _rt::Resource<Span>,
            }
            impl Span {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Span {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasmcp:otel-exporter/api@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]span"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(name: &str, parent_context: Option<&SpanContext>) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let (
                            result9_0,
                            result9_1,
                            result9_2,
                            result9_3,
                            result9_4,
                            result9_5,
                            result9_6,
                            result9_7,
                            result9_8,
                        ) = match parent_context {
                            Some(e) => {
                                let super::super::super::wasi::otel::tracing::SpanContext {
                                    trace_id: trace_id1,
                                    span_id: span_id1,
                                    trace_flags: trace_flags1,
                                    is_remote: is_remote1,
                                    trace_state: trace_state1,
                                } = e;
                                let vec2 = trace_id1;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                let vec3 = span_id1;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                let flags4 = trace_flags1;
                                let vec8 = trace_state1;
                                let len8 = vec8.len();
                                let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec8.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result8 = if layout8.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout8);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let (t5_0, t5_1) = e;
                                        let vec6 = t5_0;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len6;
                                        *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                        let vec7 = t5_1;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len7;
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                (
                                    1i32,
                                    ptr2.cast_mut(),
                                    len2,
                                    ptr3.cast_mut(),
                                    len3,
                                    (flags4.bits() >> 0) as i32,
                                    match is_remote1 {
                                        true => 1,
                                        false => 0,
                                    },
                                    result8,
                                    len8,
                                )
                            }
                            None => {
                                (
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    0i32,
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:otel-exporter/api@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]span"]
                            fn wit_import10(
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import10(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import10(
                                ptr0.cast_mut(),
                                len0,
                                result9_0,
                                result9_1,
                                result9_2,
                                result9_3,
                                result9_4,
                                result9_5,
                                result9_6,
                                result9_7,
                                result9_8,
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { Span::from_handle(ret as u32) }
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_event(&self, name: &str) -> () {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:otel-exporter/api@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.add-event"]
                            fn wit_import1(_: i32, _: *mut u8, _: usize);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, ptr0.cast_mut(), len0)
                        };
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                pub fn finish(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasmcp:otel-exporter/api@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.finish"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_context(s: &Span) -> SpanContext {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 7 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 7
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:otel-exporter/api@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "get-context"]
                        fn wit_import1(_: i32, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1((s).handle() as i32, ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len4 = l3;
                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                    let l5 = *ptr0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l6 = *ptr0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len7 = l6;
                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                    let l8 = i32::from(
                        *ptr0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l9 = i32::from(
                        *ptr0
                            .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l10 = *ptr0
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l11 = *ptr0
                        .add(6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base18 = l10;
                    let len18 = l11;
                    let mut result18 = _rt::Vec::with_capacity(len18);
                    for i in 0..len18 {
                        let base = base18
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e18 = {
                            let l12 = *base.add(0).cast::<*mut u8>();
                            let l13 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len14 = l13;
                            let bytes14 = _rt::Vec::from_raw_parts(
                                l12.cast(),
                                len14,
                                len14,
                            );
                            let l15 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l16 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            (_rt::string_lift(bytes14), _rt::string_lift(bytes17))
                        };
                        result18.push(e18);
                    }
                    _rt::cabi_dealloc(
                        base18,
                        len18 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result19 = super::super::super::wasi::otel::tracing::SpanContext {
                        trace_id: _rt::string_lift(bytes4),
                        span_id: _rt::string_lift(bytes7),
                        trace_flags: super::super::super::wasi::otel::tracing::TraceFlags::empty()
                            | super::super::super::wasi::otel::tracing::TraceFlags::from_bits_retain(
                                ((l8 as u8) << 0) as _,
                            ),
                        is_remote: _rt::bool_lift(l9 as u8),
                        trace_state: result18,
                    };
                    result19
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_current_span() -> Option<Span> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasmcp:otel-exporter/api@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "get-current-span"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result4 = match l2 {
                        0 => None,
                        1 => {
                            let e = {
                                let l3 = *ptr0.add(4).cast::<i32>();
                                unsafe { Span::from_handle(l3 as u32) }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result4
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod otel_exporter {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SpanContext = super::super::super::super::wasi::otel::tracing::SpanContext;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Span {
                    handle: _rt::Resource<Span>,
                }
                type _SpanRep<T> = Option<T>;
                impl Span {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Span`.
                    pub fn new<T: GuestSpan>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _SpanRep<T> = Some(val);
                        let ptr: *mut _SpanRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestSpan>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestSpan>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestSpan>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _SpanRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestSpan>(&self) -> *mut _SpanRep<T> {
                        Span::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Span`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SpanBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Span>,
                }
                impl<'a> SpanBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestSpan>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _SpanRep<T> {
                        Span::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Span {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:otel-exporter/api@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]span"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_span_cabi<T: GuestSpan>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result10 = Span::new(
                        T::new(
                            _rt::string_lift(bytes0),
                            match arg2 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len1 = arg4;
                                        let bytes1 = _rt::Vec::from_raw_parts(
                                            arg3.cast(),
                                            len1,
                                            len1,
                                        );
                                        let len2 = arg6;
                                        let bytes2 = _rt::Vec::from_raw_parts(
                                            arg5.cast(),
                                            len2,
                                            len2,
                                        );
                                        let base9 = arg9;
                                        let len9 = arg10;
                                        let mut result9 = _rt::Vec::with_capacity(len9);
                                        for i in 0..len9 {
                                            let base = base9
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e9 = {
                                                let l3 = *base.add(0).cast::<*mut u8>();
                                                let l4 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                let l6 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l7 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                                            };
                                            result9.push(e9);
                                        }
                                        _rt::cabi_dealloc(
                                            base9,
                                            len9 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::wasi::otel::tracing::SpanContext {
                                            trace_id: _rt::string_lift(bytes1),
                                            span_id: _rt::string_lift(bytes2),
                                            trace_flags: super::super::super::super::wasi::otel::tracing::TraceFlags::empty()
                                                | super::super::super::super::wasi::otel::tracing::TraceFlags::from_bits_retain(
                                                    ((arg7 as u8) << 0) as _,
                                                ),
                                            is_remote: _rt::bool_lift(arg8 as u8),
                                            trace_state: result9,
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        ),
                    );
                    (result10).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_span_add_event_cabi<T: GuestSpan>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::add_event(
                        unsafe { SpanBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_span_finish_cabi<T: GuestSpan>(
                    arg0: *mut u8,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::finish(unsafe { SpanBorrow::lift(arg0 as u32 as usize) }.get());
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_context_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_context(unsafe {
                        SpanBorrow::lift(arg0 as u32 as usize)
                    });
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let super::super::super::super::wasi::otel::tracing::SpanContext {
                        trace_id: trace_id2,
                        span_id: span_id2,
                        trace_flags: trace_flags2,
                        is_remote: is_remote2,
                        trace_state: trace_state2,
                    } = result0;
                    let vec3 = (trace_id2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = (span_id2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr1.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr1
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr4.cast_mut();
                    let flags5 = trace_flags2;
                    *ptr1.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = ((flags5
                        .bits() >> 0) as i32) as u8;
                    *ptr1
                        .add(1 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<u8>() = (match is_remote2 {
                        true => 1,
                        false => 0,
                    }) as u8;
                    let vec9 = trace_state2;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t6_0, t6_1) = e;
                            let vec7 = (t6_0.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            let vec8 = (t6_1.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    *ptr1.add(6 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
                    *ptr1
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result9;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_context<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l3 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = *arg0
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l5 = *arg0
                        .add(6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base10 = l4;
                    let len10 = l5;
                    for i in 0..len10 {
                        let base = base10
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l6, l7, 1);
                            let l8 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l9 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l8, l9, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base10,
                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_current_span_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_current_span();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                pub trait Guest {
                    type Span: GuestSpan;
                    fn get_context(s: SpanBorrow<'_>) -> SpanContext;
                    fn get_current_span() -> Option<Span>;
                }
                pub trait GuestSpan: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:otel-exporter/api@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]span"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:otel-exporter/api@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]span"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(
                        name: _rt::String,
                        parent_context: Option<SpanContext>,
                    ) -> Self;
                    fn add_event(&self, name: _rt::String) -> ();
                    fn finish(&self) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_otel_exporter_api_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:otel-exporter/api@0.1.0#[constructor]span")] unsafe
                        extern "C" fn export_constructor_span(arg0 : * mut u8, arg1 :
                        usize, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 : * mut
                        u8, arg6 : usize, arg7 : i32, arg8 : i32, arg9 : * mut u8, arg10
                        : usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_span_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Span > (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7,
                        arg8, arg9, arg10) } } #[unsafe (export_name =
                        "wasmcp:otel-exporter/api@0.1.0#[method]span.add-event")] unsafe
                        extern "C" fn export_method_span_add_event(arg0 : * mut u8, arg1
                        : * mut u8, arg2 : usize,) { unsafe { $($path_to_types)*::
                        _export_method_span_add_event_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Span > (arg0, arg1, arg2) } } #[unsafe (export_name =
                        "wasmcp:otel-exporter/api@0.1.0#[method]span.finish")] unsafe
                        extern "C" fn export_method_span_finish(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        _export_method_span_finish_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Span > (arg0) } } #[unsafe (export_name =
                        "wasmcp:otel-exporter/api@0.1.0#get-context")] unsafe extern "C"
                        fn export_get_context(arg0 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_context_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_wasmcp:otel-exporter/api@0.1.0#get-context")] unsafe
                        extern "C" fn _post_return_get_context(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_get_context::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "wasmcp:otel-exporter/api@0.1.0#get-current-span")] unsafe extern
                        "C" fn export_get_current_span() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_current_span_cabi::<$ty > () } }
                        const _ : () = { #[doc(hidden)] #[unsafe (export_name =
                        "wasmcp:otel-exporter/api@0.1.0#[dtor]span")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Span::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Span > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_otel_exporter_api_0_1_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 7 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 7
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_tools_transport_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::otel_exporter::api::__export_wasmcp_otel_exporter_api_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::otel_exporter::api);
    };
}
#[doc(inline)]
pub(crate) use __export_tools_transport_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:mcp@0.2.0:tools-transport:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 5493] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xef)\x01A\x02\x01A&\x01\
B:\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\0\x01s\x04\0\x0ajson-value\x03\
\0\x02\x01s\x04\0\x0bjson-object\x03\0\x04\x01s\x04\0\x0bjson-schema\x03\0\x06\x01\
o\x02ss\x01p\x08\x04\0\x0bmeta-fields\x03\0\x09\x01ks\x01r\x03\x03srcs\x09mime-t\
ype\x0b\x05sizes\x0b\x04\0\x04icon\x03\0\x0c\x01p\x01\x01k\x0e\x01ku\x01r\x03\x08\
audience\x0f\x08priority\x10\x0dlast-modified\x0b\x04\0\x0bannotations\x03\0\x11\
\x01k\x05\x01k\x12\x01r\x03\x04texts\x04meta\x13\x0bannotations\x14\x04\0\x0ctex\
t-content\x03\0\x15\x01r\x04\x04datas\x09mime-types\x04meta\x13\x0bannotations\x14\
\x04\0\x0dimage-content\x03\0\x17\x01r\x03\x04datas\x09mime-types\x0bannotations\
\x14\x04\0\x0daudio-content\x03\0\x19\x01ky\x01p\x0d\x01k\x1c\x01r\x07\x03uris\x04\
names\x05title\x0b\x0bdescription\x0b\x09mime-type\x0b\x04size\x1b\x05icons\x1d\x04\
\0\x0craw-resource\x03\0\x1e\x01r\x04\x03uris\x09mime-type\x0b\x04texts\x04meta\x13\
\x04\0\x16text-resource-contents\x03\0\x20\x01r\x04\x03uris\x09mime-type\x0b\x04\
blobs\x04meta\x13\x04\0\x16blob-resource-contents\x03\0\"\x01q\x02\x04text\x01!\0\
\x04blob\x01#\0\x04\0\x11resource-contents\x03\0$\x01r\x03\x04meta\x13\x08resour\
ce%\x0bannotations\x14\x04\0\x11embedded-resource\x03\0&\x01q\x05\x04text\x01\x16\
\0\x05image\x01\x18\0\x05audio\x01\x1a\0\x08resource\x01'\0\x0dresource-link\x01\
\x1f\0\x04\0\x0dcontent-block\x03\0(\x01q\x0d\x0bparse-error\0\0\x0finvalid-requ\
est\0\0\x10method-not-found\0\0\x0einvalid-params\0\0\x0einternal-error\0\0\x12r\
esource-not-found\0\0\x0etool-not-found\0\0\x10prompt-not-found\0\0\x0cunauthori\
zed\0\0\x0crate-limited\0\0\x07timeout\0\0\x09cancelled\0\0\x0bcustom-code\x01z\0\
\x04\0\x0aerror-code\x03\0*\x01r\x03\x04code+\x07messages\x04data\x0b\x04\0\x09m\
cp-error\x03\0,\x01s\x04\0\x0eprogress-token\x03\0.\x01q\x02\x03str\x01s\0\x03nu\
m\x01x\0\x04\0\x0arequest-id\x03\00\x01m\x03\x04user\x09assistant\x06system\x04\0\
\x0cmessage-role\x03\02\x01r\x01\x04name\x0b\x04\0\x0amodel-hint\x03\04\x01p5\x01\
k6\x01r\x04\x05hints7\x0dcost-priority\x10\x0espeed-priority\x10\x15intelligence\
-priority\x10\x04\0\x11model-preferences\x03\08\x03\0\x1awasmcp:mcp/mcp-types@0.\
2.0\x05\0\x02\x03\0\0\x0bmeta-fields\x01B\x09\x02\x03\x02\x01\x01\x04\0\x0bmeta-\
fields\x03\0\0\x01ps\x01ks\x01r\x07\x0fexpected-issuers\x12expected-audiences\x02\
\x08jwks-uris\x08pass-jwt\x7f\x10expected-subject\x03\x06policy\x03\x0bpolicy-da\
ta\x03\x04\0\x14provider-auth-config\x03\0\x04\x01kw\x01r\x0a\x09client-id\x03\x03\
subs\x06scopes\x02\x03isss\x03aud\x02\x06claims\x01\x03expw\x03iat\x06\x03nbf\x06\
\x03jwt\x03\x04\0\x0cauth-context\x03\0\x07\x03\0$wasmcp:mcp/authorization-types\
@0.2.0\x05\x02\x02\x03\0\0\x0dcontent-block\x02\x03\0\0\x0ajson-value\x02\x03\0\0\
\x0bjson-object\x02\x03\0\0\x04icon\x02\x03\0\x01\x0cauth-context\x01B\x1f\x02\x03\
\x02\x01\x03\x04\0\x0dcontent-block\x03\0\0\x02\x03\x02\x01\x04\x04\0\x0ajson-va\
lue\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x0bjson-object\x03\0\x04\x02\x03\x02\x01\
\x06\x04\0\x04icon\x03\0\x06\x02\x03\x02\x01\x07\x04\0\x0cauth-context\x03\0\x08\
\x01ks\x01k\x7f\x01r\x05\x05title\x0a\x0eread-only-hint\x0b\x10destructive-hint\x0b\
\x0fidempotent-hint\x0b\x0fopen-world-hint\x0b\x04\0\x10tool-annotations\x03\0\x0c\
\x01k\x05\x01k\x0d\x01p\x07\x01k\x10\x01r\x07\x04names\x05title\x0a\x0bdescripti\
on\x0a\x0cinput-schema\x05\x0doutput-schema\x0e\x0bannotations\x0f\x05icons\x11\x04\
\0\x04tool\x03\0\x12\x01r\x02\x04names\x09arguments\x0e\x04\0\x11call-tool-reque\
st\x03\0\x14\x01p\x01\x01k\x03\x01r\x04\x07content\x16\x12structured-content\x17\
\x08is-error\x0b\x04meta\x0e\x04\0\x10call-tool-result\x03\0\x18\x01r\x01\x06cur\
sor\x0a\x04\0\x12list-tools-request\x03\0\x1a\x01p\x13\x01r\x02\x05tools\x1c\x0b\
next-cursor\x0a\x04\0\x11list-tools-result\x03\0\x1d\x03\0\x1cwasmcp:mcp/tools-t\
ypes@0.2.0\x05\x08\x02\x03\0\0\x09mcp-error\x02\x03\0\x02\x12list-tools-request\x02\
\x03\0\x02\x11list-tools-result\x02\x03\0\x02\x11call-tool-request\x02\x03\0\x02\
\x10call-tool-result\x01B\x13\x02\x03\x02\x01\x09\x04\0\x09mcp-error\x03\0\0\x02\
\x03\x02\x01\x07\x04\0\x0cauth-context\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x12li\
st-tools-request\x03\0\x04\x02\x03\x02\x01\x0b\x04\0\x11list-tools-result\x03\0\x06\
\x02\x03\x02\x01\x0c\x04\0\x11call-tool-request\x03\0\x08\x02\x03\x02\x01\x0d\x04\
\0\x10call-tool-result\x03\0\x0a\x01j\x01\x07\x01\x01\x01@\x01\x07request\x05\0\x0c\
\x04\0\x0alist-tools\x01\x0d\x01k\x03\x01j\x01\x0b\x01\x01\x01@\x02\x07request\x09\
\x07context\x0e\0\x0f\x04\0\x09call-tool\x01\x10\x03\0\x16wasmcp:mcp/tools@0.2.0\
\x05\x0e\x01B&\x02\x03\x02\x01\x01\x04\0\x0bmeta-fields\x03\0\0\x02\x03\x02\x01\x05\
\x04\0\x0bjson-object\x03\0\x02\x02\x03\x02\x01\x06\x04\0\x04icon\x03\0\x04\x01s\
\x04\0\x10protocol-version\x03\0\x06\x01ks\x01p\x05\x01k\x09\x01r\x05\x04names\x05\
title\x08\x07versions\x0bwebsite-url\x08\x05icons\x0a\x04\0\x0eimplementation\x03\
\0\x0b\x01k\x7f\x01r\x01\x0clist-changed\x0d\x04\0\x10roots-capability\x03\0\x0e\
\x01r\x01\x0clist-changed\x0d\x04\0\x12prompts-capability\x03\0\x10\x01r\x02\x09\
subscribe\x0d\x0clist-changed\x0d\x04\0\x14resources-capability\x03\0\x12\x01r\x01\
\x0clist-changed\x0d\x04\0\x10tools-capability\x03\0\x14\x01r\x01\x11schema-vali\
dation\x0d\x04\0\x16elicitation-capability\x03\0\x16\x01k\x03\x01k\x0f\x01k\x17\x01\
r\x04\x0cexperimental\x18\x05roots\x19\x08sampling\x18\x0belicitation\x1a\x04\0\x13\
client-capabilities\x03\0\x1b\x01k\x11\x01k\x13\x01k\x15\x01r\x06\x0cexperimenta\
l\x18\x07logging\x18\x0bcompletions\x18\x07prompts\x1d\x09resources\x1e\x05tools\
\x1f\x04\0\x13server-capabilities\x03\0\x20\x01r\x03\x10protocol-version\x07\x0c\
capabilities\x1c\x0bclient-info\x0c\x04\0\x12initialize-request\x03\0\"\x01r\x04\
\x10protocol-version\x07\x0ccapabilities!\x0bserver-info\x0c\x0cinstructions\x08\
\x04\0\x11initialize-result\x03\0$\x03\0\x20wasmcp:mcp/lifecycle-types@0.2.0\x05\
\x0f\x02\x03\0\x04\x12initialize-request\x02\x03\0\x04\x11initialize-result\x01B\
\x0d\x02\x03\x02\x01\x09\x04\0\x09mcp-error\x03\0\0\x02\x03\x02\x01\x10\x04\0\x12\
initialize-request\x03\0\x02\x02\x03\x02\x01\x11\x04\0\x11initialize-result\x03\0\
\x04\x01j\x01\x05\x01\x01\x01@\x01\x07request\x03\0\x06\x04\0\x0ainitialize\x01\x07\
\x01j\0\x01\x01\x01@\0\0\x08\x04\0\x12client-initialized\x01\x09\x04\0\x08shutdo\
wn\x01\x09\x03\0\x1awasmcp:mcp/lifecycle@0.2.0\x05\x12\x02\x03\0\x01\x14provider\
-auth-config\x01B\x0a\x02\x03\x02\x01\x13\x04\0\x14provider-auth-config\x03\0\0\x01\
k\x01\x01@\0\0\x02\x04\0\x0fget-auth-config\x01\x03\x01ks\x01@\x01\x08jwks-uris\0\
\x04\x04\0\x0ejwks-cache-get\x01\x05\x01@\x02\x08jwks-uris\x04jwkss\x01\0\x04\0\x0e\
jwks-cache-set\x01\x06\x03\0\x1ewasmcp:mcp/authorization@0.2.0\x05\x14\x01B\x05\x01\
r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\x01\x04\0\x03\
now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-clock@0.2.0\x05\
\x15\x02\x03\0\x07\x08datetime\x01B-\x02\x03\x02\x01\x16\x04\0\x08datetime\x03\0\
\0\x01s\x04\0\x08trace-id\x03\0\x02\x01s\x04\0\x07span-id\x03\0\x04\x01n\x01\x07\
sampled\x04\0\x0btrace-flags\x03\0\x06\x01o\x02ss\x01p\x08\x04\0\x0btrace-state\x03\
\0\x09\x01r\x05\x08trace-id\x03\x07span-id\x05\x0btrace-flags\x07\x09is-remote\x7f\
\x0btrace-state\x0a\x04\0\x0cspan-context\x03\0\x0b\x01m\x05\x06client\x06server\
\x08producer\x08consumer\x08internal\x04\0\x09span-kind\x03\0\x0d\x01s\x04\0\x03\
key\x03\0\x0f\x01ps\x01p\x7f\x01pu\x01px\x01q\x08\x06string\x01s\0\x04bool\x01\x7f\
\0\x03f64\x01u\0\x03s64\x01x\0\x0cstring-array\x01\x11\0\x0abool-array\x01\x12\0\
\x09f64-array\x01\x13\0\x09s64-array\x01\x14\0\x04\0\x05value\x03\0\x15\x01r\x02\
\x03key\x10\x05value\x16\x04\0\x09key-value\x03\0\x17\x01p\x18\x01r\x03\x04names\
\x04time\x01\x0aattributes\x19\x04\0\x05event\x03\0\x1a\x01r\x02\x0cspan-context\
\x0c\x0aattributes\x19\x04\0\x04link\x03\0\x1c\x01q\x03\x05unset\0\0\x02ok\0\0\x05\
error\x01s\0\x04\0\x06status\x03\0\x1e\x01ks\x01r\x04\x04names\x07version\x20\x0a\
schema-url\x20\x0aattributes\x19\x04\0\x15instrumentation-scope\x03\0!\x01p\x1b\x01\
p\x1d\x01r\x0e\x0cspan-context\x0c\x0eparent-span-ids\x09span-kind\x0e\x04names\x0a\
start-time\x01\x08end-time\x01\x0aattributes\x19\x06events#\x05links$\x06status\x1f\
\x15instrumentation-scope\"\x12dropped-attributesy\x0edropped-eventsy\x0ddropped\
-linksy\x04\0\x09span-data\x03\0%\x01@\x02\x04span&\x06parent\x0c\x01\0\x04\0\x08\
on-start\x01'\x01@\x01\x04span&\x01\0\x04\0\x06on-end\x01(\x01@\0\0\x0c\x04\0\x14\
current-span-context\x01)\x03\0\x1dwasi:otel/tracing@0.2.0-draft\x05\x17\x02\x03\
\0\x08\x0cspan-context\x01B\x11\x02\x03\x02\x01\x18\x04\0\x0cspan-context\x03\0\0\
\x04\0\x04span\x03\x01\x01k\x01\x01i\x02\x01@\x02\x04names\x0eparent-context\x03\
\0\x04\x04\0\x11[constructor]span\x01\x05\x01h\x02\x01@\x02\x04self\x06\x04names\
\x01\0\x04\0\x16[method]span.add-event\x01\x07\x01@\x01\x04self\x06\x01\0\x04\0\x13\
[method]span.finish\x01\x08\x01@\x01\x01s\x06\0\x01\x04\0\x0bget-context\x01\x09\
\x01k\x04\x01@\0\0\x0a\x04\0\x10get-current-span\x01\x0b\x03\0\x1ewasmcp:otel-ex\
porter/api@0.1.0\x05\x19\x01B\x11\x02\x03\x02\x01\x18\x04\0\x0cspan-context\x03\0\
\0\x04\0\x04span\x03\x01\x01k\x01\x01i\x02\x01@\x02\x04names\x0eparent-context\x03\
\0\x04\x04\0\x11[constructor]span\x01\x05\x01h\x02\x01@\x02\x04self\x06\x04names\
\x01\0\x04\0\x16[method]span.add-event\x01\x07\x01@\x01\x04self\x06\x01\0\x04\0\x13\
[method]span.finish\x01\x08\x01@\x01\x01s\x06\0\x01\x04\0\x0bget-context\x01\x09\
\x01k\x04\x01@\0\0\x0a\x04\0\x10get-current-span\x01\x0b\x04\0\x1ewasmcp:otel-ex\
porter/api@0.1.0\x05\x1a\x04\0\x20wasmcp:mcp/tools-transport@0.2.0\x04\0\x0b\x15\
\x01\0\x0ftools-transport\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit\
-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
