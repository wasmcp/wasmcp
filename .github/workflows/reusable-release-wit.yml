name: Reusable WIT Package Release

on:
  workflow_call:
    inputs:
      package-name:
        description: 'Package name (e.g. mcp-v2025-06-18, protocol, server)'
        required: true
        type: string
      version:
        description: 'Package version (e.g. 0.1.0 or 0.1.0-alpha.1)'
        required: true
        type: string
      wit-dir:
        description: 'WIT directory path relative to repo root'
        required: true
        type: string
      wkg-package:
        description: 'Full wkg package identifier (e.g. wasmcp:protocol)'
        required: true
        type: string
      tag-prefix:
        description: 'Git tag prefix (e.g. mcp-v2025-06-18-v, protocol-v, server-v)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: wasmcp

jobs:
  publish-wit:
    name: Publish WIT Package
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Install wit-deps
        run: |
          curl -sSL https://github.com/bytecodealliance/wit-deps/releases/download/v0.5.0/wit-deps-x86_64-unknown-linux-musl -o wit-deps
          chmod +x wit-deps
          sudo mv wit-deps /usr/local/bin/

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"

          [registry."ghcr.io".oci.auth]
          username = "${{ github.actor }}"
          password = "${{ secrets.GHCR_TOKEN }}"
          EOF

      - name: Fetch WIT dependencies
        working-directory: ${{ inputs.wit-dir }}/..
        run: wit-deps

      - name: Build WIT package
        working-directory: ${{ inputs.wit-dir }}/..
        run: wkg wit build

      - name: Publish WIT package
        working-directory: ${{ inputs.wit-dir }}/..
        run: |
          wasm_file=$(ls *.wasm | head -1)
          echo "Publishing: $wasm_file"
          wkg publish "$wasm_file"

      - name: Prepare artifact
        working-directory: ${{ inputs.wit-dir }}/..
        run: |
          wasm_file=$(ls *.wasm | head -1)
          safe_name=$(echo "$wasm_file" | tr ':' '_')
          if [ "$wasm_file" != "$safe_name" ]; then
            mv "$wasm_file" "$safe_name"
          fi

      - name: Create WIT source tarball for wit-deps
        run: |
          mkdir -p /tmp/wit-source
          cp -r ${{ inputs.wit-dir }} /tmp/wit-source/wit
          cd /tmp/wit-source
          tar -czf wasmcp-${{ inputs.package-name }}-${{ inputs.version }}-source.tar.gz wit/
          mv wasmcp-${{ inputs.package-name }}-${{ inputs.version }}-source.tar.gz ${{ github.workspace }}/${{ inputs.wit-dir }}/

      - name: Upload WIT package artifact
        uses: actions/upload-artifact@v4
        with:
          name: wit-package-${{ inputs.package-name }}-${{ inputs.version }}
          path: |
            ${{ inputs.wit-dir }}/*_*@${{ inputs.version }}.wasm
            ${{ inputs.wit-dir }}/*-source.tar.gz

      - name: Summary
        run: |
          echo "## ðŸŽ‰ WIT Package Published" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** ${{ inputs.package-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-wit
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download WIT package artifact
        uses: actions/download-artifact@v4
        with:
          name: wit-package-${{ inputs.package-name }}-${{ inputs.version }}
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag-prefix }}${{ inputs.version }}
          name: ${{ inputs.package-name }} v${{ inputs.version }}
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}
          files: artifacts/*
          body: |
            # WIT Package: ${{ inputs.package-name }} v${{ inputs.version }}

            ## WIT Interface Package

            This release publishes the WIT interface definitions for `${{ inputs.wkg-package }}`.

            **Package:** `${{ inputs.wkg-package }}@${{ inputs.version }}`
            **Registry:** `${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ inputs.package-name }}:${{ inputs.version }}`

            ## Usage

            ### With wkg (component composition)

            The WIT package is automatically downloaded by components during composition:

            ```bash
            wkg get ${{ inputs.wkg-package }}@${{ inputs.version }}
            ```

            ### With wit-deps (development dependencies)

            Use the source tarball in your `wit/deps.toml`:

            ```toml
            ${{ inputs.package-name }} = "https://github.com/${{ github.repository }}/releases/download/${{ inputs.tag-prefix }}${{ inputs.version }}/wasmcp-${{ inputs.package-name }}-${{ inputs.version }}-source.tar.gz"
            ```

            ## Next Steps

            1. Components will automatically fetch the new WIT version during build
            2. Release other WIT packages if needed (protocol, server, client)
            3. Release components once all WIT packages are published

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ inputs.tag-prefix }}${{ inputs.version }}

  all-jobs-complete:
    name: All Jobs Complete
    runs-on: ubuntu-latest
    needs: [publish-wit, create-release]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.publish-wit.result }}" != "success" ] || \
             [ "${{ needs.create-release.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "âœ… WIT package release completed successfully!"
