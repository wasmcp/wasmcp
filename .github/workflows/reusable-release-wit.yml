name: Reusable WIT Package Release

on:
  workflow_call:
    inputs:
      package-name:
        description: 'Package name (protocol, server, or client)'
        required: true
        type: string
      version:
        description: 'Package version (e.g. 0.1.0 or 0.1.0-alpha.1)'
        required: true
        type: string
      wit-dir:
        description: 'WIT directory path relative to repo root'
        required: true
        type: string
      wkg-package:
        description: 'Full wkg package identifier (e.g. wasmcp:protocol)'
        required: true
        type: string
      tag-prefix:
        description: 'Git tag prefix (e.g. protocol-v, server-v, client-v)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: wasmcp

jobs:
  validate:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Error: Invalid version format: ${{ inputs.version }}"
            echo "Expected: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

      - name: Check WIT package version matches
        run: |
          wit_version=$(grep -oP 'package ${{ inputs.wkg-package }}@\K[^;]+' ${{ inputs.wit-dir }}/*.wit | head -1)
          if [ "$wit_version" != "${{ inputs.version }}" ]; then
            echo "Error: WIT package version ($wit_version) does not match release version (${{ inputs.version }})"
            exit 1
          fi

  publish-wit:
    name: Publish WIT Package
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"

          [registry."ghcr.io".oci.auth]
          username = "${{ github.actor }}"
          password = "${{ secrets.GHCR_TOKEN }}"
          EOF

      - name: Check if WIT package already exists
        id: check-wit
        run: |
          if wkg get ${{ inputs.wkg-package }}@${{ inputs.version }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ WIT package ${{ inputs.wkg-package }}@${{ inputs.version }} already exists"
            exit 1
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "📦 WIT package ${{ inputs.wkg-package }}@${{ inputs.version }} not found, will publish"
          fi

      - name: Build WIT package
        run: |
          wkg wit build --wit-dir ${{ inputs.wit-dir }}
          echo "✅ Built WIT package: ${{ inputs.wkg-package }}@${{ inputs.version }}.wasm"

      - name: Publish WIT package
        run: |
          wkg publish ${{ inputs.wkg-package }}@${{ inputs.version }}.wasm
          echo "✅ Published WIT package: ${{ inputs.wkg-package }}@${{ inputs.version }}"

      - name: Rename WIT package for artifact upload
        run: |
          # Replace colons with underscores for filesystem compatibility
          safe_name=$(echo "${{ inputs.wkg-package }}" | tr ':' '_')
          mv "${{ inputs.wkg-package }}@${{ inputs.version }}.wasm" "${safe_name}@${{ inputs.version }}.wasm"

      - name: Upload WIT package artifact
        uses: actions/upload-artifact@v4
        with:
          name: wit-package-${{ inputs.package-name }}-${{ inputs.version }}
          path: "*_*@${{ inputs.version }}.wasm"

      - name: Summary
        run: |
          echo "## 🎉 WIT Package Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** \`${{ inputs.wkg-package }}@${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ inputs.package-name }}:${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Components will automatically fetch the new WIT version during build" >> $GITHUB_STEP_SUMMARY
          echo "2. Release other WIT packages if needed (protocol, server, client)" >> $GITHUB_STEP_SUMMARY
          echo "3. Release components once all WIT packages are published" >> $GITHUB_STEP_SUMMARY

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-wit
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download WIT package artifact
        uses: actions/download-artifact@v4
        with:
          name: wit-package-${{ inputs.package-name }}-${{ inputs.version }}
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag-prefix }}${{ inputs.version }}
          name: ${{ inputs.package-name }} v${{ inputs.version }}
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}
          files: artifacts/*
          body: |
            # WIT Package: ${{ inputs.package-name }} v${{ inputs.version }}

            ## WIT Interface Package

            This release publishes the WIT interface definitions for `${{ inputs.wkg-package }}`.

            **Package:** `${{ inputs.wkg-package }}@${{ inputs.version }}`
            **Registry:** `${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ inputs.package-name }}:${{ inputs.version }}`

            ## Usage

            The WIT package is automatically downloaded by components during composition. You can also fetch it directly:

            ```bash
            wkg get ${{ inputs.wkg-package }}@${{ inputs.version }}
            ```

            ## Next Steps

            1. Components will automatically fetch the new WIT version during build
            2. Release other WIT packages if needed (protocol, server, client)
            3. Release components once all WIT packages are published

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ inputs.tag-prefix }}${{ inputs.version }}

  all-jobs-complete:
    name: All Jobs Complete
    runs-on: ubuntu-latest
    needs: [validate, publish-wit, create-release]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.validate.result }}" != "success" ] || \
             [ "${{ needs.publish-wit.result }}" != "success" ] || \
             [ "${{ needs.create-release.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "✅ WIT package release ${{ inputs.wkg-package }}@${{ inputs.version }} completed successfully!"
          echo ""
          echo "Next steps:"
          echo "  1. Components will automatically fetch the new WIT version during build"
          echo "  2. Release other WIT packages if needed (protocol, server, client)"
          echo "  3. Release components once all WIT packages are published"
          echo "  4. Update release notes at https://github.com/${{ github.repository }}/releases/tag/${{ inputs.tag-prefix }}${{ inputs.version }}"
