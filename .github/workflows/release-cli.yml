name: Release CLI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'CLI version (e.g. 0.3.0 or 0.3.0)'
        required: true
        type: string

env:
  RUST_VERSION: "1.89"

jobs:
  validate:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Error: Invalid version format: ${{ inputs.version }}"
            echo "Expected: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

      - name: Check CLI version matches
        run: |
          cli_version=$(grep -oP '^version = "\K[^"]+' cli/Cargo.toml)
          if [ "$cli_version" != "${{ inputs.version }}" ]; then
            echo "⚠️ Warning: CLI Cargo.toml has version $cli_version but releasing ${{ inputs.version }}"
          fi

  build-cli:
    name: Build CLI (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: wasmcp
            asset_name: wasmcp-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: wasmcp
            asset_name: wasmcp-aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: wasmcp
            asset_name: wasmcp-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: wasmcp
            asset_name: wasmcp-aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.target }}
          cache-key: release-cli-${{ matrix.target }}
          workspaces: cli

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Build CLI
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cd cli
          cargo build --release --target ${{ matrix.target }}
          echo "✅ Built CLI for ${{ matrix.target }}"

      - name: Generate CLI SBOM
        run: |
          cd cli
          cargo cyclonedx --format json --override-filename wasmcp-cli-${{ matrix.target }}-sbom
          cargo cyclonedx --format xml --override-filename wasmcp-cli-${{ matrix.target }}-sbom

      - name: Strip binary
        run: |
          strip cli/target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || true

      - name: Create tarball
        run: |
          cd cli/target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.tar.gz ${{ github.workspace }}/

      - name: Generate checksum
        run: |
          sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-${{ inputs.version }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.sha256
            cli/wasmcp-cli-${{ matrix.target }}-sbom.json
            cli/wasmcp-cli-${{ matrix.target }}-sbom.xml

  test-install-script:
    name: Test Install Script
    runs-on: ${{ matrix.os }}
    needs: build-cli
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create local release structure for testing
        run: |
          mkdir -p test-release
          find artifacts -name "*.tar.gz" -exec cp {} test-release/ \;
          find artifacts -name "*.sha256" -exec cp {} test-release/ \;
          ls -la test-release/

      - name: Start local HTTP server with release files
        run: |
          cd test-release
          python3 -m http.server 8888 &
          sleep 2
          curl -I http://localhost:8888/ || echo "Server not ready, waiting..."
          sleep 2

      - name: Test install script (dry run validation)
        run: |
          # Test help
          bash install.sh --help

          # Validate script syntax
          bash -n install.sh

      - name: Test install script functions
        run: |
          # Create a test script that extracts and tests the functions
          cat > test-functions.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          detect_os() {
              local os
              os=$(uname -s)
              case "$os" in
                  Linux*)
                      echo "unknown-linux-gnu"
                      ;;
                  Darwin*)
                      echo "apple-darwin"
                      ;;
                  *)
                      echo "Unsupported operating system: $os" >&2
                      exit 1
                      ;;
              esac
          }

          detect_arch() {
              local arch
              arch=$(uname -m)
              case "$arch" in
                  x86_64)
                      echo "x86_64"
                      ;;
                  arm64 | aarch64)
                      echo "aarch64"
                      ;;
                  *)
                      echo "Unsupported architecture: $arch" >&2
                      exit 1
                      ;;
              esac
          }

          # Test detection functions
          os=$(detect_os)
          arch=$(detect_arch)

          echo "Detected OS: $os"
          echo "Detected Arch: $arch"

          # Verify expected values
          case "$(uname -s)" in
            Linux*) [[ "$os" == "unknown-linux-gnu" ]] || exit 1 ;;
            Darwin*) [[ "$os" == "apple-darwin" ]] || exit 1 ;;
          esac

          case "$(uname -m)" in
            x86_64) [[ "$arch" == "x86_64" ]] || exit 1 ;;
            arm64|aarch64) [[ "$arch" == "aarch64" ]] || exit 1 ;;
          esac

          echo "✅ Detection functions work correctly"
          EOF

          chmod +x test-functions.sh
          ./test-functions.sh

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-cli, test-install-script]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Organize artifacts for upload
        run: |
          mkdir -p release-files
          find artifacts -type f -exec cp {} release-files/ \;
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: cli-v${{ inputs.version }}
          name: CLI v${{ inputs.version }}
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}
          files: release-files/*
          body: |
            # CLI v${{ inputs.version }}

            ## Quick Install (Recommended)

            Install wasmcp with a single command:

            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
            ```

            **Install specific version:**
            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash -s -- --version ${{ inputs.version }}
            ```

            The install script will:
            - Detect your OS and architecture automatically
            - Download and verify the checksum
            - Install to `~/.wasmcp/bin`
            - Configure your shell PATH

            ## Manual Installation

            Download the CLI for your platform:

            **Linux (x86_64):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/cli-v${{ inputs.version }}/wasmcp-x86_64-unknown-linux-gnu.tar.gz | tar -xz
            sudo mv wasmcp /usr/local/bin/
            ```

            **Linux (ARM64):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/cli-v${{ inputs.version }}/wasmcp-aarch64-unknown-linux-gnu.tar.gz | tar -xz
            sudo mv wasmcp /usr/local/bin/
            ```

            **macOS (Apple Silicon):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/cli-v${{ inputs.version }}/wasmcp-aarch64-apple-darwin.tar.gz | tar -xz
            sudo mv wasmcp /usr/local/bin/
            ```

            **macOS (Intel):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/cli-v${{ inputs.version }}/wasmcp-x86_64-apple-darwin.tar.gz | tar -xz
            sudo mv wasmcp /usr/local/bin/
            ```

            ## 🔒 Supply Chain Security

            This release includes:
            - **SBOM** (CycloneDX format) for CLI binaries
            - **SHA256 checksums** for all artifacts

            ### Verifying Downloads

            ```bash
            # Download CLI for Linux x86_64
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/cli-v${{ inputs.version }}/wasmcp-x86_64-unknown-linux-gnu.tar.gz -o wasmcp.tar.gz
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/cli-v${{ inputs.version }}/wasmcp-x86_64-unknown-linux-gnu.sha256 -o wasmcp.sha256

            # Verify checksum
            sha256sum -c wasmcp.sha256
            ```

            ## Quick Start

            ```bash
            # Verify installation
            wasmcp --version

            # Create a new component
            wasmcp new my-tools --language rust

            # Build and compose
            cd my-tools
            make
            wasmcp compose server target/wasm32-wasip2/release/my_tools.wasm -o server.wasm

            # Run
            wasmtime serve -Scli server.wasm
            ```

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/cli-v${{ inputs.version }}

  all-jobs-complete:
    name: All Jobs Complete
    runs-on: ubuntu-latest
    needs: [validate, build-cli, test-install-script, create-release]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.validate.result }}" != "success" ] || \
             [ "${{ needs.build-cli.result }}" != "success" ] || \
             [ "${{ needs.test-install-script.result }}" != "success" ] || \
             [ "${{ needs.create-release.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "✅ CLI release v${{ inputs.version }} completed successfully!"
          echo ""
          echo "Next steps:"
          echo "  1. Test CLI: curl -fsSL https://github.com/${{ github.repository }}/releases/download/cli-v${{ inputs.version }}/wasmcp-x86_64-unknown-linux-gnu.tar.gz | tar -xz"
          echo "  2. Update release notes at https://github.com/${{ github.repository }}/releases/tag/cli-v${{ inputs.version }}"
