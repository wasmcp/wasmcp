name: CI

# Continuous Integration workflow for wasmcp
#
# Caching Strategy:
#   - Rust compilation artifacts cached per job (lint, cli, components)
#   - Caches saved on main branch and PRs for fast subsequent runs
#   - Registry index and git dependencies cached globally
#   - Separate cache keys prevent cross-contamination between jobs
#
# Jobs:
#   1. lint: Format and clippy checks on workspace root
#   2. build-cli: Build wasmcp CLI binary (native x86_64-linux)
#   3. build-components: Build framework components (wasm32-wasip2)
#   4. test-templates: End-to-end tests with all language templates

on:
  pull_request:
    branches: [ main ]

# Cancel in-progress runs when a new commit is pushed to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUST_VERSION: "1.89"
  CARGO_COMPONENT_VERSION: "0.21.1"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt,clippy
          cache-key: lint
          workspaces: . -> cli

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: cli
          workspaces: cli

      - name: Build CLI
        run: cd cli && cargo build --release
        env:
          # Improve build times with parallel codegen
          CARGO_BUILD_JOBS: 4

      - name: Test CLI
        run: cd cli && cargo test

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-cli-linux
          path: target/release/wasmcp

  build-components:
    name: Build Framework Components
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip2
          cache-key: components
          # Cache all component crates (8 framework components)
          workspaces: |
            crates/error-writer
            crates/http-transport
            crates/initialize-handler
            crates/initialize-writer
            crates/request
            crates/resources-writer
            crates/stdio-transport
            crates/tools-writer

      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component@${{ env.CARGO_COMPONENT_VERSION }}

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"
          EOF

      - name: Build all components
        run: cd crates && make

      - name: Check component lockfile is up to date
        run: |
          cargo component update --dry-run 2>&1 | tee update-check.log
          if grep -q "Updating" update-check.log; then
            echo "❌ Cargo-component.lock is out of date!"
            echo "Run 'cargo component update' and commit the changes."
            exit 1
          fi
          echo "✅ Component lockfile is up to date"

      - name: Upload component artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-components
          path: crates/*/target/wasm32-wasip2/release/*.wasm

  test-templates:
    name: Test templates (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: build-cli
    strategy:
      matrix:
        language: [python, rust, typescript, go]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Download CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: wasmcp-cli-linux
          path: /tmp/wasmcp-bin

      - name: Install wasmcp CLI
        run: |
          chmod +x /tmp/wasmcp-bin/wasmcp
          sudo mv /tmp/wasmcp-bin/wasmcp /usr/local/bin/

      - name: Install wasmtime
        run: |
          curl -fsSL https://github.com/bytecodealliance/wasmtime/releases/download/v29.0.0/wasmtime-v29.0.0-x86_64-linux.tar.xz | tar -xJ
          sudo mv wasmtime-v29.0.0-x86_64-linux/wasmtime /usr/local/bin/

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"
          EOF

      - name: Install language tooling (Rust)
        if: matrix.language == 'rust'
        run: |
          rustup update stable
          rustup target add wasm32-wasip2

      - name: Install cargo-component (Rust)
        if: matrix.language == 'rust'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component@${{ env.CARGO_COMPONENT_VERSION }}

      - name: Install language tooling (Python)
        if: matrix.language == 'python'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install componentize-py

      - name: Install language tooling (TypeScript)
        if: matrix.language == 'typescript'
        run: |
          npm install -g @bytecodealliance/jco

      - name: Install language tooling (Go)
        if: matrix.language == 'go'
        run: |
          curl -fsSL https://github.com/tinygo-org/tinygo/releases/download/v0.39.0/tinygo_0.39.0_amd64.deb -o tinygo.deb
          sudo dpkg -i tinygo.deb
          curl -fsSL https://github.com/bytecodealliance/wasm-tools/releases/download/v1.239.0/wasm-tools-1.239.0-x86_64-linux.tar.gz | tar -xz
          sudo mv wasm-tools-1.239.0-x86_64-linux/wasm-tools /usr/local/bin/
          go install go.bytecodealliance.org/cmd/wit-bindgen-go@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Create test project from template
        run: |
          wasmcp new ci-test-${{ matrix.language }} -t tools -l ${{ matrix.language }}

      - name: Build HTTP server
        run: cd ci-test-${{ matrix.language }} && make compose

      - name: Build stdio server
        run: cd ci-test-${{ matrix.language }} && make compose-stdio

      - name: Start HTTP server (background)
        run: |
          cd ci-test-${{ matrix.language }}
          wasmtime serve -Scommon mcp-server.wasm &
          echo $! > /tmp/server.pid
          sleep 2

      - name: Test HTTP server with MCP Inspector
        run: |
          # Test tools/list
          npx @modelcontextprotocol/inspector@0.16.8 --cli http://localhost:8080/mcp \
            --method tools/list

          # Test tools/call with echo tool
          response=$(npx @modelcontextprotocol/inspector@0.16.8 --cli http://localhost:8080/mcp \
            --method tools/call \
            --tool-name echo \
            --tool-arg message="Hello CI")

          # Verify response contains expected text
          echo "$response" | grep -q "Echo: Hello CI"

      - name: Stop HTTP server
        if: always()
        run: |
          if [ -f /tmp/server.pid ]; then
            kill $(cat /tmp/server.pid) || true
          fi

      - name: Test stdio server with MCP Inspector
        run: |
          cd ci-test-${{ matrix.language }}

          # Test tools/list
          response=$(npx @modelcontextprotocol/inspector@0.16.8 wasmtime run -Shttp mcp-server-stdio.wasm \
            --cli --transport stdio --method tools/list)

          echo "$response" | grep -q "echo"

          # Test tools/call with echo tool
          response=$(npx @modelcontextprotocol/inspector@0.16.8 wasmtime run -Shttp mcp-server-stdio.wasm \
            --cli --transport stdio --method tools/call --tool-name echo --tool-arg message="Hello Stdio CI")

          # Verify response contains expected text
          echo "$response" | grep -q "Echo: Hello Stdio CI"

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, build-cli, build-components, test-templates]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build-cli.result }}" != "success" ] || \
             [ "${{ needs.build-components.result }}" != "success" ] || \
             [ "${{ needs.test-templates.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
