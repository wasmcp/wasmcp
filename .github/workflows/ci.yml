name: CI

# Continuous Integration workflow for wasmcp
#
# Caching Strategy:
#   - Rust compilation artifacts cached per job (lint, cli, components)
#   - Caches saved on main branch and PRs for fast subsequent runs
#   - Registry index and git dependencies cached globally
#   - Separate cache keys prevent cross-contamination between jobs
#
# Jobs:
#   1. lint: Format and clippy checks on workspace root
#   2. build-cli: Build wasmcp CLI binary (native x86_64-linux)
#   3. build-components: Build framework components (wasm32-wasip2)
#   4. test-templates: End-to-end tests with all language templates

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Cancel in-progress runs when a new commit is pushed to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUST_VERSION: "1.89"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt,clippy
          targets: wasm32-wasip2
          cache-key: lint
          workspaces: . -> cli

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy (CLI only)
        run: cd cli && cargo clippy --all-targets --all-features --target x86_64-unknown-linux-gnu -- -D warnings
        # Note: Component clippy runs in build-components job which has WIT tooling

  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: cli
          workspaces: cli

      - name: Build CLI
        run: cd cli && cargo build --release --target x86_64-unknown-linux-gnu
        env:
          # Improve build times with parallel codegen
          CARGO_BUILD_JOBS: 4

      - name: Test CLI
        run: cd cli && cargo test --target x86_64-unknown-linux-gnu

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-cli-linux
          path: cli/target/x86_64-unknown-linux-gnu/release/wasmcp

  build-components:
    name: Build Framework Components
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip2
          cache-key: components
          # Cache all component crates (5 framework components)
          workspaces: |
            crates/http-client-notifications
            crates/http-transport
            crates/method-not-found
            crates/stdio-transport
            crates/tools-middleware

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"
          EOF

      - name: Fetch WIT dependencies
        run: |
          for crate in crates/*; do
            if [ -d "$crate/wit" ]; then
              echo "Fetching WIT deps for $(basename $crate)..."
              cd "$crate" && wkg wit fetch && cd ../..
            fi
          done

      - name: Build all components
        run: cargo build --release

      - name: Upload component artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-components
          path: target/wasm32-wasip2/release/*.wasm

  test-templates:
    name: Test templates (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: build-cli
    strategy:
      matrix:
        language: [python, rust]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Download CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: wasmcp-cli-linux
          path: /tmp/wasmcp-bin

      - name: Install wasmcp CLI
        run: |
          chmod +x /tmp/wasmcp-bin/wasmcp
          sudo mv /tmp/wasmcp-bin/wasmcp /usr/local/bin/

      - name: Install wasmtime
        run: |
          curl -fsSL https://github.com/bytecodealliance/wasmtime/releases/download/v29.0.0/wasmtime-v29.0.0-x86_64-linux.tar.xz | tar -xJ
          sudo mv wasmtime-v29.0.0-x86_64-linux/wasmtime /usr/local/bin/

      - name: Install language tooling (Rust)
        if: matrix.language == 'rust'
        run: |
          rustup update stable
          rustup target add wasm32-wasip2

      - name: Install language tooling (Python)
        if: matrix.language == 'python'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install componentize-py

      - name: Create test project from template
        run: |
          wasmcp new ci-test-${{ matrix.language }} --language ${{ matrix.language }}

      - name: Build component
        run: cd ci-test-${{ matrix.language }} && make

      - name: Compose HTTP server
        run: |
          cd ci-test-${{ matrix.language }}
          # Determine component path based on language
          if [ "${{ matrix.language }}" = "rust" ]; then
            COMPONENT="target/wasm32-wasip2/release/ci_test_${{ matrix.language }}.wasm"
          else
            # Python keeps hyphens in component names
            COMPONENT="target/ci-test-${{ matrix.language }}.wasm"
          fi
          wasmcp compose $COMPONENT -o mcp-server.wasm

      - name: Compose stdio server
        run: |
          cd ci-test-${{ matrix.language }}
          # Determine component path based on language
          if [ "${{ matrix.language }}" = "rust" ]; then
            COMPONENT="target/wasm32-wasip2/release/ci_test_${{ matrix.language }}.wasm"
          else
            # Python keeps hyphens in component names
            COMPONENT="target/ci-test-${{ matrix.language }}.wasm"
          fi
          wasmcp compose $COMPONENT --transport stdio -o mcp-server-stdio.wasm

      - name: Start HTTP server (background)
        run: |
          cd ci-test-${{ matrix.language }}
          wasmtime serve -Scommon mcp-server.wasm &
          echo $! > /tmp/server.pid
          sleep 2

      - name: Test HTTP server with MCP Inspector
        run: |
          # Test tools/list
          tools_list=$(npx @modelcontextprotocol/inspector@0.16.8 --cli http://localhost:8080/mcp \
            --method tools/list)

          # Verify tools are present (different per language)
          if [ "${{ matrix.language }}" = "rust" ]; then
            echo "$tools_list" | grep -q "sum"
            echo "$tools_list" | grep -q "sub"
          else
            echo "$tools_list" | grep -q "reverse"
            echo "$tools_list" | grep -q "uppercase"
          fi

          # Test tools/call
          if [ "${{ matrix.language }}" = "rust" ]; then
            response=$(npx @modelcontextprotocol/inspector@0.16.8 --cli http://localhost:8080/mcp \
              --method tools/call \
              --tool-name sum \
              --tool-arg a=10 --tool-arg b=32)
            echo "$response" | grep -q "42"
          else
            response=$(npx @modelcontextprotocol/inspector@0.16.8 --cli http://localhost:8080/mcp \
              --method tools/call \
              --tool-name reverse \
              --tool-arg text="hello")
            echo "$response" | grep -q "olleh"
          fi

      - name: Stop HTTP server
        if: always()
        run: |
          if [ -f /tmp/server.pid ]; then
            kill $(cat /tmp/server.pid) || true
          fi

      - name: Test stdio server with MCP Inspector
        run: |
          cd ci-test-${{ matrix.language }}

          # Test tools/list
          tools_list=$(npx @modelcontextprotocol/inspector@0.16.8 wasmtime run -Shttp mcp-server-stdio.wasm \
            --cli --transport stdio --method tools/list)

          # Verify tools are present (different per language)
          if [ "${{ matrix.language }}" = "rust" ]; then
            echo "$tools_list" | grep -q "sum"
            echo "$tools_list" | grep -q "sub"
          else
            echo "$tools_list" | grep -q "reverse"
            echo "$tools_list" | grep -q "uppercase"
          fi

          # Test tools/call
          if [ "${{ matrix.language }}" = "rust" ]; then
            response=$(npx @modelcontextprotocol/inspector@0.16.8 wasmtime run -Shttp mcp-server-stdio.wasm \
              --cli --transport stdio --method tools/call --tool-name sum --tool-arg a=10 --tool-arg b=32)
            echo "$response" | grep -q "42"
          else
            response=$(npx @modelcontextprotocol/inspector@0.16.8 wasmtime run -Shttp mcp-server-stdio.wasm \
              --cli --transport stdio --method tools/call --tool-name reverse --tool-arg text="hello")
            echo "$response" | grep -q "olleh"
          fi
