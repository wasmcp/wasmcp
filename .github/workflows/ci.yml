name: CI

# Continuous Integration workflow for wasmcp
#
# Caching Strategy:
#   - Rust compilation artifacts cached per job (lint, cli, components)
#   - Caches saved on main branch and PRs for fast subsequent runs
#   - Registry index and git dependencies cached globally
#   - Separate cache keys prevent cross-contamination between jobs
#
# Jobs:
#   1. lint: Format and clippy checks on workspace root
#   2. build-cli: Build wasmcp CLI binary (native x86_64-linux)
#   3. security-audit: Check dependencies for known vulnerabilities
#   4. build-components: Build framework components (wasm32-wasip2)
#
# Note: Template tests are in a separate workflow (test-templates.yml) that only
# runs when cli/ files change

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Cancel in-progress runs when a new commit is pushed to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUST_VERSION: "1.89"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: rustfmt,clippy
          targets: wasm32-wasip2
          cache-key: lint
          workspaces: . -> cli

      - name: Install wit-deps
        run: |
          curl -sSL https://github.com/bytecodealliance/wit-deps/releases/download/v0.5.0/wit-deps-x86_64-unknown-linux-musl -o wit-deps
          chmod +x wit-deps
          sudo mv wit-deps /usr/local/bin/

      - name: Fetch WIT dependencies
        run: |
          set -e
          for crate in crates/*; do
            if [ -d "$crate/wit" ]; then
              echo "Fetching WIT deps for $crate..."
              (cd "$crate" && wit-deps)
            fi
          done

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy (CLI only)
        run: cd cli && cargo clippy --all-targets --target x86_64-unknown-linux-gnu -- -D warnings
        # Note: Component clippy runs in build-components job which has WIT tooling

  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: cli
          workspaces: cli

      - name: Build CLI
        run: cd cli && cargo build --release --target x86_64-unknown-linux-gnu
        env:
          # Improve build times with parallel codegen
          CARGO_BUILD_JOBS: 4

      - name: Test CLI
        run: cd cli && cargo test --target x86_64-unknown-linux-gnu

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-cli-linux
          path: cli/target/x86_64-unknown-linux-gnu/release/wasmcp

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: audit

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  build-components:
    name: Build Framework Components
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip2
          cache-key: components
          # Cache all component crates (8 framework components)
          workspaces: |
            crates/http-messages
            crates/http-transport
            crates/method-not-found
            crates/prompts-middleware
            crates/resources-middleware
            crates/session-store
            crates/stdio-transport
            crates/tools-middleware

      - name: Install wit-deps
        run: |
          curl -sSL https://github.com/bytecodealliance/wit-deps/releases/download/v0.5.0/wit-deps-x86_64-unknown-linux-musl -o wit-deps
          chmod +x wit-deps
          sudo mv wit-deps /usr/local/bin/

      - name: Fetch WIT dependencies
        run: |
          set -e
          for crate in crates/*; do
            if [ -d "$crate/wit" ]; then
              echo "Fetching WIT deps for $crate..."
              (cd "$crate" && wit-deps update)
              # Also fetch draft2 WIT deps if they exist
              if [ -d "$crate/wit-draft2" ]; then
                echo "Fetching draft2 WIT deps for $crate..."
                (cd "$crate" && WIT_DEPS_PATH=wit-draft2 wit-deps update)
              fi
            fi
          done

      - name: Build all components (draft versions)
        run: |
          echo "Building all framework components (draft versions)..."
          cargo build --release --target wasm32-wasip2

      - name: Build draft2 versions
        run: |
          echo "Building http-transport draft2..."
          cd crates/http-transport
          cargo build --release --target wasm32-wasip2 --features draft2
          mv ../../target/wasm32-wasip2/release/http_transport.wasm ../../target/wasm32-wasip2/release/http_transport_draft2.wasm
          cd ../..

          echo "Building sessions draft2..."
          cd crates/session-store
          cargo build --release --target wasm32-wasip2 --features draft2
          mv ../../target/wasm32-wasip2/release/sessions.wasm ../../target/wasm32-wasip2/release/sessions_draft2.wasm
          cd ../..

      - name: Upload component artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-components
          path: target/wasm32-wasip2/release/*.wasm
