name: Reusable Component Release

on:
  workflow_call:
    inputs:
      component-name:
        description: 'Component name (e.g. http-transport, tools-middleware)'
        required: true
        type: string
      component-crate:
        description: 'Crate directory name in crates/ (usually same as component-name)'
        required: true
        type: string
      version:
        description: 'Component version (e.g. 0.1.0 or 0.1.0-beta.2)'
        required: true
        type: string
      wit-version:
        description: 'WIT package version (defaults to same as component version)'
        required: false
        type: string
      wkg-package:
        description: 'Full wkg package identifier (e.g. wasmcp:http-transport)'
        required: true
        type: string
      tag-prefix:
        description: 'Git tag prefix (e.g. http-transport-v)'
        required: true
        type: string

env:
  RUST_VERSION: "1.89"
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: wasmcp

jobs:
  validate:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      wit_version: ${{ steps.wit-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Error: Invalid version format: ${{ inputs.version }}"
            echo "Expected: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

      - name: Determine WIT version
        id: wit-version
        run: |
          if [ -n "${{ inputs.wit-version }}" ]; then
            echo "version=${{ inputs.wit-version }}" >> $GITHUB_OUTPUT
            echo "Using specified WIT version: ${{ inputs.wit-version }}"
          else
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using component version for WIT: ${{ inputs.version }}"
          fi

  verify-wit-packages:
    name: Verify WIT Source Tarballs
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Verify WIT source tarballs exist
        run: |
          WIT_VERSION="${{ needs.validate.outputs.wit_version }}"

          echo "Checking for required WIT source tarballs at version $WIT_VERSION..."

          # Check protocol source tarball
          protocol_url="https://github.com/${{ github.repository }}/releases/download/protocol-v${WIT_VERSION}/wasmcp-protocol-${WIT_VERSION}-source.tar.gz"
          if ! curl --fail --silent --head "$protocol_url" >/dev/null; then
            echo "❌ Error: Protocol WIT source tarball not found at:"
            echo "   $protocol_url"
            echo ""
            echo "Please publish the protocol WIT package first."
            exit 1
          fi
          echo "✅ Protocol source tarball exists: wasmcp-protocol-${WIT_VERSION}-source.tar.gz"

          # Check server source tarball
          server_url="https://github.com/${{ github.repository }}/releases/download/server-v${WIT_VERSION}/wasmcp-server-${WIT_VERSION}-source.tar.gz"
          if ! curl --fail --silent --head "$server_url" >/dev/null; then
            echo "❌ Error: Server WIT source tarball not found at:"
            echo "   $server_url"
            echo ""
            echo "Please publish the server WIT package first."
            exit 1
          fi
          echo "✅ Server source tarball exists: wasmcp-server-${WIT_VERSION}-source.tar.gz"

          echo ""
          echo "✅ All required WIT source tarballs are available"

  build-and-publish:
    name: Build and Publish Component
    runs-on: ubuntu-latest
    needs: verify-wit-packages
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip2
          cache-key: release-${{ inputs.component-name }}
          workspaces: crates/${{ inputs.component-crate }}

      - name: Install wit-deps
        run: |
          curl -sSL https://github.com/bytecodealliance/wit-deps/releases/download/v0.5.0/wit-deps-x86_64-unknown-linux-musl -o wit-deps
          chmod +x wit-deps
          sudo mv wit-deps /usr/local/bin/

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"

          [registry."ghcr.io".oci.auth]
          username = "${{ github.actor }}"
          password = "${{ secrets.GHCR_TOKEN }}"
          EOF

      - name: Fetch WIT dependencies
        run: |
          crate_dir="crates/${{ inputs.component-crate }}"
          if [ -d "$crate_dir/wit" ] && [ -f "$crate_dir/wit/deps.toml" ]; then
            echo "Fetching WIT deps for ${{ inputs.component-name }}..."
            cd "$crate_dir"
            wit-deps
          else
            echo "No WIT dependencies for ${{ inputs.component-name }}"
          fi

      - name: Build component
        run: |
          cd crates/${{ inputs.component-crate }}
          cargo build --release --target wasm32-wasip2
          echo "✅ Built ${{ inputs.component-name }}"

          # Show the built component
          component_file=$(ls ../../target/wasm32-wasip2/release/*.wasm | grep -i $(echo "${{ inputs.component-crate }}" | tr '-' '_'))
          ls -lh $component_file

      - name: Check if component already exists
        id: check-component
        run: |
          if wkg get ${{ inputs.wkg-package }}@${{ inputs.version }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Component ${{ inputs.wkg-package }}@${{ inputs.version }} already exists"
            exit 1
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "📦 Component ${{ inputs.wkg-package }}@${{ inputs.version }} not found, will publish"
          fi

      - name: Publish component
        run: |
          # Convert component-crate name to binary name (hyphens to underscores)
          binary_name=$(echo "${{ inputs.component-crate }}" | tr '-' '_')
          component_file="target/wasm32-wasip2/release/${binary_name}.wasm"

          wkg publish --package '${{ inputs.wkg-package }}@${{ inputs.version }}' "$component_file"
          echo "✅ Published ${{ inputs.wkg-package }}@${{ inputs.version }}"

      - name: Upload component artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.component-name }}-${{ inputs.version }}
          path: target/wasm32-wasip2/release/*.wasm

      - name: Summary
        run: |
          echo "## 🎉 Component Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Component:** \`${{ inputs.wkg-package }}@${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ inputs.component-name }}:${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Component will be automatically downloaded during composition" >> $GITHUB_STEP_SUMMARY
          echo "2. Make package public at https://github.com/orgs/${{ env.REGISTRY_NAMESPACE }}/packages" >> $GITHUB_STEP_SUMMARY

  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: sbom-${{ inputs.component-name }}
          workspaces: crates/${{ inputs.component-crate }}

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Download component artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.component-name }}-${{ inputs.version }}
          path: components

      - name: Generate component SBOM
        run: |
          cd crates/${{ inputs.component-crate }}
          cargo cyclonedx --format json --override-filename ${{ inputs.component-name }}-sbom
          cargo cyclonedx --format xml --override-filename ${{ inputs.component-name }}-sbom
          echo "✅ Generated component SBOM"
          ls -la *.{json,xml}

      - name: Generate component checksum
        run: |
          cd components
          sha256sum *.wasm > ../${{ inputs.component-name }}-checksums.txt
          echo "✅ Generated component checksum"

      - name: Upload SBOM and checksum
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.component-name }}-security-${{ inputs.version }}
          path: |
            crates/${{ inputs.component-crate }}/${{ inputs.component-name }}-sbom.*
            ${{ inputs.component-name }}-checksums.txt

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: generate-sbom
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag-prefix }}${{ inputs.version }}
          name: ${{ inputs.component-name }} v${{ inputs.version }}
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}
          files: |
            artifacts/${{ inputs.component-name }}-${{ inputs.version }}/*.wasm
            artifacts/${{ inputs.component-name }}-security-${{ inputs.version }}/*
          body: |
            # ${{ inputs.component-name }} v${{ inputs.version }}

            ## Framework Component Released

            This release publishes the `${{ inputs.wkg-package }}` component to `${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}`.

            **Component:** `${{ inputs.wkg-package }}@${{ inputs.version }}`
            **Registry:** `${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ inputs.component-name }}:${{ inputs.version }}`

            ## 🔒 Supply Chain Security

            This release includes:
            - **SBOM** (CycloneDX format) in JSON and XML formats
            - **SHA256 checksum** for the component artifact

            ### Verifying Component Download

            ```bash
            # Download checksum file
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ inputs.tag-prefix }}${{ inputs.version }}/${{ inputs.component-name }}-checksums.txt -o checksums.txt

            # Verify downloaded component
            sha256sum -c checksums.txt
            ```

            ## Usage

            This component is automatically downloaded during composition:

            ```bash
            wasmcp compose your-component.wasm -o server.wasm
            ```

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ inputs.tag-prefix }}${{ inputs.version }}

  all-jobs-complete:
    name: All Jobs Complete
    runs-on: ubuntu-latest
    needs: [validate, verify-wit-packages, build-and-publish, generate-sbom, create-release]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.validate.result }}" != "success" ] || \
             [ "${{ needs.verify-wit-packages.result }}" != "success" ] || \
             [ "${{ needs.build-and-publish.result }}" != "success" ] || \
             [ "${{ needs.generate-sbom.result }}" != "success" ] || \
             [ "${{ needs.create-release.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "✅ Component release ${{ inputs.wkg-package }}@${{ inputs.version }} completed successfully!"
          echo ""
          echo "Next steps:"
          echo "  1. Make package public at https://github.com/orgs/${{ env.REGISTRY_NAMESPACE }}/packages"
          echo "  2. Update release notes at https://github.com/${{ github.repository }}/releases/tag/${{ inputs.tag-prefix }}${{ inputs.version }}"
