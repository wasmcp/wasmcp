name: Release Components

# This workflow builds and publishes framework components.
#
# IMPORTANT: Components depend on WIT source tarballs created by the WIT release workflows.
# Before running this workflow, ensure the required WIT packages have been released:
#   1. Run "Release WIT Protocol Package" workflow
#   2. Run "Release WIT Server Package" workflow
#   3. Wait for both workflows to complete and publish source tarballs
#   4. Then run this workflow
#
# The source tarballs are fetched by wit-deps during the build process.

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Component version (e.g. 0.3.0 or 0.3.0)'
        required: true
        type: string
      wit_version:
        description: 'WIT package version (defaults to same as component version)'
        required: false
        type: string

env:
  RUST_VERSION: "1.89"
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: wasmcp

jobs:
  validate:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      wit_version: ${{ steps.wit-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Error: Invalid version format: ${{ inputs.version }}"
            echo "Expected: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

      - name: Determine WIT version
        id: wit-version
        run: |
          if [ -n "${{ inputs.wit_version }}" ]; then
            echo "version=${{ inputs.wit_version }}" >> $GITHUB_OUTPUT
            echo "Using specified WIT version: ${{ inputs.wit_version }}"
          else
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using component version for WIT: ${{ inputs.version }}"
          fi

      - name: Check WIT package versions
        run: |
          WIT_VERSION="${{ steps.wit-version.outputs.version }}"

          # Check protocol package version
          protocol_version=$(grep -hE 'package wasmcp:protocol@' wit/protocol/*.wit | grep -oE '[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?' | head -1)

          # Check server package version
          server_version=$(grep -hE 'package wasmcp:server@' wit/server/*.wit | grep -oE '[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?' | head -1)

          echo "Protocol package version: $protocol_version"
          echo "Server package version: $server_version"

          if [ "$protocol_version" != "$WIT_VERSION" ] || [ "$server_version" != "$WIT_VERSION" ]; then
            echo "⚠️ Warning: WIT package versions don't match expected version $WIT_VERSION"
            echo "  Protocol: $protocol_version"
            echo "  Server: $server_version"
            echo "This is OK if you're releasing components for an older WIT version"
          fi

          echo "Will use WIT packages: wasmcp:protocol@$WIT_VERSION and wasmcp:server@$WIT_VERSION"

  verify-wit-package:
    name: Verify WIT Source Tarballs
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Verify WIT source tarballs exist
        run: |
          WIT_VERSION="${{ needs.validate.outputs.wit_version }}"

          echo "Checking for required WIT source tarballs at version $WIT_VERSION..."

          # Check protocol source tarball
          protocol_url="https://github.com/${{ github.repository }}/releases/download/protocol-v${WIT_VERSION}/wasmcp-protocol-${WIT_VERSION}-source.tar.gz"
          if ! curl --fail --silent --head "$protocol_url" >/dev/null; then
            echo "❌ Error: Protocol WIT source tarball not found at:"
            echo "   $protocol_url"
            echo ""
            echo "Please publish the protocol WIT package first:"
            echo "  1. Go to Actions → Release WIT Protocol Package"
            echo "  2. Run workflow with version: $WIT_VERSION"
            echo "  3. Wait for completion and source tarball upload"
            exit 1
          fi
          echo "✅ Protocol source tarball exists: wasmcp-protocol-${WIT_VERSION}-source.tar.gz"

          # Check server source tarball
          server_url="https://github.com/${{ github.repository }}/releases/download/server-v${WIT_VERSION}/wasmcp-server-${WIT_VERSION}-source.tar.gz"
          if ! curl --fail --silent --head "$server_url" >/dev/null; then
            echo "❌ Error: Server WIT source tarball not found at:"
            echo "   $server_url"
            echo ""
            echo "Please publish the server WIT package first:"
            echo "  1. Go to Actions → Release WIT Server Package"
            echo "  2. Run workflow with version: $WIT_VERSION"
            echo "  3. Wait for completion and source tarball upload"
            exit 1
          fi
          echo "✅ Server source tarball exists: wasmcp-server-${WIT_VERSION}-source.tar.gz"

          echo ""
          echo "✅ All required WIT source tarballs are available"

  build-and-publish-components:
    name: Build and Publish All Components
    runs-on: ubuntu-latest
    needs: verify-wit-package
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip2
          cache-key: release-components
          workspaces: |
            crates/http-notifications
            crates/http-transport
            crates/method-not-found
            crates/stdio-transport
            crates/tools-middleware
            crates/resources-middleware

      - name: Install wit-deps
        run: |
          curl -sSL https://github.com/bytecodealliance/wit-deps/releases/download/v0.5.0/wit-deps-x86_64-unknown-linux-musl -o wit-deps
          chmod +x wit-deps
          sudo mv wit-deps /usr/local/bin/

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"

          [registry."ghcr.io".oci.auth]
          username = "${{ github.actor }}"
          password = "${{ secrets.GHCR_TOKEN }}"
          EOF

      - name: Fetch WIT dependencies
        run: |
          # Fetch GitHub URL-based WIT dependencies for each crate using wit-deps
          for crate in crates/*; do
            if [ -d "$crate/wit" ] && [ -f "$crate/wit/deps.toml" ]; then
              echo "Fetching WIT deps for $(basename $crate)..."
              cd "$crate"
              wit-deps
              cd ../..
            fi
          done

      - name: Build all components
        run: |
          cargo build --release
          echo "✅ Built all framework components"
          ls -lh target/wasm32-wasip2/release/*.wasm

      - name: Publish http-client-notifications
        run: |
          wkg publish --package 'wasmcp:http-client-notifications@${{ inputs.version }}' \
            target/wasm32-wasip2/release/http_client_notifications.wasm
          echo "✅ Published wasmcp:http-client-notifications@${{ inputs.version }}"

      - name: Publish http-transport
        run: |
          wkg publish --package 'wasmcp:http-transport@${{ inputs.version }}' \
            target/wasm32-wasip2/release/http_transport.wasm
          echo "✅ Published wasmcp:http-transport@${{ inputs.version }}"

      - name: Publish method-not-found
        run: |
          wkg publish --package 'wasmcp:method-not-found@${{ inputs.version }}' \
            target/wasm32-wasip2/release/method_not_found.wasm
          echo "✅ Published wasmcp:method-not-found@${{ inputs.version }}"

      - name: Publish stdio-transport
        run: |
          wkg publish --package 'wasmcp:stdio-transport@${{ inputs.version }}' \
            target/wasm32-wasip2/release/stdio_transport.wasm
          echo "✅ Published wasmcp:stdio-transport@${{ inputs.version }}"

      - name: Publish tools-middleware
        run: |
          wkg publish --package 'wasmcp:tools-middleware@${{ inputs.version }}' \
            target/wasm32-wasip2/release/tools_middleware.wasm
          echo "✅ Published wasmcp:tools-middleware@${{ inputs.version }}"

      - name: Publish resources-middleware
        run: |
          wkg publish --package 'wasmcp:resources-middleware@${{ inputs.version }}' \
            target/wasm32-wasip2/release/resources_middleware.wasm
          echo "✅ Published wasmcp:resources-middleware@${{ inputs.version }}"

      - name: Upload all component artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-components-${{ inputs.version }}
          path: target/wasm32-wasip2/release/*.wasm

  generate-sbom-and-checksums:
    name: Generate SBOM and Checksums
    runs-on: ubuntu-latest
    needs: build-and-publish-components
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: sbom
          workspaces: crates

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Download component artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasmcp-components-${{ inputs.version }}
          path: components

      - name: Verify components
        run: |
          echo "Downloaded components:"
          ls -lh components/

      - name: Generate component SBOMs
        run: |
          # Generate individual SBOM for each component
          cargo cyclonedx --all --format json --override-filename sbom
          cargo cyclonedx --all --format xml --override-filename sbom
          echo "✅ Generated component SBOMs"

      - name: Collect SBOMs
        run: |
          mkdir -p sboms
          # Copy each component's SBOM with component name in filename
          for crate in crates/*; do
            if [ -d "$crate" ]; then
              component=$(basename "$crate")
              if [ -f "$crate/sbom.json" ]; then
                cp "$crate/sbom.json" "sboms/${component}-sbom.json"
              fi
              if [ -f "$crate/sbom.xml" ]; then
                cp "$crate/sbom.xml" "sboms/${component}-sbom.xml"
              fi
            fi
          done
          ls -la sboms/
          echo "✅ Collected component SBOMs"

      - name: Generate component checksums
        run: |
          cd components
          sha256sum *.wasm > checksums-components.txt
          mv checksums-components.txt ../
          echo "✅ Generated component checksums"

      - name: Upload SBOMs and checksums
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-components-security-${{ inputs.version }}
          path: |
            sboms/
            checksums-components.txt

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: generate-sbom-and-checksums
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: components-v${{ inputs.version }}
          name: Components v${{ inputs.version }}
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}
          files: |
            artifacts/wasmcp-components-${{ inputs.version }}/*.wasm
            artifacts/wasmcp-components-security-${{ inputs.version }}/*
            artifacts/wasmcp-components-security-${{ inputs.version }}/sboms/*
          body: |
            # Components v${{ inputs.version }}

            ## Framework Components Released

            This release includes 6 framework components published to `${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}`:

            - `wasmcp:http-client-notifications@${{ inputs.version }}`
            - `wasmcp:http-transport@${{ inputs.version }}`
            - `wasmcp:method-not-found@${{ inputs.version }}`
            - `wasmcp:stdio-transport@${{ inputs.version }}`
            - `wasmcp:tools-middleware@${{ inputs.version }}`
            - `wasmcp:resources-middleware@${{ inputs.version }}`

            ## 🔒 Supply Chain Security

            This release includes:
            - **Individual SBOMs** (CycloneDX format) for each component in JSON and XML formats
            - **SHA256 checksums** for all component artifacts

            Each component has its own SBOM:
            - `http-client-notifications-sbom.{json,xml}`
            - `http-transport-sbom.{json,xml}`
            - `method-not-found-sbom.{json,xml}`
            - `stdio-transport-sbom.{json,xml}`
            - `tools-middleware-sbom.{json,xml}`
            - `resources-middleware-sbom.{json,xml}`

            ### Verifying Component Downloads

            ```bash
            # Download checksum file
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/components-v${{ inputs.version }}/checksums-components.txt -o checksums-components.txt

            # Verify downloaded component
            sha256sum -c checksums-components.txt
            ```

            ## Usage

            Framework components are published to `${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}` and automatically downloaded during composition.

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/components-v${{ inputs.version }}

  all-jobs-complete:
    name: All Jobs Complete
    runs-on: ubuntu-latest
    needs: [verify-wit-package, build-and-publish-components, generate-sbom-and-checksums, create-release]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.verify-wit-package.result }}" != "success" ] || \
             [ "${{ needs.build-and-publish-components.result }}" != "success" ] || \
             [ "${{ needs.generate-sbom-and-checksums.result }}" != "success" ] || \
             [ "${{ needs.create-release.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "✅ Component release v${{ inputs.version }} completed successfully!"
          echo ""
          echo "Next steps:"
          echo "  1. Make packages public at https://github.com/orgs/${{ env.REGISTRY_NAMESPACE }}/packages"
          echo "  2. Update release notes at https://github.com/${{ github.repository }}/releases/tag/components-v${{ inputs.version }}"
