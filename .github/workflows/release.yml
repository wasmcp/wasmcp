name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 0.3.0 or 0.3.0-alpha.49)'
        required: true
        type: string

env:
  RUST_VERSION: "1.89"
  CARGO_COMPONENT_VERSION: "0.21.1"
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: wasmcp

jobs:
  validate:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Error: Invalid version format: ${{ inputs.version }}"
            echo "Expected: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

      - name: Check WIT package version matches
        run: |
          wit_version=$(grep -oP 'package wasmcp:mcp@\K[^;]+' wit/world.wit)
          if [ "$wit_version" != "${{ inputs.version }}" ]; then
            echo "Error: WIT package version ($wit_version) does not match release version (${{ inputs.version }})"
            echo "Run: ./scripts/bump-version.sh ${{ inputs.version }}"
            exit 1
          fi

  publish-wit-package:
    name: Publish WIT Package
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"

          [registry."ghcr.io".oci.auth]
          username = "${{ github.actor }}"
          password = "${{ secrets.GHCR_TOKEN }}"
          EOF

      - name: Build and publish WIT package
        run: |
          wkg wit build
          wkg publish wasmcp:mcp@${{ inputs.version }}.wasm
          echo "✅ Published WIT package: mcp@${{ inputs.version }}"

  build-and-publish-component:
    name: Build ${{ matrix.component.name }}
    runs-on: ubuntu-latest
    needs: [validate, publish-wit-package]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component:
          - name: request
            package: request
            binary: request.wasm
          - name: error-writer
            package: error-writer
            binary: error_writer.wasm
          - name: initialize-writer
            package: initialize-writer
            binary: initialize_writer.wasm
          - name: tools-writer
            package: tools-writer
            binary: tools_writer.wasm
          - name: resources-writer
            package: resources-writer
            binary: resources_writer.wasm
          - name: http-transport
            package: http-transport
            binary: http_transport.wasm
          - name: stdio-transport
            package: stdio-transport
            binary: stdio_transport.wasm
          - name: initialize-handler
            package: initialize-handler
            binary: initialize_handler.wasm
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: wasm32-wasip2
          cache-key: release-${{ matrix.component.name }}
          workspaces: crates/${{ matrix.component.name }}

      - name: Install cargo-component
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-component@${{ env.CARGO_COMPONENT_VERSION }}

      - name: Install wkg
        run: |
          curl -sSL https://github.com/bytecodealliance/wasm-pkg-tools/releases/download/v0.12.0/wkg-x86_64-unknown-linux-gnu -o wkg
          chmod +x wkg
          sudo mv wkg /usr/local/bin/

      - name: Configure wkg registry
        run: |
          mkdir -p ~/.config/wasm-pkg
          cat > ~/.config/wasm-pkg/config.toml <<EOF
          [namespace_registries]
          wasmcp = "ghcr.io"

          [registry."ghcr.io".oci.auth]
          username = "${{ github.actor }}"
          password = "${{ secrets.GHCR_TOKEN }}"
          EOF

      - name: Build component
        run: |
          cd crates/${{ matrix.component.name }}
          cargo component build --release
          echo "✅ Built ${{ matrix.component.name }}"

      - name: Publish component
        run: |
          wkg publish --package 'wasmcp:${{ matrix.component.package }}@${{ inputs.version }}' \
            target/wasm32-wasip1/release/${{ matrix.component.binary }}
          echo "✅ Published wasmcp:${{ matrix.component.package }}@${{ inputs.version }}"

      - name: Upload component artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component.name }}-${{ inputs.version }}
          path: target/wasm32-wasip1/release/${{ matrix.component.binary }}

  generate-sbom-and-checksums:
    name: Generate SBOM and Checksums
    runs-on: ubuntu-latest
    needs: build-and-publish-component
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: sbom
          workspaces: crates

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Download all component artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*-${{ inputs.version }}'

      - name: Organize components for checksums
        run: |
          mkdir -p components
          find artifacts -name "*.wasm" -exec cp {} components/ \;
          ls -la components/

      - name: Generate workspace SBOM
        run: |
          cd crates
          cargo cyclonedx --all --format json --override-filename wasmcp-components-sbom
          cargo cyclonedx --all --format xml --override-filename wasmcp-components-sbom
          mv wasmcp-components-sbom.* ../
          echo "✅ Generated workspace SBOM"

      - name: Generate component checksums
        run: |
          cd components
          sha256sum *.wasm > checksums-components.txt
          mv checksums-components.txt ../
          echo "✅ Generated component checksums"

      - name: Upload all components
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-components-${{ inputs.version }}
          path: components/*.wasm

      - name: Upload SBOM and checksums
        uses: actions/upload-artifact@v4
        with:
          name: wasmcp-security-artifacts-${{ inputs.version }}
          path: |
            wasmcp-components-sbom.json
            wasmcp-components-sbom.xml
            checksums-components.txt

  build-cli:
    name: Build CLI (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: wasmcp
            asset_name: wasmcp-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: wasmcp
            asset_name: wasmcp-aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: wasmcp
            asset_name: wasmcp-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: wasmcp
            asset_name: wasmcp-aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: ${{ matrix.target }}
          cache-key: release-cli-${{ matrix.target }}
          workspaces: cli

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Build CLI
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cd cli
          cargo build --release --target ${{ matrix.target }}

      - name: Generate CLI SBOM
        run: |
          cd cli
          cargo cyclonedx --format json --override-filename wasmcp-cli-${{ matrix.target }}-sbom
          cargo cyclonedx --format xml --override-filename wasmcp-cli-${{ matrix.target }}-sbom

      - name: Strip binary
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || true

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.tar.gz ${{ github.workspace }}/

      - name: Generate checksum
        run: |
          sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.sha256
            cli/wasmcp-cli-${{ matrix.target }}-sbom.json
            cli/wasmcp-cli-${{ matrix.target }}-sbom.xml

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-sbom-and-checksums, build-cli]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ inputs.version }}
          name: Release v${{ inputs.version }}
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}
          files: |
            artifacts/*/*
          body: |
            # wasmcp v${{ inputs.version }}

            ## 🔒 Supply Chain Security

            This release includes:
            - **SBOM** (CycloneDX format) for framework components and CLI binaries
            - **SHA256 checksums** for all artifacts

            ### Verifying Downloads

            ```bash
            # Download CLI for Linux x86_64
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/wasmcp-x86_64-unknown-linux-gnu.tar.gz -o wasmcp.tar.gz
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/wasmcp-x86_64-unknown-linux-gnu.sha256 -o wasmcp.sha256

            # Verify checksum
            sha256sum -c wasmcp.sha256
            ```

            ## Installation

            ### CLI

            Download the appropriate binary for your platform:

            **Linux (x86_64):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/wasmcp-x86_64-unknown-linux-gnu.tar.gz | tar -xz
            sudo mv wasmcp /usr/local/bin/
            ```

            **macOS (Apple Silicon):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/wasmcp-aarch64-apple-darwin.tar.gz | tar -xz
            sudo mv wasmcp /usr/local/bin/
            ```

            **macOS (Intel):**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/wasmcp-x86_64-apple-darwin.tar.gz | tar -xz
            sudo mv wasmcp /usr/local/bin/
            ```

            ### Components

            Framework components are published to `${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}` and are automatically downloaded during composition.

            ## Quick Start

            ```bash
            # Create a new tools handler
            wasmcp new my-tools --type tools --language rust

            # Build and compose
            cd my-tools
            make compose

            # Run
            wasmtime serve -Scommon mcp-server.wasm
            ```

            ## What's Changed

            <!-- Add release notes here -->

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ inputs.version }}

  all-jobs-complete:
    name: All Jobs Complete
    runs-on: ubuntu-latest
    needs: [publish-wit-package, build-and-publish-component, generate-sbom-and-checksums, build-cli, create-release]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.publish-wit-package.result }}" != "success" ] || \
             [ "${{ needs.build-and-publish-component.result }}" != "success" ] || \
             [ "${{ needs.generate-sbom-and-checksums.result }}" != "success" ] || \
             [ "${{ needs.build-cli.result }}" != "success" ] || \
             [ "${{ needs.create-release.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "✅ Release v${{ inputs.version }} completed successfully!"
          echo ""
          echo "Next steps:"
          echo "  1. Make packages public at https://github.com/orgs/${{ env.REGISTRY_NAMESPACE }}/packages"
          echo "  2. Update release notes at https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}"
