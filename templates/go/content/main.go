package main

import (
	"net/http"
	"{{project-name | snake_case}}/capabilities"
	"{{project-name | snake_case}}/internal/wasmcp/mcp/authorization"
	"{{project-name | snake_case}}/internal/wasmcp/mcp/lifecycle"
	"{{project-name | snake_case}}/internal/wasmcp/mcp/tools"
	"{{project-name | snake_case}}/wasihttp"
)

func init() {
	// Configure the HTTP client to use WASI HTTP.
	// This replaces Go's standard HTTP transport with one that uses
	// WebAssembly System Interface (WASI) HTTP bindings. All subsequent
	// http.Get/Post/etc calls will use WASI's outgoing-handler under the hood.
	http.DefaultTransport = &wasihttp.Transport{}
	
	// Wire up lifecycle exports.
	// The Exports struct is generated by wit-bindgen-go from the WIT interface.
	// These assignments connect our Go implementations to the component's exports.
	lifecycle.Exports.Initialize = capabilities.Initialize
	lifecycle.Exports.ClientInitialized = capabilities.ClientInitialized
	lifecycle.Exports.Shutdown = capabilities.Shutdown
	
	// Wire up authorization exports
	authorization.Exports.GetAuthConfig = capabilities.GetAuthConfig
	authorization.Exports.JwksCacheGet = capabilities.JwksCacheGet
	authorization.Exports.JwksCacheSet = capabilities.JwksCacheSet
	
	// Wire up tools exports
	tools.Exports.ListTools = capabilities.ListTools
	tools.Exports.CallTool = capabilities.CallTool
}

// main is required for the wasip2 target but doesn't execute.
// In the Component Model, functionality is exposed through exports,
// not through a main entry point. The host runtime calls our exported
// functions directly when handling MCP protocol messages.
func main() {
	// This function never runs in a component context
}