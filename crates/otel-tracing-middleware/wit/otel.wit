package wasmcp:otel@0.3.0;

/// OpenTelemetry configuration interface
/// Handler components export this to provide runtime OTEL configuration
@since(version = 0.3.0)
interface otel-config {
  use wasi:otel-providers/common-providers@0.1.0.{provider};

  /// Get OTEL provider configuration
  /// Called once by middleware on initialization (first request)
  @since(version = 0.3.0)
  get-config: func() -> provider;
}

/// OpenTelemetry trace instrumentation interface
/// Middleware exports this, handlers import it for custom span creation and attributes
@since(version = 0.3.0)
interface trace-instrumentation {
  use wasi:otel-sdk/common@0.1.0-alpha.3.{attribute};
  use wasi:otel-sdk/trace@0.1.0-alpha.3.{span-kind};

  /// Add an attribute to the current active span
  @since(version = 0.3.0)
  add-span-attribute: func(key: string, value: string);

  /// Add a timestamped event to the current active span
  @since(version = 0.3.0)
  add-span-event: func(name: string, attributes: list<attribute>);

  /// Start a new child span under the current active span
  /// Returns a span ID that can be used to end the span
  @since(version = 0.3.0)
  start-child-span: func(name: string, kind: span-kind) -> u64;

  /// End a child span by its ID
  @since(version = 0.3.0)
  end-child-span: func(span-id: u64);
}

/// OpenTelemetry distributed tracing instrumentation
/// Include this to create custom trace spans and add trace-specific attributes in your handler
/// Provides fine-grained control over trace data beyond automatic middleware tracing
@since(version = 0.3.0)
world otel-trace {
    import trace-instrumentation;
}

/// Full OpenTelemetry observability suite
/// Include this for access to all observability signals (trace, metrics, logs)
/// Currently provides tracing; metrics and logging will be added in future releases
@since(version = 0.3.0)
world otel-full {
    import trace-instrumentation;
    // Future: import metrics-instrumentation;
    // Future: import logs-instrumentation;
}
