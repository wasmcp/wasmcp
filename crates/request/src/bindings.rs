// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod io {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Error {
                handle: _rt::Resource<Error>,
            }
            impl Error {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Error {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]error"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Error {
                #[allow(unused_unsafe, clippy::all)]
                pub fn to_debug_string(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]error.to-debug-string"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod streams {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::wasi::io::error::Error;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub enum StreamError {
                LastOperationFailed(Error),
                Closed,
            }
            impl ::core::fmt::Debug for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StreamError::LastOperationFailed(e) => {
                            f.debug_tuple("StreamError::LastOperationFailed")
                                .field(e)
                                .finish()
                        }
                        StreamError::Closed => {
                            f.debug_tuple("StreamError::Closed").finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for StreamError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InputStream {
                handle: _rt::Resource<InputStream>,
            }
            impl InputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]input-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutputStream {
                handle: _rt::Resource<OutputStream>,
            }
            impl OutputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for OutputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]output-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_read(
                    &self,
                    len: u64,
                ) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn check_write(&self) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.check-write"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_and_flush(
                    &self,
                    contents: &[u8],
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-and-flush"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_zeroes(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write-zeroes"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_zeroes_and_flush(
                    &self,
                    len: u64,
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core MCP data types and aliases
        ///
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Optional metadata for vendor-specific extensions.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
            pub type Meta = Option<_rt::Vec<(_rt::String, _rt::String)>>;
            /// Opaque pagination token.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#cursor>
            pub type Cursor = _rt::String;
            /// JSON-encoded data as a string.
            pub type Json = _rt::String;
            /// Uniform Resource Identifier.
            pub type Uri = _rt::String;
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Client capabilities (extensible)."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#clientcapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ClientCapabilities : u8 { const ELICITATION = 1 << 0; const ROOTS
                = 1 << 1; const SAMPLING = 1 << 2; const EXPERIMENTAL = 1 << 3; }
            }
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Capabilities that a server supports."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#servercapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ServerCapabilities : u8 { #[doc = " Argument autocompletion"]
                const COMPLETIONS = 1 << 0; #[doc = " Prompts"] const PROMPTS = 1 << 1;
                #[doc = " Resources"] const RESOURCES = 1 << 2; #[doc = " Tools"] const
                TOOLS = 1 << 3; #[doc = " Experimental features"] const EXPERIMENTAL = 1
                << 4; }
            }
            /// MCP protocol versions.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ProtocolVersion {
                /// Version 2025-06-18
                V20250618,
                /// Version 2025-03-26
                V20250326,
                /// Version 2024-11-05
                V20241105,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::V20250618 => {
                            f.debug_tuple("ProtocolVersion::V20250618").finish()
                        }
                        ProtocolVersion::V20250326 => {
                            f.debug_tuple("ProtocolVersion::V20250326").finish()
                        }
                        ProtocolVersion::V20241105 => {
                            f.debug_tuple("ProtocolVersion::V20241105").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::V20250618,
                        1 => ProtocolVersion::V20250326,
                        2 => ProtocolVersion::V20241105,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// MCP implementation metadata.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#implementation>
            #[derive(Clone)]
            pub struct Implementation {
                pub name: _rt::String,
                pub title: Option<_rt::String>,
                pub version: _rt::String,
            }
            impl ::core::fmt::Debug for Implementation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Implementation")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("version", &self.version)
                        .finish()
                }
            }
            /// JSON-RPC request ID (string or number).
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#requestid>
            #[derive(Clone)]
            pub enum Id {
                Number(i64),
                String(_rt::String),
            }
            impl ::core::fmt::Debug for Id {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Id::Number(e) => f.debug_tuple("Id::Number").field(e).finish(),
                        Id::String(e) => f.debug_tuple("Id::String").field(e).finish(),
                    }
                }
            }
        }
        /// Error handling for MCP operations.
        ///
        /// This interface provides error types that map to JSON-RPC error codes
        /// as defined in the MCP specification.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Standard JSON-RPC error codes.
            ///
            /// Maps to the error codes in JSONRPCError as defined in the MCP spec.
            /// Standard codes per JSON-RPC 2.0:
            /// - Parse error: -32700
            /// - Invalid request: -32600
            /// - Method not found: -32601
            /// - Invalid params: -32602
            /// - Internal error: -32603
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#jsonrpcerror>
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ErrorCode {
                /// Parse error (-32700)
                ParseError,
                /// Invalid request (-32600)
                InvalidRequest,
                /// Method not found (-32601)
                MethodNotFound,
                /// Invalid parameters (-32602)
                InvalidParams,
                /// Internal error (-32603)
                InternalError,
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ParseError => {
                            f.debug_tuple("ErrorCode::ParseError").finish()
                        }
                        ErrorCode::InvalidRequest => {
                            f.debug_tuple("ErrorCode::InvalidRequest").finish()
                        }
                        ErrorCode::MethodNotFound => {
                            f.debug_tuple("ErrorCode::MethodNotFound").finish()
                        }
                        ErrorCode::InvalidParams => {
                            f.debug_tuple("ErrorCode::InvalidParams").finish()
                        }
                        ErrorCode::InternalError => {
                            f.debug_tuple("ErrorCode::InternalError").finish()
                        }
                    }
                }
            }
            impl ErrorCode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ErrorCode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ErrorCode::ParseError,
                        1 => ErrorCode::InvalidRequest,
                        2 => ErrorCode::MethodNotFound,
                        3 => ErrorCode::InvalidParams,
                        4 => ErrorCode::InternalError,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Standard MCP error structure.
            ///
            /// Maps to JSONRPCError.error in the MCP spec:
            /// - code: number - "The error type that occurred"
            /// - message: string - "A short description of the error"
            /// - data?: unknown - "Additional information about the error"
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#jsonrpcerror>
            #[derive(Clone)]
            pub struct Error {
                pub code: ErrorCode,
                pub message: _rt::String,
                pub data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod mcp {
            /// MCP request types
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod request {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type InputStream = super::super::super::super::wasi::io::streams::InputStream;
                pub type StreamError = super::super::super::super::wasi::io::streams::StreamError;
                pub type Id = super::super::super::super::wasmcp::mcp::types::Id;
                pub type Implementation = super::super::super::super::wasmcp::mcp::types::Implementation;
                pub type Json = super::super::super::super::wasmcp::mcp::types::Json;
                pub type Uri = super::super::super::super::wasmcp::mcp::types::Uri;
                pub type Cursor = super::super::super::super::wasmcp::mcp::types::Cursor;
                pub type ClientCapabilities = super::super::super::super::wasmcp::mcp::types::ClientCapabilities;
                pub type ProtocolVersion = super::super::super::super::wasmcp::mcp::types::ProtocolVersion;
                pub type ServerCapabilities = super::super::super::super::wasmcp::mcp::types::ServerCapabilities;
                pub type McpError = super::super::super::super::wasmcp::mcp::error::Error;
                /// Arguments for tool calls and prompt requests.
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#calltoolrequest>
                #[derive(Clone)]
                pub struct Arguments {
                    pub name: _rt::String,
                    pub arguments: Option<Json>,
                }
                impl ::core::fmt::Debug for Arguments {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Arguments")
                            .field("name", &self.name)
                            .field("arguments", &self.arguments)
                            .finish()
                    }
                }
                /// Argument for completion requests.
                #[derive(Clone)]
                pub struct CompletionArgument {
                    pub name: _rt::String,
                    pub value: _rt::String,
                }
                impl ::core::fmt::Debug for CompletionArgument {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CompletionArgument")
                            .field("name", &self.name)
                            .field("value", &self.value)
                            .finish()
                    }
                }
                /// Context for completion requests.
                #[derive(Clone)]
                pub struct CompletionContext {
                    pub arguments: Option<Json>,
                }
                impl ::core::fmt::Debug for CompletionContext {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CompletionContext")
                            .field("arguments", &self.arguments)
                            .finish()
                    }
                }
                /// Reference to a prompt for completion.
                #[derive(Clone)]
                pub struct CompletionPromptReference {
                    pub name: _rt::String,
                    pub title: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for CompletionPromptReference {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CompletionPromptReference")
                            .field("name", &self.name)
                            .field("title", &self.title)
                            .finish()
                    }
                }
                /// Reference types for completions.
                #[derive(Clone)]
                pub enum CompletionRef {
                    /// Prompt reference.
                    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#promptreference>
                    Prompt(CompletionPromptReference),
                    /// Resource template reference.
                    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcetemplatereference>
                    ResourceTemplate(Uri),
                }
                impl ::core::fmt::Debug for CompletionRef {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            CompletionRef::Prompt(e) => {
                                f.debug_tuple("CompletionRef::Prompt").field(e).finish()
                            }
                            CompletionRef::ResourceTemplate(e) => {
                                f.debug_tuple("CompletionRef::ResourceTemplate")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                /// Initialize request parameters.
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#initializerequest>
                #[derive(Clone)]
                pub struct InitializeParams {
                    pub capabilities: ClientCapabilities,
                    pub client_info: Implementation,
                    pub protocol_version: ProtocolVersion,
                }
                impl ::core::fmt::Debug for InitializeParams {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("InitializeParams")
                            .field("capabilities", &self.capabilities)
                            .field("client-info", &self.client_info)
                            .field("protocol-version", &self.protocol_version)
                            .finish()
                    }
                }
                /// Parameters for listing tools.
                pub type ListToolsParams = Cursor;
                /// Parameters for calling a tool.
                pub type CallToolParams = Arguments;
                /// Parameters for listing resources.
                pub type ListResourcesParams = Cursor;
                /// Parameters for reading a resource.
                pub type ReadResourceParams = Uri;
                /// Parameters for listing resource templates.
                pub type ListResourceTemplatesParams = Cursor;
                /// Parameters for listing prompts.
                pub type ListPromptsParams = Cursor;
                /// Parameters for getting a prompt.
                pub type GetPromptParams = Arguments;
                /// Parameters for completion requests.
                #[derive(Clone)]
                pub struct CompletionParams {
                    pub argument: CompletionArgument,
                    pub ref_: CompletionRef,
                    pub context: Option<CompletionContext>,
                }
                impl ::core::fmt::Debug for CompletionParams {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CompletionParams")
                            .field("argument", &self.argument)
                            .field("ref", &self.ref_)
                            .field("context", &self.context)
                            .finish()
                    }
                }
                /// Parameters for different MCP methods.
                #[derive(Clone)]
                pub enum Params {
                    /// initialize
                    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#initializerequest>
                    Initialize(InitializeParams),
                    /// tools/list
                    ToolsList(ListToolsParams),
                    /// tools/call
                    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#calltoolrequest>
                    ToolsCall(CallToolParams),
                    /// resources/list
                    ResourcesList(ListResourcesParams),
                    /// resources/read
                    ResourcesRead(ReadResourceParams),
                    /// resources/templates/list
                    ResourcesTemplatesList(ListResourceTemplatesParams),
                    /// prompts/list
                    PromptsList(ListPromptsParams),
                    /// prompts/get
                    /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#getpromptrequest>
                    PromptsGet(GetPromptParams),
                    /// completion/complete
                    CompletionComplete(CompletionParams),
                }
                impl ::core::fmt::Debug for Params {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Params::Initialize(e) => {
                                f.debug_tuple("Params::Initialize").field(e).finish()
                            }
                            Params::ToolsList(e) => {
                                f.debug_tuple("Params::ToolsList").field(e).finish()
                            }
                            Params::ToolsCall(e) => {
                                f.debug_tuple("Params::ToolsCall").field(e).finish()
                            }
                            Params::ResourcesList(e) => {
                                f.debug_tuple("Params::ResourcesList").field(e).finish()
                            }
                            Params::ResourcesRead(e) => {
                                f.debug_tuple("Params::ResourcesRead").field(e).finish()
                            }
                            Params::ResourcesTemplatesList(e) => {
                                f.debug_tuple("Params::ResourcesTemplatesList")
                                    .field(e)
                                    .finish()
                            }
                            Params::PromptsList(e) => {
                                f.debug_tuple("Params::PromptsList").field(e).finish()
                            }
                            Params::PromptsGet(e) => {
                                f.debug_tuple("Params::PromptsGet").field(e).finish()
                            }
                            Params::CompletionComplete(e) => {
                                f.debug_tuple("Params::CompletionComplete")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum Feature {
                    Initialize,
                    Tools,
                    Resources,
                    Prompts,
                    Completion,
                }
                impl ::core::fmt::Debug for Feature {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Feature::Initialize => {
                                f.debug_tuple("Feature::Initialize").finish()
                            }
                            Feature::Tools => f.debug_tuple("Feature::Tools").finish(),
                            Feature::Resources => {
                                f.debug_tuple("Feature::Resources").finish()
                            }
                            Feature::Prompts => {
                                f.debug_tuple("Feature::Prompts").finish()
                            }
                            Feature::Completion => {
                                f.debug_tuple("Feature::Completion").finish()
                            }
                        }
                    }
                }
                impl Feature {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> Feature {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => Feature::Initialize,
                            1 => Feature::Tools,
                            2 => Feature::Resources,
                            3 => Feature::Prompts,
                            4 => Feature::Completion,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                /// MCP request resource providing lazy access to request data
                /// and request-scoped context storage.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Request {
                    handle: _rt::Resource<Request>,
                }
                type _RequestRep<T> = Option<T>;
                impl Request {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Request`.
                    pub fn new<T: GuestRequest>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _RequestRep<T> = Some(val);
                        let ptr: *mut _RequestRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestRequest>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestRequest>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestRequest>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _RequestRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestRequest>(&self) -> *mut _RequestRep<T> {
                        Request::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Request`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct RequestBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Request>,
                }
                impl<'a> RequestBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestRequest>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _RequestRep<T> {
                        Request::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Request {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/request@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]request"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_request_from_http_stream_cabi<
                    T: GuestRequest,
                >(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::from_http_stream({
                        handle0 = unsafe {
                            super::super::super::super::wasi::io::streams::InputStream::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V3;
                            match e {
                                V3::LastOperationFailed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr2.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V3::Closed => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_request_from_stdio_stream_cabi<
                    T: GuestRequest,
                >(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::from_stdio_stream({
                        handle0 = unsafe {
                            super::super::super::super::wasi::io::streams::InputStream::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V3;
                            match e {
                                V3::LastOperationFailed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr2.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V3::Closed => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_request_id_cabi<T: GuestRequest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::id(
                        unsafe { RequestBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    use super::super::super::super::wasmcp::mcp::types::Id as V3;
                    match result0 {
                        V3::Number(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        V3::String(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *ptr1.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_request_id<T: GuestRequest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_request_feature_cabi<T: GuestRequest>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::feature(
                        unsafe { RequestBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    result0.clone() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_request_params_cabi<T: GuestRequest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::params(
                        unsafe { RequestBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Params::Initialize(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let InitializeParams {
                                        capabilities: capabilities2,
                                        client_info: client_info2,
                                        protocol_version: protocol_version2,
                                    } = e;
                                    let flags3 = capabilities2;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = ((flags3.bits() >> 0) as i32) as u8;
                                    let super::super::super::super::wasmcp::mcp::types::Implementation {
                                        name: name4,
                                        title: title4,
                                        version: version4,
                                    } = client_info2;
                                    let vec5 = (name4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                    match title4 {
                                        Some(e) => {
                                            *ptr1
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec6 = (e.into_bytes()).into_boxed_slice();
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            ::core::mem::forget(vec6);
                                            *ptr1
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *ptr1
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr6.cast_mut();
                                        }
                                        None => {
                                            *ptr1
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec7 = (version4.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr1
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                    *ptr1
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (protocol_version2.clone() as i32) as u8;
                                }
                                Params::ToolsList(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                Params::ToolsCall(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let Arguments { name: name9, arguments: arguments9 } = e;
                                    let vec10 = (name9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                    match arguments9 {
                                        Some(e) => {
                                            *ptr1
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec11 = (e.into_bytes()).into_boxed_slice();
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            ::core::mem::forget(vec11);
                                            *ptr1
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len11;
                                            *ptr1
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr11.cast_mut();
                                        }
                                        None => {
                                            *ptr1
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                Params::ResourcesList(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                Params::ResourcesRead(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                Params::ResourcesTemplatesList(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                Params::PromptsList(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                Params::PromptsGet(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let Arguments { name: name16, arguments: arguments16 } = e;
                                    let vec17 = (name16.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                    match arguments16 {
                                        Some(e) => {
                                            *ptr1
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec18 = (e.into_bytes()).into_boxed_slice();
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();
                                            ::core::mem::forget(vec18);
                                            *ptr1
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len18;
                                            *ptr1
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                        }
                                        None => {
                                            *ptr1
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                Params::CompletionComplete(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let CompletionParams {
                                        argument: argument19,
                                        ref_: ref_19,
                                        context: context19,
                                    } = e;
                                    let CompletionArgument { name: name20, value: value20 } = argument19;
                                    let vec21 = (name20.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                    let vec22 = (value20.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr1
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len22;
                                    *ptr1
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr22.cast_mut();
                                    match ref_19 {
                                        CompletionRef::Prompt(e) => {
                                            *ptr1
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let CompletionPromptReference {
                                                name: name23,
                                                title: title23,
                                            } = e;
                                            let vec24 = (name23.into_bytes()).into_boxed_slice();
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            ::core::mem::forget(vec24);
                                            *ptr1
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *ptr1
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr24.cast_mut();
                                            match title23 {
                                                Some(e) => {
                                                    *ptr1
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec25 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *ptr1
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len25;
                                                    *ptr1
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                                }
                                                None => {
                                                    *ptr1
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        CompletionRef::ResourceTemplate(e) => {
                                            *ptr1
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec26 = (e.into_bytes()).into_boxed_slice();
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            ::core::mem::forget(vec26);
                                            *ptr1
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len26;
                                            *ptr1
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr26.cast_mut();
                                        }
                                    }
                                    match context19 {
                                        Some(e) => {
                                            *ptr1
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let CompletionContext { arguments: arguments27 } = e;
                                            match arguments27 {
                                                Some(e) => {
                                                    *ptr1
                                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                    let len28 = vec28.len();
                                                    ::core::mem::forget(vec28);
                                                    *ptr1
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len28;
                                                    *ptr1
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr28.cast_mut();
                                                }
                                                None => {
                                                    *ptr1
                                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *ptr1
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::wasmcp::mcp::error::Error {
                                code: code29,
                                message: message29,
                                data: data29,
                            } = e;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (code29.clone() as i32) as u8;
                            let vec30 = (message29.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr1
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len30;
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr30.cast_mut();
                            match data29 {
                                Some(e) => {
                                    *ptr1
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr1
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len31;
                                    *ptr1
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_request_params<T: GuestRequest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = i32::from(
                                        *arg0
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l4 {
                                        0 => {}
                                        _ => {
                                            let l5 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l5, l6, 1);
                                        }
                                    }
                                    let l7 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                                1 => {
                                    let l9 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l10 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l9, l10, 1);
                                }
                                2 => {
                                    let l11 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                    let l13 = i32::from(
                                        *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l13 {
                                        0 => {}
                                        _ => {
                                            let l14 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l15 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                        }
                                    }
                                }
                                3 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                4 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                5 => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                                6 => {
                                    let l22 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l23 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                7 => {
                                    let l24 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l25 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                    let l26 = i32::from(
                                        *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l26 {
                                        0 => {}
                                        _ => {
                                            let l27 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l28 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l27, l28, 1);
                                        }
                                    }
                                }
                                _ => {
                                    let l29 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l30 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                    let l31 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l32 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l31, l32, 1);
                                    let l33 = i32::from(
                                        *arg0
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l33 {
                                        0 => {
                                            let l34 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l35 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l34, l35, 1);
                                            let l36 = i32::from(
                                                *arg0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l36 {
                                                0 => {}
                                                _ => {
                                                    let l37 = *arg0
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l38 = *arg0
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l37, l38, 1);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l39 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l40 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l39, l40, 1);
                                        }
                                    }
                                    let l41 = i32::from(
                                        *arg0
                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l41 {
                                        0 => {}
                                        _ => {
                                            let l42 = i32::from(
                                                *arg0
                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l42 {
                                                0 => {}
                                                _ => {
                                                    let l43 = *arg0
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l44 = *arg0
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l43, l44, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        _ => {
                            let l45 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l46 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l45, l46, 1);
                            let l47 = i32::from(
                                *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l47 {
                                0 => {}
                                _ => {
                                    let l48 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l49 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l48, l49, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_request_get_cabi<T: GuestRequest>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::get(
                        unsafe { RequestBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(_) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_request_get<T: GuestRequest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {}
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_request_set_cabi<T: GuestRequest>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let result2 = T::set(
                        unsafe { RequestBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                        _rt::Vec::from_raw_parts(arg3.cast(), len1, len1),
                    );
                    let result3 = match result2 {
                        Ok(_) => 0i32,
                        Err(_) => 1i32,
                    };
                    result3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_request_needs_cabi<T: GuestRequest>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::needs(
                        unsafe { RequestBorrow::lift(arg0 as u32 as usize) }.get(),
                        super::super::super::super::wasmcp::mcp::types::ServerCapabilities::empty()
                            | super::super::super::super::wasmcp::mcp::types::ServerCapabilities::from_bits_retain(
                                ((arg1 as u8) << 0) as _,
                            ),
                    );
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_request_get_capabilities_cabi<
                    T: GuestRequest,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_capabilities(
                        unsafe { RequestBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr1.add(1).cast::<u8>() = (1i32) as u8;
                                    let flags2 = e;
                                    *ptr1.add(2).cast::<u8>() = ((flags2.bits() >> 0) as i32)
                                        as u8;
                                }
                                None => {
                                    *ptr1.add(1).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(_) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                        }
                    };
                    ptr1
                }
                pub trait Guest {
                    type Request: GuestRequest;
                }
                pub trait GuestRequest: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/request@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]request"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/request@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]request"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Parse a JSON-RPC 2.0 request from an HTTP request body stream.
                    /// Reads until EOF (stream closes). The entire request body is buffered.
                    /// Used by the HTTP transport which provides complete request bodies.
                    fn from_http_stream(
                        input: &InputStream,
                    ) -> Result<Request, StreamError>;
                    /// Parse a JSON-RPC 2.0 request from a stdio stream.
                    /// Reads until newline delimiter (\n or \r\n). Supports persistent connections
                    /// with multiple newline-delimited messages on the same stream.
                    /// Used by the stdio transport which provides newline-delimited JSON-RPC messages.
                    fn from_stdio_stream(
                        input: &InputStream,
                    ) -> Result<Request, StreamError>;
                    /// Get the request ID.
                    fn id(&self) -> Id;
                    /// Get the capability required for this request.
                    fn feature(&self) -> Feature;
                    /// Get the request parameters.
                    fn params(&self) -> Result<Params, McpError>;
                    /// Get a context value by key.
                    fn get(&self, key: _rt::String) -> Result<Option<_rt::Vec<u8>>, ()>;
                    /// Set a context value by key.
                    fn set(
                        &self,
                        key: _rt::String,
                        value: _rt::Vec<u8>,
                    ) -> Result<(), ()>;
                    /// Check if this request needs the provided capabilities.
                    /// Registers capabilities during initialize requests and returns false (forward to next handler).
                    /// For other requests, returns true if the request feature matches the provided capabilities.
                    fn needs(&self, capabilities: ServerCapabilities) -> bool;
                    /// Get the server capabilities associated with this request.
                    fn get_capabilities(&self) -> Result<Option<ServerCapabilities>, ()>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_request_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[static]request.from-http-stream")]
                        unsafe extern "C" fn export_static_request_from_http_stream(arg0
                        : i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_static_request_from_http_stream_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Request > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[static]request.from-stdio-stream")]
                        unsafe extern "C" fn export_static_request_from_stdio_stream(arg0
                        : i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_static_request_from_stdio_stream_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Request > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[method]request.id")] unsafe
                        extern "C" fn export_method_request_id(arg0 : * mut u8,) -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_method_request_id_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Request > (arg0) } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/request@0.3.0-alpha.59#[method]request.id")]
                        unsafe extern "C" fn _post_return_method_request_id(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_request_id::<<$ty as $($path_to_types)*::
                        Guest >::Request > (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[method]request.feature")]
                        unsafe extern "C" fn export_method_request_feature(arg0 : * mut
                        u8,) -> i32 { unsafe { $($path_to_types)*::
                        _export_method_request_feature_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Request > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[method]request.params")]
                        unsafe extern "C" fn export_method_request_params(arg0 : * mut
                        u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_request_params_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Request > (arg0) } } #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/request@0.3.0-alpha.59#[method]request.params")]
                        unsafe extern "C" fn _post_return_method_request_params(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_request_params::<<$ty as
                        $($path_to_types)*:: Guest >::Request > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[method]request.get")] unsafe
                        extern "C" fn export_method_request_get(arg0 : * mut u8, arg1 : *
                        mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_request_get_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Request > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_wasmcp:mcp/request@0.3.0-alpha.59#[method]request.get")]
                        unsafe extern "C" fn _post_return_method_request_get(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_request_get::<<$ty as $($path_to_types)*::
                        Guest >::Request > (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[method]request.set")] unsafe
                        extern "C" fn export_method_request_set(arg0 : * mut u8, arg1 : *
                        mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> i32 {
                        unsafe { $($path_to_types)*::
                        _export_method_request_set_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Request > (arg0, arg1, arg2, arg3, arg4) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[method]request.needs")]
                        unsafe extern "C" fn export_method_request_needs(arg0 : * mut u8,
                        arg1 : i32,) -> i32 { unsafe { $($path_to_types)*::
                        _export_method_request_needs_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Request > (arg0, arg1) } } #[unsafe (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[method]request.get-capabilities")]
                        unsafe extern "C" fn export_method_request_get_capabilities(arg0
                        : * mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_request_get_capabilities_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Request > (arg0) } } const _ : () =
                        { #[doc(hidden)] #[unsafe (export_name =
                        "wasmcp:mcp/request@0.3.0-alpha.59#[dtor]request")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Request::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Request > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_request_0_3_0_alpha_59_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 16 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_request_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::mcp::request::__export_wasmcp_mcp_request_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::request);
    };
}
#[doc(inline)]
pub(crate) use __export_request_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:request:request:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3505] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb3\x1a\x01A\x02\x01\
A\x19\x01B\x04\x04\0\x05error\x03\x01\x01h\0\x01@\x01\x04self\x01\0s\x04\0\x1d[m\
ethod]error.to-debug-string\x01\x02\x03\0\x13wasi:io/error@0.2.3\x05\0\x01B\x0a\x04\
\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[method]pollab\
le.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollable.block\x01\x03\
\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\0\x12wasi:io/\
poll@0.2.3\x05\x01\x02\x03\0\0\x05error\x02\x03\0\x01\x08pollable\x01B(\x02\x03\x02\
\x01\x02\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\x02\x01\
i\x01\x01q\x02\x15last-operation-failed\x01\x04\0\x06closed\0\0\x04\0\x0cstream-\
error\x03\0\x05\x04\0\x0cinput-stream\x03\x01\x04\0\x0doutput-stream\x03\x01\x01\
h\x07\x01p}\x01j\x01\x0a\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0b\x04\0\x19[me\
thod]input-stream.read\x01\x0c\x04\0\"[method]input-stream.blocking-read\x01\x0c\
\x01j\x01w\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0d\x04\0\x19[method]input-str\
eam.skip\x01\x0e\x04\0\"[method]input-stream.blocking-skip\x01\x0e\x01i\x03\x01@\
\x01\x04self\x09\0\x0f\x04\0\x1e[method]input-stream.subscribe\x01\x10\x01h\x08\x01\
@\x01\x04self\x11\0\x0d\x04\0![method]output-stream.check-write\x01\x12\x01j\0\x01\
\x06\x01@\x02\x04self\x11\x08contents\x0a\0\x13\x04\0\x1b[method]output-stream.w\
rite\x01\x14\x04\0.[method]output-stream.blocking-write-and-flush\x01\x14\x01@\x01\
\x04self\x11\0\x13\x04\0\x1b[method]output-stream.flush\x01\x15\x04\0$[method]ou\
tput-stream.blocking-flush\x01\x15\x01@\x01\x04self\x11\0\x0f\x04\0\x1f[method]o\
utput-stream.subscribe\x01\x16\x01@\x02\x04self\x11\x03lenw\0\x13\x04\0\"[method\
]output-stream.write-zeroes\x01\x17\x04\05[method]output-stream.blocking-write-z\
eroes-and-flush\x01\x17\x01@\x03\x04self\x11\x03src\x09\x03lenw\0\x0d\x04\0\x1c[\
method]output-stream.splice\x01\x18\x04\0%[method]output-stream.blocking-splice\x01\
\x18\x03\0\x15wasi:io/streams@0.2.3\x05\x04\x01B\x15\x01o\x02ss\x01p\0\x01k\x01\x04\
\0\x04meta\x03\0\x02\x01s\x04\0\x06cursor\x03\0\x04\x01s\x04\0\x04json\x03\0\x06\
\x01s\x04\0\x03uri\x03\0\x08\x01n\x04\x0belicitation\x05roots\x08sampling\x0cexp\
erimental\x04\0\x13client-capabilities\x03\0\x0a\x01n\x05\x0bcompletions\x07prom\
pts\x09resources\x05tools\x0cexperimental\x04\0\x13server-capabilities\x03\0\x0c\
\x01m\x03\x09v20250618\x09v20250326\x09v20241105\x04\0\x10protocol-version\x03\0\
\x0e\x01ks\x01r\x03\x04names\x05title\x10\x07versions\x04\0\x0eimplementation\x03\
\0\x11\x01q\x02\x06number\x01x\0\x06string\x01s\0\x04\0\x02id\x03\0\x13\x03\0\x1f\
wasmcp:mcp/types@0.3.0-alpha.59\x05\x05\x01B\x05\x01m\x05\x0bparse-error\x0finva\
lid-request\x10method-not-found\x0einvalid-params\x0einternal-error\x04\0\x0aerr\
or-code\x03\0\0\x01ks\x01r\x03\x04code\x01\x07messages\x04data\x02\x04\0\x05erro\
r\x03\0\x03\x03\0\x1fwasmcp:mcp/error@0.3.0-alpha.59\x05\x06\x02\x03\0\x02\x0cin\
put-stream\x02\x03\0\x02\x0cstream-error\x02\x03\0\x03\x02id\x02\x03\0\x03\x0eim\
plementation\x02\x03\0\x03\x04json\x02\x03\0\x03\x03uri\x02\x03\0\x03\x06cursor\x02\
\x03\0\x03\x13client-capabilities\x02\x03\0\x03\x10protocol-version\x02\x03\0\x03\
\x13server-capabilities\x02\x03\0\x04\x05error\x01BO\x02\x03\x02\x01\x07\x04\0\x0c\
input-stream\x03\0\0\x02\x03\x02\x01\x08\x04\0\x0cstream-error\x03\0\x02\x02\x03\
\x02\x01\x09\x04\0\x02id\x03\0\x04\x02\x03\x02\x01\x0a\x04\0\x0eimplementation\x03\
\0\x06\x02\x03\x02\x01\x0b\x04\0\x04json\x03\0\x08\x02\x03\x02\x01\x0c\x04\0\x03\
uri\x03\0\x0a\x02\x03\x02\x01\x0d\x04\0\x06cursor\x03\0\x0c\x02\x03\x02\x01\x0e\x04\
\0\x13client-capabilities\x03\0\x0e\x02\x03\x02\x01\x0f\x04\0\x10protocol-versio\
n\x03\0\x10\x02\x03\x02\x01\x10\x04\0\x13server-capabilities\x03\0\x12\x02\x03\x02\
\x01\x11\x04\0\x09mcp-error\x03\0\x14\x01k\x09\x01r\x02\x04names\x09arguments\x16\
\x04\0\x09arguments\x03\0\x17\x01r\x02\x04names\x05values\x04\0\x13completion-ar\
gument\x03\0\x19\x01r\x01\x09arguments\x16\x04\0\x12completion-context\x03\0\x1b\
\x01ks\x01r\x02\x04names\x05title\x1d\x04\0\x1bcompletion-prompt-reference\x03\0\
\x1e\x01q\x02\x06prompt\x01\x1f\0\x11resource-template\x01\x0b\0\x04\0\x0ecomple\
tion-ref\x03\0\x20\x01r\x03\x0ccapabilities\x0f\x0bclient-info\x07\x10protocol-v\
ersion\x11\x04\0\x11initialize-params\x03\0\"\x04\0\x11list-tools-params\x03\0\x0d\
\x04\0\x10call-tool-params\x03\0\x18\x04\0\x15list-resources-params\x03\0\x0d\x04\
\0\x14read-resource-params\x03\0\x0b\x04\0\x1elist-resource-templates-params\x03\
\0\x0d\x04\0\x13list-prompts-params\x03\0\x0d\x04\0\x11get-prompt-params\x03\0\x18\
\x01k\x1c\x01r\x03\x08argument\x1a\x03ref!\x07context+\x04\0\x11completion-param\
s\x03\0,\x01q\x09\x0ainitialize\x01#\0\x0atools-list\x01$\0\x0atools-call\x01%\0\
\x0eresources-list\x01&\0\x0eresources-read\x01'\0\x18resources-templates-list\x01\
(\0\x0cprompts-list\x01)\0\x0bprompts-get\x01*\0\x13completion-complete\x01-\0\x04\
\0\x06params\x03\0.\x01m\x05\x0ainitialize\x05tools\x09resources\x07prompts\x0ac\
ompletion\x04\0\x07feature\x03\00\x04\0\x07request\x03\x01\x01h\x01\x01i2\x01j\x01\
4\x01\x03\x01@\x01\x05input3\05\x04\0\x20[static]request.from-http-stream\x016\x04\
\0![static]request.from-stdio-stream\x016\x01h2\x01@\x01\x04self7\0\x05\x04\0\x12\
[method]request.id\x018\x01@\x01\x04self7\01\x04\0\x17[method]request.feature\x01\
9\x01j\x01/\x01\x15\x01@\x01\x04self7\0:\x04\0\x16[method]request.params\x01;\x01\
p}\x01k<\x01j\x01=\0\x01@\x02\x04self7\x03keys\0>\x04\0\x13[method]request.get\x01\
?\x01j\0\0\x01@\x03\x04self7\x03keys\x05value<\0\xc0\0\x04\0\x13[method]request.\
set\x01A\x01@\x02\x04self7\x0ccapabilities\x13\0\x7f\x04\0\x15[method]request.ne\
eds\x01B\x01k\x13\x01j\x01\xc3\0\0\x01@\x01\x04self7\0\xc4\0\x04\0\x20[method]re\
quest.get-capabilities\x01E\x04\0!wasmcp:mcp/request@0.3.0-alpha.59\x05\x12\x04\0\
\x16wasmcp:request/request\x04\0\x0b\x0d\x01\0\x07request\x03\0\0\0G\x09producer\
s\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.4\
1.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
