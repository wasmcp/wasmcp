// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod io {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Error {
                handle: _rt::Resource<Error>,
            }
            impl Error {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Error {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]error"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Error {
                #[allow(unused_unsafe, clippy::all)]
                pub fn to_debug_string(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]error.to-debug-string"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod streams {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::wasi::io::error::Error;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub enum StreamError {
                LastOperationFailed(Error),
                Closed,
            }
            impl ::core::fmt::Debug for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StreamError::LastOperationFailed(e) => {
                            f.debug_tuple("StreamError::LastOperationFailed")
                                .field(e)
                                .finish()
                        }
                        StreamError::Closed => {
                            f.debug_tuple("StreamError::Closed").finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for StreamError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InputStream {
                handle: _rt::Resource<InputStream>,
            }
            impl InputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]input-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutputStream {
                handle: _rt::Resource<OutputStream>,
            }
            impl OutputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for OutputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]output-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_read(
                    &self,
                    len: u64,
                ) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn check_write(&self) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.check-write"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_and_flush(
                    &self,
                    contents: &[u8],
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-and-flush"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_zeroes(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write-zeroes"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_zeroes_and_flush(
                    &self,
                    len: u64,
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core MCP data types and aliases
        ///
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Optional metadata for vendor-specific extensions.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
            pub type Meta = Option<_rt::Vec<(_rt::String, _rt::String)>>;
            /// Opaque pagination token.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#cursor>
            pub type Cursor = _rt::String;
            /// JSON-encoded data as a string.
            pub type Json = _rt::String;
            /// Uniform Resource Identifier.
            pub type Uri = _rt::String;
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Client capabilities (extensible)."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#clientcapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ClientCapabilities : u8 { const ELICITATION = 1 << 0; const ROOTS
                = 1 << 1; const SAMPLING = 1 << 2; const EXPERIMENTAL = 1 << 3; }
            }
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Capabilities that a server supports."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#servercapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ServerCapabilities : u8 { #[doc = " Argument autocompletion"]
                const COMPLETIONS = 1 << 0; #[doc = " Prompts"] const PROMPTS = 1 << 1;
                #[doc = " Resources"] const RESOURCES = 1 << 2; #[doc = " Tools"] const
                TOOLS = 1 << 3; #[doc = " Experimental features"] const EXPERIMENTAL = 1
                << 4; }
            }
            /// MCP protocol versions.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ProtocolVersion {
                /// Version 2025-06-18
                V20250618,
                /// Version 2025-03-26
                V20250326,
                /// Version 2024-11-05
                V20241105,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::V20250618 => {
                            f.debug_tuple("ProtocolVersion::V20250618").finish()
                        }
                        ProtocolVersion::V20250326 => {
                            f.debug_tuple("ProtocolVersion::V20250326").finish()
                        }
                        ProtocolVersion::V20241105 => {
                            f.debug_tuple("ProtocolVersion::V20241105").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::V20250618,
                        1 => ProtocolVersion::V20250326,
                        2 => ProtocolVersion::V20241105,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// MCP implementation metadata.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#implementation>
            #[derive(Clone)]
            pub struct Implementation {
                pub name: _rt::String,
                pub title: Option<_rt::String>,
                pub version: _rt::String,
            }
            impl ::core::fmt::Debug for Implementation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Implementation")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("version", &self.version)
                        .finish()
                }
            }
            /// JSON-RPC request ID (string or number).
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#requestid>
            #[derive(Clone)]
            pub enum Id {
                Number(i64),
                String(_rt::String),
            }
            impl ::core::fmt::Debug for Id {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Id::Number(e) => f.debug_tuple("Id::Number").field(e).finish(),
                        Id::String(e) => f.debug_tuple("Id::String").field(e).finish(),
                    }
                }
            }
        }
        /// Content types and structures for MCP messages.
        ///
        /// This interface defines the content blocks that can be included in MCP messages,
        /// mapping directly to the ContentBlock type union in the MCP specification.
        ///
        /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod content {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Meta = super::super::super::wasmcp::mcp::types::Meta;
            /// Role in a conversation.
            ///
            /// Maps to the Role type in the MCP spec:
            /// "The sender or recipient of messages and data in a conversation."
            /// Valid values: "user" | "assistant"
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#role>
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Optional annotations for the client.
            ///
            /// The client can use annotations to inform how objects are used or displayed.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#annotations>
            #[derive(Clone)]
            pub struct Annotations {
                /// Describes who the intended customer of this object or data is.
                ///
                /// It can include multiple entries to indicate content useful for multiple audiences (e.g., [“user”, “assistant”]).
                pub audience: Option<_rt::Vec<Role>>,
                /// The moment the resource was last modified, as an ISO 8601 formatted string.
                ///
                /// Should be an ISO 8601 formatted string (e.g., “2025-01-12T15:00:58Z”).
                ///
                /// Examples: last activity timestamp in an open file, timestamp when the resource was attached, etc.
                pub last_modified: Option<_rt::String>,
                /// Describes how important this data is for operating the server.
                ///
                /// A value of 1 means “most important,” and indicates that the data is effectively required, while 0 means “least important,” and indicates that the data is entirely optional.
                pub priority: f64,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("last-modified", &self.last_modified)
                        .field("priority", &self.priority)
                        .finish()
                }
            }
            /// Options for content blocks.
            #[derive(Clone)]
            pub struct ContentOptions {
                /// Optional annotations for the client.
                pub annotations: Option<Annotations>,
                /// Optional metadata.
                ///
                /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for ContentOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ContentOptions")
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Text provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#textcontent>
            #[derive(Clone)]
            pub struct TextContent {
                /// The text content of the message.
                pub text: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// An image provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#imagecontent>
            #[derive(Clone)]
            pub struct ImageContent {
                /// The base64-encoded image data.
                pub data: _rt::Vec<u8>,
                /// The MIME type of the image. Different providers may support different image types.
                pub mime_type: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Audio provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#audiocontent>
            #[derive(Clone)]
            pub struct AudioContent {
                /// The base64-encoded audio data.
                pub data: _rt::Vec<u8>,
                /// The MIME type of the audio. Different providers may support different audio types.
                pub mime_type: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Options for resource link content.
            #[derive(Clone)]
            pub struct ResourceLinkContentOptions {
                pub title: Option<_rt::String>,
                pub description: Option<_rt::String>,
                pub size: Option<u64>,
                pub mime_type: Option<_rt::String>,
                /// Optional annotations for the client.
                pub annotations: Option<Annotations>,
                /// Optional metadata.
                ///
                /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for ResourceLinkContentOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLinkContentOptions")
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("size", &self.size)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// A resource that the server is capable of reading, included in a prompt or tool call result.
            ///
            /// Note: resource links returned by tools are not guaranteed to appear in the results of resources/list requests.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcelink>
            #[derive(Clone)]
            pub struct ResourceLinkContent {
                /// The URI of this resource.
                pub uri: _rt::String,
                /// Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn’t present).
                pub name: _rt::String,
                pub options: Option<ResourceLinkContentOptions>,
            }
            impl ::core::fmt::Debug for ResourceLinkContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLinkContent")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Options for embedded resources.
            #[derive(Clone)]
            pub struct EmbeddedResourceOptions {
                pub mime_type: Option<_rt::String>,
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for EmbeddedResourceOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResourceOptions")
                        .field("mime-type", &self.mime_type)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Text resource contents.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#textresourcecontents>
            #[derive(Clone)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub text: _rt::String,
                pub options: Option<EmbeddedResourceOptions>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("text", &self.text)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Binary resource contents.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#blobresourcecontents>
            #[derive(Clone)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub blob: _rt::Vec<u8>,
                pub options: Option<EmbeddedResourceOptions>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("blob", &self.blob)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Embedded resource data.
            #[derive(Clone)]
            pub enum EmbeddedResource {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        EmbeddedResource::Text(e) => {
                            f.debug_tuple("EmbeddedResource::Text").field(e).finish()
                        }
                        EmbeddedResource::Blob(e) => {
                            f.debug_tuple("EmbeddedResource::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource with content options.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#embeddedresource>
            #[derive(Clone)]
            pub struct EmbeddedResourceContent {
                pub resource: EmbeddedResource,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for EmbeddedResourceContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResourceContent")
                        .field("resource", &self.resource)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Content blocks that can be included in messages.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
            #[derive(Clone)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLinkContent),
                EmbeddedResource(EmbeddedResourceContent),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod mcp {
            /// Writes resources/list results to an output stream.
            ///
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resources-list>
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod resources_list_result {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type StreamError = super::super::super::super::wasi::io::streams::StreamError;
                pub type Id = super::super::super::super::wasmcp::mcp::types::Id;
                pub type Cursor = super::super::super::super::wasmcp::mcp::types::Cursor;
                pub type Meta = super::super::super::super::wasmcp::mcp::types::Meta;
                pub type Annotations = super::super::super::super::wasmcp::mcp::content::Annotations;
                #[derive(Clone)]
                pub struct ResourceOptions {
                    pub size: Option<u64>,
                    pub title: Option<_rt::String>,
                    pub description: Option<_rt::String>,
                    pub mime_type: Option<_rt::String>,
                    pub annotations: Option<Annotations>,
                    pub meta: Meta,
                }
                impl ::core::fmt::Debug for ResourceOptions {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ResourceOptions")
                            .field("size", &self.size)
                            .field("title", &self.title)
                            .field("description", &self.description)
                            .field("mime-type", &self.mime_type)
                            .field("annotations", &self.annotations)
                            .field("meta", &self.meta)
                            .finish()
                    }
                }
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resource>
                #[derive(Clone)]
                pub struct Resource {
                    pub uri: _rt::String,
                    pub name: _rt::String,
                    pub options: Option<ResourceOptions>,
                }
                impl ::core::fmt::Debug for Resource {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Resource")
                            .field("uri", &self.uri)
                            .field("name", &self.name)
                            .field("options", &self.options)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Options {
                    pub meta: Meta,
                    pub next_cursor: Option<Cursor>,
                }
                impl ::core::fmt::Debug for Options {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Options")
                            .field("meta", &self.meta)
                            .field("next-cursor", &self.next_cursor)
                            .finish()
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Writer {
                    handle: _rt::Resource<Writer>,
                }
                type _WriterRep<T> = Option<T>;
                impl Writer {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Writer`.
                    pub fn new<T: GuestWriter>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _WriterRep<T> = Some(val);
                        let ptr: *mut _WriterRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestWriter>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestWriter>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _WriterRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestWriter>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Writer`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct WriterBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Writer>,
                }
                impl<'a> WriterBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Writer {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resources-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]writer"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_check_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::check_write(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V2;
                            match e {
                                V2::LastOperationFailed(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr1.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V2::Closed => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(8).cast::<*mut u8>();
                    let l2 = *arg0
                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = *arg0
                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l5 = *arg0
                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = i32::from(
                        *arg0
                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result43 = T::write(
                        unsafe { WriterBorrow::lift(l0 as u32 as usize) }.get(),
                        Resource {
                            uri: _rt::string_lift(bytes3),
                            name: _rt::string_lift(bytes6),
                            options: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = i32::from(
                                            *arg0
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l10 = i32::from(
                                            *arg0
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l14 = i32::from(
                                            *arg0
                                                .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l18 = i32::from(
                                            *arg0
                                                .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l22 = i32::from(
                                            *arg0
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l33 = i32::from(
                                            *arg0
                                                .add(56 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        ResourceOptions {
                                            size: match l8 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l9 = *arg0
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l9 as u64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            title: match l10 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l11 = *arg0
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l12 = *arg0
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len13 = l12;
                                                        let bytes13 = _rt::Vec::from_raw_parts(
                                                            l11.cast(),
                                                            len13,
                                                            len13,
                                                        );
                                                        _rt::string_lift(bytes13)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            description: match l14 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l15 = *arg0
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l16 = *arg0
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len17 = l16;
                                                        let bytes17 = _rt::Vec::from_raw_parts(
                                                            l15.cast(),
                                                            len17,
                                                            len17,
                                                        );
                                                        _rt::string_lift(bytes17)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            mime_type: match l18 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l19 = *arg0
                                                            .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l20 = *arg0
                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len21 = l20;
                                                        let bytes21 = _rt::Vec::from_raw_parts(
                                                            l19.cast(),
                                                            len21,
                                                            len21,
                                                        );
                                                        _rt::string_lift(bytes21)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l22 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l23 = i32::from(
                                                            *arg0
                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l28 = i32::from(
                                                            *arg0
                                                                .add(48 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l32 = *arg0
                                                            .add(48 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                            audience: match l23 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l24 = *arg0
                                                                            .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l25 = *arg0
                                                                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base27 = l24;
                                                                        let len27 = l25;
                                                                        let mut result27 = _rt::Vec::with_capacity(len27);
                                                                        for i in 0..len27 {
                                                                            let base = base27.add(i * 1);
                                                                            let e27 = {
                                                                                let l26 = i32::from(*base.add(0).cast::<u8>());
                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                    l26 as u8,
                                                                                )
                                                                            };
                                                                            result27.push(e27);
                                                                        }
                                                                        _rt::cabi_dealloc(base27, len27 * 1, 1);
                                                                        result27
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            last_modified: match l28 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l29 = *arg0
                                                                            .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l30 = *arg0
                                                                            .add(48 + 17 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len31 = l30;
                                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                                            l29.cast(),
                                                                            len31,
                                                                            len31,
                                                                        );
                                                                        _rt::string_lift(bytes31)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            priority: l32,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l33 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l34 = *arg0
                                                            .add(56 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l35 = *arg0
                                                            .add(56 + 20 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base42 = l34;
                                                        let len42 = l35;
                                                        let mut result42 = _rt::Vec::with_capacity(len42);
                                                        for i in 0..len42 {
                                                            let base = base42
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e42 = {
                                                                let l36 = *base.add(0).cast::<*mut u8>();
                                                                let l37 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len38 = l37;
                                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                                    l36.cast(),
                                                                    len38,
                                                                    len38,
                                                                );
                                                                let l39 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l40 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len41 = l40;
                                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                                    l39.cast(),
                                                                    len41,
                                                                    len41,
                                                                );
                                                                (_rt::string_lift(bytes38), _rt::string_lift(bytes41))
                                                            };
                                                            result42.push(e42);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base42,
                                                            len42 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result42
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        64 + 20 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr44 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result43 {
                        Ok(_) => {
                            *ptr44.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr44.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V45;
                            match e {
                                V45::LastOperationFailed(e) => {
                                    *ptr44.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr44.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V45::Closed => {
                                    *ptr44.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr44
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_close_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result8 = T::close(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    meta: match arg2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base6 = arg3;
                                                let len6 = arg4;
                                                let mut result6 = _rt::Vec::with_capacity(len6);
                                                for i in 0..len6 {
                                                    let base = base6
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e6 = {
                                                        let l0 = *base.add(0).cast::<*mut u8>();
                                                        let l1 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len2 = l1;
                                                        let bytes2 = _rt::Vec::from_raw_parts(
                                                            l0.cast(),
                                                            len2,
                                                            len2,
                                                        );
                                                        let l3 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l4 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len5 = l4;
                                                        let bytes5 = _rt::Vec::from_raw_parts(
                                                            l3.cast(),
                                                            len5,
                                                            len5,
                                                        );
                                                        (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                                                    };
                                                    result6.push(e6);
                                                }
                                                _rt::cabi_dealloc(
                                                    base6,
                                                    len6 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result6
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    next_cursor: match arg5 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let len7 = arg7;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    arg6.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr9 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result8 {
                        Ok(_) => {
                            *ptr9.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr9.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V10;
                            match e {
                                V10::LastOperationFailed(e) => {
                                    *ptr9.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr9.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V10::Closed => {
                                    *ptr9.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr9
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: i32,
                    arg11: *mut u8,
                    arg12: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let base44 = arg4;
                    let len44 = arg5;
                    let mut result44 = _rt::Vec::with_capacity(len44);
                    for i in 0..len44 {
                        let base = base44
                            .add(i * (56 + 20 * ::core::mem::size_of::<*const u8>()));
                        let e44 = {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len4 = l3;
                            let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                            let l5 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            Resource {
                                uri: _rt::string_lift(bytes4),
                                name: _rt::string_lift(bytes7),
                                options: match l8 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l9 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l11 = i32::from(
                                                *base
                                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l15 = i32::from(
                                                *base
                                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l19 = i32::from(
                                                *base
                                                    .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l23 = i32::from(
                                                *base
                                                    .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l34 = i32::from(
                                                *base
                                                    .add(48 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            ResourceOptions {
                                                size: match l9 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l10 = *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            l10 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                title: match l11 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l12 = *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l13 = *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len14 = l13;
                                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                                l12.cast(),
                                                                len14,
                                                                len14,
                                                            );
                                                            _rt::string_lift(bytes14)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                description: match l15 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l16 = *base
                                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l17 = *base
                                                                .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );
                                                            _rt::string_lift(bytes18)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                mime_type: match l19 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l20 = *base
                                                                .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l21 = *base
                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                annotations: match l23 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l24 = i32::from(
                                                                *base
                                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l29 = i32::from(
                                                                *base
                                                                    .add(40 + 15 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l33 = *base
                                                                .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>();
                                                            super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                audience: match l24 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l25 = *base
                                                                                .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l26 = *base
                                                                                .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base28 = l25;
                                                                            let len28 = l26;
                                                                            let mut result28 = _rt::Vec::with_capacity(len28);
                                                                            for i in 0..len28 {
                                                                                let base = base28.add(i * 1);
                                                                                let e28 = {
                                                                                    let l27 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                        l27 as u8,
                                                                                    )
                                                                                };
                                                                                result28.push(e28);
                                                                            }
                                                                            _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                                            result28
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l29 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l30 = *base
                                                                                .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l31 = *base
                                                                                .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len32 = l31;
                                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                                l30.cast(),
                                                                                len32,
                                                                                len32,
                                                                            );
                                                                            _rt::string_lift(bytes32)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: l33,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l34 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l35 = *base
                                                                .add(48 + 19 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l36 = *base
                                                                .add(48 + 20 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base43 = l35;
                                                            let len43 = l36;
                                                            let mut result43 = _rt::Vec::with_capacity(len43);
                                                            for i in 0..len43 {
                                                                let base = base43
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e43 = {
                                                                    let l37 = *base.add(0).cast::<*mut u8>();
                                                                    let l38 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len39 = l38;
                                                                    let bytes39 = _rt::Vec::from_raw_parts(
                                                                        l37.cast(),
                                                                        len39,
                                                                        len39,
                                                                    );
                                                                    let l40 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l41 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len42 = l41;
                                                                    let bytes42 = _rt::Vec::from_raw_parts(
                                                                        l40.cast(),
                                                                        len42,
                                                                        len42,
                                                                    );
                                                                    (_rt::string_lift(bytes39), _rt::string_lift(bytes42))
                                                                };
                                                                result43.push(e43);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base43,
                                                                len43 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result43
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result44.push(e44);
                    }
                    _rt::cabi_dealloc(
                        base44,
                        len44 * (56 + 20 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result53 = T::write(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        result44,
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    meta: match arg7 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base51 = arg8;
                                                let len51 = arg9;
                                                let mut result51 = _rt::Vec::with_capacity(len51);
                                                for i in 0..len51 {
                                                    let base = base51
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e51 = {
                                                        let l45 = *base.add(0).cast::<*mut u8>();
                                                        let l46 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len47 = l46;
                                                        let bytes47 = _rt::Vec::from_raw_parts(
                                                            l45.cast(),
                                                            len47,
                                                            len47,
                                                        );
                                                        let l48 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l49 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len50 = l49;
                                                        let bytes50 = _rt::Vec::from_raw_parts(
                                                            l48.cast(),
                                                            len50,
                                                            len50,
                                                        );
                                                        (_rt::string_lift(bytes47), _rt::string_lift(bytes50))
                                                    };
                                                    result51.push(e51);
                                                }
                                                _rt::cabi_dealloc(
                                                    base51,
                                                    len51 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result51
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    next_cursor: match arg10 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let len52 = arg12;
                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                    arg11.cast(),
                                                    len52,
                                                    len52,
                                                );
                                                _rt::string_lift(bytes52)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr54 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result53 {
                        Ok(_) => {
                            *ptr54.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr54.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V55;
                            match e {
                                V55::LastOperationFailed(e) => {
                                    *ptr54.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr54.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V55::Closed => {
                                    *ptr54.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr54
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_open_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    use super::super::super::super::wasmcp::mcp::types::Id as V5;
                    let v5 = match l0 {
                        0 => {
                            let e5 = {
                                let l1 = *arg0.add(8).cast::<i64>();
                                l1
                            };
                            V5::Number(e5)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e5 = {
                                let l2 = *arg0.add(8).cast::<*mut u8>();
                                let l3 = *arg0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    l2.cast(),
                                    len4,
                                    len4,
                                );
                                _rt::string_lift(bytes4)
                            };
                            V5::String(e5)
                        }
                    };
                    let l6 = *arg0
                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l7 = *arg0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *arg0
                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len9 = l8;
                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                    let l10 = *arg0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l11 = *arg0
                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len12 = l11;
                    let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                    let l13 = i32::from(
                        *arg0
                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result49 = T::open(
                        v5,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                l6 as u32,
                            )
                        },
                        Resource {
                            uri: _rt::string_lift(bytes9),
                            name: _rt::string_lift(bytes12),
                            options: match l13 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l14 = i32::from(
                                            *arg0
                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l16 = i32::from(
                                            *arg0
                                                .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l20 = i32::from(
                                            *arg0
                                                .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l24 = i32::from(
                                            *arg0
                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l28 = i32::from(
                                            *arg0
                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l39 = i32::from(
                                            *arg0
                                                .add(64 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        ResourceOptions {
                                            size: match l14 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l15 = *arg0
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l15 as u64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            title: match l16 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l17 = *arg0
                                                            .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l18 = *arg0
                                                            .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len19 = l18;
                                                        let bytes19 = _rt::Vec::from_raw_parts(
                                                            l17.cast(),
                                                            len19,
                                                            len19,
                                                        );
                                                        _rt::string_lift(bytes19)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            description: match l20 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l21 = *arg0
                                                            .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l22 = *arg0
                                                            .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len23 = l22;
                                                        let bytes23 = _rt::Vec::from_raw_parts(
                                                            l21.cast(),
                                                            len23,
                                                            len23,
                                                        );
                                                        _rt::string_lift(bytes23)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            mime_type: match l24 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l25 = *arg0
                                                            .add(40 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l26 = *arg0
                                                            .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len27 = l26;
                                                        let bytes27 = _rt::Vec::from_raw_parts(
                                                            l25.cast(),
                                                            len27,
                                                            len27,
                                                        );
                                                        _rt::string_lift(bytes27)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l28 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l29 = i32::from(
                                                            *arg0
                                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l34 = i32::from(
                                                            *arg0
                                                                .add(56 + 17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l38 = *arg0
                                                            .add(56 + 20 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                            audience: match l29 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l30 = *arg0
                                                                            .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l31 = *arg0
                                                                            .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base33 = l30;
                                                                        let len33 = l31;
                                                                        let mut result33 = _rt::Vec::with_capacity(len33);
                                                                        for i in 0..len33 {
                                                                            let base = base33.add(i * 1);
                                                                            let e33 = {
                                                                                let l32 = i32::from(*base.add(0).cast::<u8>());
                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                    l32 as u8,
                                                                                )
                                                                            };
                                                                            result33.push(e33);
                                                                        }
                                                                        _rt::cabi_dealloc(base33, len33 * 1, 1);
                                                                        result33
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            last_modified: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *arg0
                                                                            .add(56 + 18 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l36 = *arg0
                                                                            .add(56 + 19 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        _rt::string_lift(bytes37)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            priority: l38,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l39 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l40 = *arg0
                                                            .add(64 + 21 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l41 = *arg0
                                                            .add(64 + 22 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base48 = l40;
                                                        let len48 = l41;
                                                        let mut result48 = _rt::Vec::with_capacity(len48);
                                                        for i in 0..len48 {
                                                            let base = base48
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e48 = {
                                                                let l42 = *base.add(0).cast::<*mut u8>();
                                                                let l43 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len44 = l43;
                                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                                    l42.cast(),
                                                                    len44,
                                                                    len44,
                                                                );
                                                                let l45 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l46 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len47 = l46;
                                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                                    l45.cast(),
                                                                    len47,
                                                                    len47,
                                                                );
                                                                (_rt::string_lift(bytes44), _rt::string_lift(bytes47))
                                                            };
                                                            result48.push(e48);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base48,
                                                            len48 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result48
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        72 + 22 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr50 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result49 {
                        Ok(e) => {
                            *ptr50.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr50.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr50.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V51;
                            match e {
                                V51::LastOperationFailed(e) => {
                                    *ptr50.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr50.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V51::Closed => {
                                    *ptr50.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr50
                }
                pub trait Guest {
                    type Writer: GuestWriter;
                    fn write(
                        id: Id,
                        output: OutputStream,
                        resources: _rt::Vec<Resource>,
                        options: Option<Options>,
                    ) -> Result<(), StreamError>;
                    fn open(
                        id: Id,
                        output: OutputStream,
                        initial: Resource,
                    ) -> Result<Writer, StreamError>;
                }
                pub trait GuestWriter: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resources-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]writer"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resources-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]writer"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn check_write(&self) -> Result<u32, StreamError>;
                    fn write(&self, resource: Resource) -> Result<(), StreamError>;
                    fn close(&self, options: Option<Options>) -> Result<(), StreamError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_resources_list_result_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/resources-list-result@0.3.0-alpha.59#[method]writer.check-write")]
                        unsafe extern "C" fn export_method_writer_check_write(arg0 : *
                        mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_check_write_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/resources-list-result@0.3.0-alpha.59#[method]writer.write")]
                        unsafe extern "C" fn export_method_writer_write(arg0 : * mut u8,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_write_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Writer > (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/resources-list-result@0.3.0-alpha.59#[method]writer.close")]
                        unsafe extern "C" fn export_method_writer_close(arg0 : * mut u8,
                        arg1 : i32, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 :
                        i32, arg6 : * mut u8, arg7 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_writer_close_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7) } } #[unsafe (export_name =
                        "wasmcp:mcp/resources-list-result@0.3.0-alpha.59#write")] unsafe
                        extern "C" fn export_write(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize, arg6 : i32, arg7 : i32, arg8 : * mut
                        u8, arg9 : usize, arg10 : i32, arg11 : * mut u8, arg12 : usize,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_write_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5,
                        arg6, arg7, arg8, arg9, arg10, arg11, arg12) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/resources-list-result@0.3.0-alpha.59#open")] unsafe
                        extern "C" fn export_open(arg0 : * mut u8,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_open_cabi::<$ty > (arg0) } } const
                        _ : () = { #[doc(hidden)] #[unsafe (export_name =
                        "wasmcp:mcp/resources-list-result@0.3.0-alpha.59#[dtor]writer")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Writer::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Writer > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_resources_list_result_0_3_0_alpha_59_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
            /// Writes resources/read results to an output stream.
            ///
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resources-read>
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod resources_read_result {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type StreamError = super::super::super::super::wasi::io::streams::StreamError;
                pub type Id = super::super::super::super::wasmcp::mcp::types::Id;
                pub type Meta = super::super::super::super::wasmcp::mcp::types::Meta;
                #[derive(Clone)]
                pub struct ContentsOptions {
                    pub mime_type: Option<_rt::String>,
                    pub meta: Meta,
                }
                impl ::core::fmt::Debug for ContentsOptions {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ContentsOptions")
                            .field("mime-type", &self.mime_type)
                            .field("meta", &self.meta)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Contents {
                    pub uri: _rt::String,
                    pub data: _rt::Vec<u8>,
                    pub options: Option<ContentsOptions>,
                }
                impl ::core::fmt::Debug for Contents {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Contents")
                            .field("uri", &self.uri)
                            .field("data", &self.data)
                            .field("options", &self.options)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Options {
                    pub meta: Meta,
                }
                impl ::core::fmt::Debug for Options {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Options").field("meta", &self.meta).finish()
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Writer {
                    handle: _rt::Resource<Writer>,
                }
                type _WriterRep<T> = Option<T>;
                impl Writer {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Writer`.
                    pub fn new<T: GuestWriter>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _WriterRep<T> = Some(val);
                        let ptr: *mut _WriterRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestWriter>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestWriter>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _WriterRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestWriter>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Writer`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct WriterBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Writer>,
                }
                impl<'a> WriterBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Writer {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resources-read-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]writer"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_check_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::check_write(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V2;
                            match e {
                                V2::LastOperationFailed(e) => {
                                    *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                                    *ptr1.add(12).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V2::Closed => {
                                    *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::write(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V3;
                            match e {
                                V3::LastOperationFailed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr2.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V3::Closed => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_close_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result7 = T::close(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    meta: match arg2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base6 = arg3;
                                                let len6 = arg4;
                                                let mut result6 = _rt::Vec::with_capacity(len6);
                                                for i in 0..len6 {
                                                    let base = base6
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e6 = {
                                                        let l0 = *base.add(0).cast::<*mut u8>();
                                                        let l1 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len2 = l1;
                                                        let bytes2 = _rt::Vec::from_raw_parts(
                                                            l0.cast(),
                                                            len2,
                                                            len2,
                                                        );
                                                        let l3 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l4 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len5 = l4;
                                                        let bytes5 = _rt::Vec::from_raw_parts(
                                                            l3.cast(),
                                                            len5,
                                                            len5,
                                                        );
                                                        (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                                                    };
                                                    result6.push(e6);
                                                }
                                                _rt::cabi_dealloc(
                                                    base6,
                                                    len6 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result6
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr8 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result7 {
                        Ok(_) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V9;
                            match e {
                                V9::LastOperationFailed(e) => {
                                    *ptr8.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr8.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V9::Closed => {
                                    *ptr8.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    use super::super::super::super::wasmcp::mcp::types::Id as V5;
                    let v5 = match l0 {
                        0 => {
                            let e5 = {
                                let l1 = *arg0.add(8).cast::<i64>();
                                l1
                            };
                            V5::Number(e5)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e5 = {
                                let l2 = *arg0.add(8).cast::<*mut u8>();
                                let l3 = *arg0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    l2.cast(),
                                    len4,
                                    len4,
                                );
                                _rt::string_lift(bytes4)
                            };
                            V5::String(e5)
                        }
                    };
                    let l6 = *arg0
                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l7 = *arg0
                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *arg0
                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len9 = l8;
                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                    let l10 = *arg0
                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l11 = *arg0
                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len12 = l11;
                    let l13 = i32::from(
                        *arg0
                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l28 = i32::from(
                        *arg0
                            .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result39 = T::write(
                        v5,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                l6 as u32,
                            )
                        },
                        Contents {
                            uri: _rt::string_lift(bytes9),
                            data: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                            options: match l13 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l14 = i32::from(
                                            *arg0
                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l18 = i32::from(
                                            *arg0
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        ContentsOptions {
                                            mime_type: match l14 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l15 = *arg0
                                                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l16 = *arg0
                                                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len17 = l16;
                                                        let bytes17 = _rt::Vec::from_raw_parts(
                                                            l15.cast(),
                                                            len17,
                                                            len17,
                                                        );
                                                        _rt::string_lift(bytes17)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l18 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l19 = *arg0
                                                            .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l20 = *arg0
                                                            .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base27 = l19;
                                                        let len27 = l20;
                                                        let mut result27 = _rt::Vec::with_capacity(len27);
                                                        for i in 0..len27 {
                                                            let base = base27
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e27 = {
                                                                let l21 = *base.add(0).cast::<*mut u8>();
                                                                let l22 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len23 = l22;
                                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                                    l21.cast(),
                                                                    len23,
                                                                    len23,
                                                                );
                                                                let l24 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l25 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len26 = l25;
                                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                                    l24.cast(),
                                                                    len26,
                                                                    len26,
                                                                );
                                                                (_rt::string_lift(bytes23), _rt::string_lift(bytes26))
                                                            };
                                                            result27.push(e27);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base27,
                                                            len27 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result27
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        match l28 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l29 = i32::from(
                                        *arg0
                                            .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    Options {
                                        meta: match l29 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l30 = *arg0
                                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *arg0
                                                        .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base38 = l30;
                                                    let len38 = l31;
                                                    let mut result38 = _rt::Vec::with_capacity(len38);
                                                    for i in 0..len38 {
                                                        let base = base38
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e38 = {
                                                            let l32 = *base.add(0).cast::<*mut u8>();
                                                            let l33 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len34 = l33;
                                                            let bytes34 = _rt::Vec::from_raw_parts(
                                                                l32.cast(),
                                                                len34,
                                                                len34,
                                                            );
                                                            let l35 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l36 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len37 = l36;
                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                l35.cast(),
                                                                len37,
                                                                len37,
                                                            );
                                                            (_rt::string_lift(bytes34), _rt::string_lift(bytes37))
                                                        };
                                                        result38.push(e38);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base38,
                                                        len38 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result38
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 18 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr40 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result39 {
                        Ok(_) => {
                            *ptr40.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr40.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V41;
                            match e {
                                V41::LastOperationFailed(e) => {
                                    *ptr40.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr40.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V41::Closed => {
                                    *ptr40.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr40
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_open_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: i32,
                    arg9: i32,
                    arg10: *mut u8,
                    arg11: usize,
                    arg12: i32,
                    arg13: *mut u8,
                    arg14: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let len3 = arg7;
                    let result12 = T::open(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        Contents {
                            uri: _rt::string_lift(bytes2),
                            data: _rt::Vec::from_raw_parts(arg6.cast(), len3, len3),
                            options: match arg8 {
                                0 => None,
                                1 => {
                                    let e = ContentsOptions {
                                        mime_type: match arg9 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let len4 = arg11;
                                                    let bytes4 = _rt::Vec::from_raw_parts(
                                                        arg10.cast(),
                                                        len4,
                                                        len4,
                                                    );
                                                    _rt::string_lift(bytes4)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        meta: match arg12 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let base11 = arg13;
                                                    let len11 = arg14;
                                                    let mut result11 = _rt::Vec::with_capacity(len11);
                                                    for i in 0..len11 {
                                                        let base = base11
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e11 = {
                                                            let l5 = *base.add(0).cast::<*mut u8>();
                                                            let l6 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len7 = l6;
                                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                                l5.cast(),
                                                                len7,
                                                                len7,
                                                            );
                                                            let l8 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l9 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len10 = l9;
                                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                                l8.cast(),
                                                                len10,
                                                                len10,
                                                            );
                                                            (_rt::string_lift(bytes7), _rt::string_lift(bytes10))
                                                        };
                                                        result11.push(e11);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base11,
                                                        len11 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result11
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr13 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result12 {
                        Ok(e) => {
                            *ptr13.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr13.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr13.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V14;
                            match e {
                                V14::LastOperationFailed(e) => {
                                    *ptr13.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr13.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V14::Closed => {
                                    *ptr13.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr13
                }
                pub trait Guest {
                    type Writer: GuestWriter;
                    fn write(
                        id: Id,
                        output: OutputStream,
                        contents: Contents,
                        options: Option<Options>,
                    ) -> Result<(), StreamError>;
                    fn open(
                        id: Id,
                        output: OutputStream,
                        initial: Contents,
                    ) -> Result<Writer, StreamError>;
                }
                pub trait GuestWriter: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resources-read-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]writer"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resources-read-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]writer"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn check_write(&self) -> Result<u64, StreamError>;
                    fn write(&self, contents: _rt::Vec<u8>) -> Result<(), StreamError>;
                    fn close(&self, options: Option<Options>) -> Result<(), StreamError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_resources_read_result_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/resources-read-result@0.3.0-alpha.59#[method]writer.check-write")]
                        unsafe extern "C" fn export_method_writer_check_write(arg0 : *
                        mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_check_write_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/resources-read-result@0.3.0-alpha.59#[method]writer.write")]
                        unsafe extern "C" fn export_method_writer_write(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_writer_write_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "wasmcp:mcp/resources-read-result@0.3.0-alpha.59#[method]writer.close")]
                        unsafe extern "C" fn export_method_writer_close(arg0 : * mut u8,
                        arg1 : i32, arg2 : i32, arg3 : * mut u8, arg4 : usize,) -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_close_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Writer > (arg0, arg1, arg2, arg3, arg4) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/resources-read-result@0.3.0-alpha.59#write")] unsafe
                        extern "C" fn export_write(arg0 : * mut u8,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_write_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "wasmcp:mcp/resources-read-result@0.3.0-alpha.59#open")] unsafe
                        extern "C" fn export_open(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize, arg6 : * mut u8, arg7 : usize, arg8 :
                        i32, arg9 : i32, arg10 : * mut u8, arg11 : usize, arg12 : i32,
                        arg13 : * mut u8, arg14 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_open_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                        arg13, arg14) } } const _ : () = { #[doc(hidden)] #[unsafe
                        (export_name =
                        "wasmcp:mcp/resources-read-result@0.3.0-alpha.59#[dtor]writer")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Writer::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Writer > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_resources_read_result_0_3_0_alpha_59_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16],
                );
            }
            /// Writes resource-templates/list results to an output stream.
            ///
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resources-templates-list>
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod resource_templates_list_result {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type StreamError = super::super::super::super::wasi::io::streams::StreamError;
                pub type Id = super::super::super::super::wasmcp::mcp::types::Id;
                pub type Cursor = super::super::super::super::wasmcp::mcp::types::Cursor;
                pub type Meta = super::super::super::super::wasmcp::mcp::types::Meta;
                pub type Annotations = super::super::super::super::wasmcp::mcp::content::Annotations;
                #[derive(Clone)]
                pub struct TemplateOptions {
                    pub description: Option<_rt::String>,
                    pub title: Option<_rt::String>,
                    pub mime_type: Option<_rt::String>,
                    pub annotations: Option<Annotations>,
                    pub meta: Meta,
                }
                impl ::core::fmt::Debug for TemplateOptions {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TemplateOptions")
                            .field("description", &self.description)
                            .field("title", &self.title)
                            .field("mime-type", &self.mime_type)
                            .field("annotations", &self.annotations)
                            .field("meta", &self.meta)
                            .finish()
                    }
                }
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcetemplate>
                #[derive(Clone)]
                pub struct Template {
                    pub uri_template: _rt::String,
                    pub name: _rt::String,
                    pub options: Option<TemplateOptions>,
                }
                impl ::core::fmt::Debug for Template {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Template")
                            .field("uri-template", &self.uri_template)
                            .field("name", &self.name)
                            .field("options", &self.options)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Options {
                    pub meta: Meta,
                    pub next_cursor: Option<Cursor>,
                }
                impl ::core::fmt::Debug for Options {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Options")
                            .field("meta", &self.meta)
                            .field("next-cursor", &self.next_cursor)
                            .finish()
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Writer {
                    handle: _rt::Resource<Writer>,
                }
                type _WriterRep<T> = Option<T>;
                impl Writer {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Writer`.
                    pub fn new<T: GuestWriter>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _WriterRep<T> = Some(val);
                        let ptr: *mut _WriterRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestWriter>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestWriter>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _WriterRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestWriter>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Writer`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct WriterBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Writer>,
                }
                impl<'a> WriterBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Writer {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]writer"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_check_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::check_write(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V2;
                            match e {
                                V2::LastOperationFailed(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr1.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V2::Closed => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(8).cast::<*mut u8>();
                    let l2 = *arg0
                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = *arg0
                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l5 = *arg0
                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = i32::from(
                        *arg0
                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result41 = T::write(
                        unsafe { WriterBorrow::lift(l0 as u32 as usize) }.get(),
                        Template {
                            uri_template: _rt::string_lift(bytes3),
                            name: _rt::string_lift(bytes6),
                            options: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = i32::from(
                                            *arg0
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l12 = i32::from(
                                            *arg0
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l16 = i32::from(
                                            *arg0
                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l20 = i32::from(
                                            *arg0
                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l31 = i32::from(
                                            *arg0
                                                .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        TemplateOptions {
                                            description: match l8 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l9 = *arg0
                                                            .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l10 = *arg0
                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        _rt::string_lift(bytes11)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            title: match l12 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l13 = *arg0
                                                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l14 = *arg0
                                                            .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len15 = l14;
                                                        let bytes15 = _rt::Vec::from_raw_parts(
                                                            l13.cast(),
                                                            len15,
                                                            len15,
                                                        );
                                                        _rt::string_lift(bytes15)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            mime_type: match l16 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l17 = *arg0
                                                            .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l18 = *arg0
                                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len19 = l18;
                                                        let bytes19 = _rt::Vec::from_raw_parts(
                                                            l17.cast(),
                                                            len19,
                                                            len19,
                                                        );
                                                        _rt::string_lift(bytes19)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l20 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l21 = i32::from(
                                                            *arg0
                                                                .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l26 = i32::from(
                                                            *arg0
                                                                .add(32 + 15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l30 = *arg0
                                                            .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                            audience: match l21 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l22 = *arg0
                                                                            .add(32 + 13 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l23 = *arg0
                                                                            .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base25 = l22;
                                                                        let len25 = l23;
                                                                        let mut result25 = _rt::Vec::with_capacity(len25);
                                                                        for i in 0..len25 {
                                                                            let base = base25.add(i * 1);
                                                                            let e25 = {
                                                                                let l24 = i32::from(*base.add(0).cast::<u8>());
                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                    l24 as u8,
                                                                                )
                                                                            };
                                                                            result25.push(e25);
                                                                        }
                                                                        _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                                        result25
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            last_modified: match l26 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l27 = *arg0
                                                                            .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l28 = *arg0
                                                                            .add(32 + 17 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len29 = l28;
                                                                        let bytes29 = _rt::Vec::from_raw_parts(
                                                                            l27.cast(),
                                                                            len29,
                                                                            len29,
                                                                        );
                                                                        _rt::string_lift(bytes29)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            priority: l30,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            meta: match l31 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l32 = *arg0
                                                            .add(40 + 19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l33 = *arg0
                                                            .add(40 + 20 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base40 = l32;
                                                        let len40 = l33;
                                                        let mut result40 = _rt::Vec::with_capacity(len40);
                                                        for i in 0..len40 {
                                                            let base = base40
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e40 = {
                                                                let l34 = *base.add(0).cast::<*mut u8>();
                                                                let l35 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len36 = l35;
                                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                                    l34.cast(),
                                                                    len36,
                                                                    len36,
                                                                );
                                                                let l37 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l38 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len39 = l38;
                                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                                    l37.cast(),
                                                                    len39,
                                                                    len39,
                                                                );
                                                                (_rt::string_lift(bytes36), _rt::string_lift(bytes39))
                                                            };
                                                            result40.push(e40);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base40,
                                                            len40 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result40
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        48 + 20 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr42 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result41 {
                        Ok(_) => {
                            *ptr42.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr42.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V43;
                            match e {
                                V43::LastOperationFailed(e) => {
                                    *ptr42.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr42.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V43::Closed => {
                                    *ptr42.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr42
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_close_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result8 = T::close(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    meta: match arg2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base6 = arg3;
                                                let len6 = arg4;
                                                let mut result6 = _rt::Vec::with_capacity(len6);
                                                for i in 0..len6 {
                                                    let base = base6
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e6 = {
                                                        let l0 = *base.add(0).cast::<*mut u8>();
                                                        let l1 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len2 = l1;
                                                        let bytes2 = _rt::Vec::from_raw_parts(
                                                            l0.cast(),
                                                            len2,
                                                            len2,
                                                        );
                                                        let l3 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l4 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len5 = l4;
                                                        let bytes5 = _rt::Vec::from_raw_parts(
                                                            l3.cast(),
                                                            len5,
                                                            len5,
                                                        );
                                                        (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                                                    };
                                                    result6.push(e6);
                                                }
                                                _rt::cabi_dealloc(
                                                    base6,
                                                    len6 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result6
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    next_cursor: match arg5 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let len7 = arg7;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    arg6.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr9 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result8 {
                        Ok(_) => {
                            *ptr9.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr9.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V10;
                            match e {
                                V10::LastOperationFailed(e) => {
                                    *ptr9.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr9.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V10::Closed => {
                                    *ptr9.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr9
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: i32,
                    arg11: *mut u8,
                    arg12: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let base42 = arg4;
                    let len42 = arg5;
                    let mut result42 = _rt::Vec::with_capacity(len42);
                    for i in 0..len42 {
                        let base = base42
                            .add(i * (40 + 20 * ::core::mem::size_of::<*const u8>()));
                        let e42 = {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len4 = l3;
                            let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                            let l5 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            Template {
                                uri_template: _rt::string_lift(bytes4),
                                name: _rt::string_lift(bytes7),
                                options: match l8 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l9 = i32::from(
                                                *base
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l13 = i32::from(
                                                *base
                                                    .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l17 = i32::from(
                                                *base
                                                    .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l21 = i32::from(
                                                *base
                                                    .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l32 = i32::from(
                                                *base
                                                    .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            TemplateOptions {
                                                description: match l9 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l10 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l11 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            _rt::string_lift(bytes12)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                title: match l13 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l14 = *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l15 = *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len16 = l15;
                                                            let bytes16 = _rt::Vec::from_raw_parts(
                                                                l14.cast(),
                                                                len16,
                                                                len16,
                                                            );
                                                            _rt::string_lift(bytes16)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                mime_type: match l17 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l18 = *base
                                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l19 = *base
                                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len20 = l19;
                                                            let bytes20 = _rt::Vec::from_raw_parts(
                                                                l18.cast(),
                                                                len20,
                                                                len20,
                                                            );
                                                            _rt::string_lift(bytes20)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                annotations: match l21 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l22 = i32::from(
                                                                *base
                                                                    .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l27 = i32::from(
                                                                *base
                                                                    .add(24 + 15 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l31 = *base
                                                                .add(24 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>();
                                                            super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                audience: match l22 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l23 = *base
                                                                                .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l24 = *base
                                                                                .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base26 = l23;
                                                                            let len26 = l24;
                                                                            let mut result26 = _rt::Vec::with_capacity(len26);
                                                                            for i in 0..len26 {
                                                                                let base = base26.add(i * 1);
                                                                                let e26 = {
                                                                                    let l25 = i32::from(*base.add(0).cast::<u8>());
                                                                                    super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                        l25 as u8,
                                                                                    )
                                                                                };
                                                                                result26.push(e26);
                                                                            }
                                                                            _rt::cabi_dealloc(base26, len26 * 1, 1);
                                                                            result26
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                last_modified: match l27 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l28 = *base
                                                                                .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l29 = *base
                                                                                .add(24 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len30 = l29;
                                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                                l28.cast(),
                                                                                len30,
                                                                                len30,
                                                                            );
                                                                            _rt::string_lift(bytes30)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                priority: l31,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                meta: match l32 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l33 = *base
                                                                .add(32 + 19 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l34 = *base
                                                                .add(32 + 20 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base41 = l33;
                                                            let len41 = l34;
                                                            let mut result41 = _rt::Vec::with_capacity(len41);
                                                            for i in 0..len41 {
                                                                let base = base41
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e41 = {
                                                                    let l35 = *base.add(0).cast::<*mut u8>();
                                                                    let l36 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len37 = l36;
                                                                    let bytes37 = _rt::Vec::from_raw_parts(
                                                                        l35.cast(),
                                                                        len37,
                                                                        len37,
                                                                    );
                                                                    let l38 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l39 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len40 = l39;
                                                                    let bytes40 = _rt::Vec::from_raw_parts(
                                                                        l38.cast(),
                                                                        len40,
                                                                        len40,
                                                                    );
                                                                    (_rt::string_lift(bytes37), _rt::string_lift(bytes40))
                                                                };
                                                                result41.push(e41);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base41,
                                                                len41 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result41
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result42.push(e42);
                    }
                    _rt::cabi_dealloc(
                        base42,
                        len42 * (40 + 20 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result51 = T::write(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        result42,
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    meta: match arg7 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base49 = arg8;
                                                let len49 = arg9;
                                                let mut result49 = _rt::Vec::with_capacity(len49);
                                                for i in 0..len49 {
                                                    let base = base49
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e49 = {
                                                        let l43 = *base.add(0).cast::<*mut u8>();
                                                        let l44 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len45 = l44;
                                                        let bytes45 = _rt::Vec::from_raw_parts(
                                                            l43.cast(),
                                                            len45,
                                                            len45,
                                                        );
                                                        let l46 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l47 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len48 = l47;
                                                        let bytes48 = _rt::Vec::from_raw_parts(
                                                            l46.cast(),
                                                            len48,
                                                            len48,
                                                        );
                                                        (_rt::string_lift(bytes45), _rt::string_lift(bytes48))
                                                    };
                                                    result49.push(e49);
                                                }
                                                _rt::cabi_dealloc(
                                                    base49,
                                                    len49 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result49
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    next_cursor: match arg10 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let len50 = arg12;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    arg11.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr52 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result51 {
                        Ok(_) => {
                            *ptr52.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr52.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V53;
                            match e {
                                V53::LastOperationFailed(e) => {
                                    *ptr52.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr52.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V53::Closed => {
                                    *ptr52.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr52
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_open_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let result2 = T::open(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr3.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V4;
                            match e {
                                V4::LastOperationFailed(e) => {
                                    *ptr3.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr3.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V4::Closed => {
                                    *ptr3.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr3
                }
                pub trait Guest {
                    type Writer: GuestWriter;
                    fn write(
                        id: Id,
                        output: OutputStream,
                        templates: _rt::Vec<Template>,
                        options: Option<Options>,
                    ) -> Result<(), StreamError>;
                    fn open(id: Id, output: OutputStream) -> Result<Writer, StreamError>;
                }
                pub trait GuestWriter: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]writer"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]writer"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn check_write(&self) -> Result<u32, StreamError>;
                    fn write(&self, template: Template) -> Result<(), StreamError>;
                    fn close(&self, options: Option<Options>) -> Result<(), StreamError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_resource_templates_list_result_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59#[method]writer.check-write")]
                        unsafe extern "C" fn export_method_writer_check_write(arg0 : *
                        mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_check_write_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59#[method]writer.write")]
                        unsafe extern "C" fn export_method_writer_write(arg0 : * mut u8,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_write_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Writer > (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59#[method]writer.close")]
                        unsafe extern "C" fn export_method_writer_close(arg0 : * mut u8,
                        arg1 : i32, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 :
                        i32, arg6 : * mut u8, arg7 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_writer_close_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7) } } #[unsafe (export_name =
                        "wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59#write")]
                        unsafe extern "C" fn export_write(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize, arg6 : i32, arg7 : i32, arg8 : * mut
                        u8, arg9 : usize, arg10 : i32, arg11 : * mut u8, arg12 : usize,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_write_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5,
                        arg6, arg7, arg8, arg9, arg10, arg11, arg12) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59#open")]
                        unsafe extern "C" fn export_open(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32,) ->
                        * mut u8 { unsafe { $($path_to_types)*:: _export_open_cabi::<$ty
                        > (arg0, arg1, arg2, arg3) } } const _ : () = { #[doc(hidden)]
                        #[unsafe (export_name =
                        "wasmcp:mcp/resource-templates-list-result@0.3.0-alpha.59#[dtor]writer")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Writer::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Writer > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_resource_templates_list_result_0_3_0_alpha_59_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_resources_writer_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::mcp::resources_list_result::__export_wasmcp_mcp_resources_list_result_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::wasmcp::mcp::resources_list_result); $($path_to_types_root)*::
        exports::wasmcp::mcp::resources_read_result::__export_wasmcp_mcp_resources_read_result_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::wasmcp::mcp::resources_read_result); $($path_to_types_root)*::
        exports::wasmcp::mcp::resource_templates_list_result::__export_wasmcp_mcp_resource_templates_list_result_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::wasmcp::mcp::resource_templates_list_result);
    };
}
#[doc(inline)]
pub(crate) use __export_resources_writer_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:mcp@0.3.0-alpha.59:resources-writer:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4290] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xbb\x20\x01A\x02\x01\
A\x18\x01B\x04\x04\0\x05error\x03\x01\x01h\0\x01@\x01\x04self\x01\0s\x04\0\x1d[m\
ethod]error.to-debug-string\x01\x02\x03\0\x13wasi:io/error@0.2.3\x05\0\x01B\x0a\x04\
\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[method]pollab\
le.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollable.block\x01\x03\
\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\0\x12wasi:io/\
poll@0.2.3\x05\x01\x02\x03\0\0\x05error\x02\x03\0\x01\x08pollable\x01B(\x02\x03\x02\
\x01\x02\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\x02\x01\
i\x01\x01q\x02\x15last-operation-failed\x01\x04\0\x06closed\0\0\x04\0\x0cstream-\
error\x03\0\x05\x04\0\x0cinput-stream\x03\x01\x04\0\x0doutput-stream\x03\x01\x01\
h\x07\x01p}\x01j\x01\x0a\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0b\x04\0\x19[me\
thod]input-stream.read\x01\x0c\x04\0\"[method]input-stream.blocking-read\x01\x0c\
\x01j\x01w\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0d\x04\0\x19[method]input-str\
eam.skip\x01\x0e\x04\0\"[method]input-stream.blocking-skip\x01\x0e\x01i\x03\x01@\
\x01\x04self\x09\0\x0f\x04\0\x1e[method]input-stream.subscribe\x01\x10\x01h\x08\x01\
@\x01\x04self\x11\0\x0d\x04\0![method]output-stream.check-write\x01\x12\x01j\0\x01\
\x06\x01@\x02\x04self\x11\x08contents\x0a\0\x13\x04\0\x1b[method]output-stream.w\
rite\x01\x14\x04\0.[method]output-stream.blocking-write-and-flush\x01\x14\x01@\x01\
\x04self\x11\0\x13\x04\0\x1b[method]output-stream.flush\x01\x15\x04\0$[method]ou\
tput-stream.blocking-flush\x01\x15\x01@\x01\x04self\x11\0\x0f\x04\0\x1f[method]o\
utput-stream.subscribe\x01\x16\x01@\x02\x04self\x11\x03lenw\0\x13\x04\0\"[method\
]output-stream.write-zeroes\x01\x17\x04\05[method]output-stream.blocking-write-z\
eroes-and-flush\x01\x17\x01@\x03\x04self\x11\x03src\x09\x03lenw\0\x0d\x04\0\x1c[\
method]output-stream.splice\x01\x18\x04\0%[method]output-stream.blocking-splice\x01\
\x18\x03\0\x15wasi:io/streams@0.2.3\x05\x04\x01B\x15\x01o\x02ss\x01p\0\x01k\x01\x04\
\0\x04meta\x03\0\x02\x01s\x04\0\x06cursor\x03\0\x04\x01s\x04\0\x04json\x03\0\x06\
\x01s\x04\0\x03uri\x03\0\x08\x01n\x04\x0belicitation\x05roots\x08sampling\x0cexp\
erimental\x04\0\x13client-capabilities\x03\0\x0a\x01n\x05\x0bcompletions\x07prom\
pts\x09resources\x05tools\x0cexperimental\x04\0\x13server-capabilities\x03\0\x0c\
\x01m\x03\x09v20250618\x09v20250326\x09v20241105\x04\0\x10protocol-version\x03\0\
\x0e\x01ks\x01r\x03\x04names\x05title\x10\x07versions\x04\0\x0eimplementation\x03\
\0\x11\x01q\x02\x06number\x01x\0\x06string\x01s\0\x04\0\x02id\x03\0\x13\x03\0\x1f\
wasmcp:mcp/types@0.3.0-alpha.59\x05\x05\x02\x03\0\x03\x04meta\x01B'\x02\x03\x02\x01\
\x06\x04\0\x04meta\x03\0\0\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\x02\
\x01p\x03\x01k\x04\x01ks\x01r\x03\x08audience\x05\x0dlast-modified\x06\x08priori\
tyu\x04\0\x0bannotations\x03\0\x07\x01k\x08\x01r\x02\x0bannotations\x09\x04meta\x01\
\x04\0\x0fcontent-options\x03\0\x0a\x01k\x0b\x01r\x02\x04texts\x07options\x0c\x04\
\0\x0ctext-content\x03\0\x0d\x01p}\x01r\x03\x04data\x0f\x09mime-types\x07options\
\x0c\x04\0\x0dimage-content\x03\0\x10\x01r\x03\x04data\x0f\x09mime-types\x07opti\
ons\x0c\x04\0\x0daudio-content\x03\0\x12\x01kw\x01r\x06\x05title\x06\x0bdescript\
ion\x06\x04size\x14\x09mime-type\x06\x0bannotations\x09\x04meta\x01\x04\0\x1dres\
ource-link-content-options\x03\0\x15\x01k\x16\x01r\x03\x03uris\x04names\x07optio\
ns\x17\x04\0\x15resource-link-content\x03\0\x18\x01r\x02\x09mime-type\x06\x04met\
a\x01\x04\0\x19embedded-resource-options\x03\0\x1a\x01k\x1b\x01r\x03\x03uris\x04\
texts\x07options\x1c\x04\0\x16text-resource-contents\x03\0\x1d\x01r\x03\x03uris\x04\
blob\x0f\x07options\x1c\x04\0\x16blob-resource-contents\x03\0\x1f\x01q\x02\x04te\
xt\x01\x1e\0\x04blob\x01\x20\0\x04\0\x11embedded-resource\x03\0!\x01r\x02\x08res\
ource\"\x07options\x0c\x04\0\x19embedded-resource-content\x03\0#\x01q\x05\x04tex\
t\x01\x0e\0\x05image\x01\x11\0\x05audio\x01\x13\0\x0dresource-link\x01\x19\0\x11\
embedded-resource\x01$\0\x04\0\x0dcontent-block\x03\0%\x03\0!wasmcp:mcp/content@\
0.3.0-alpha.59\x05\x07\x02\x03\0\x02\x0doutput-stream\x02\x03\0\x02\x0cstream-er\
ror\x02\x03\0\x03\x02id\x02\x03\0\x03\x06cursor\x02\x03\0\x04\x0bannotations\x01\
B*\x02\x03\x02\x01\x08\x04\0\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0c\
stream-error\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x02id\x03\0\x04\x02\x03\x02\x01\
\x0b\x04\0\x06cursor\x03\0\x06\x02\x03\x02\x01\x06\x04\0\x04meta\x03\0\x08\x02\x03\
\x02\x01\x0c\x04\0\x0bannotations\x03\0\x0a\x01kw\x01ks\x01k\x0b\x01r\x06\x04siz\
e\x0c\x05title\x0d\x0bdescription\x0d\x09mime-type\x0d\x0bannotations\x0e\x04met\
a\x09\x04\0\x10resource-options\x03\0\x0f\x01k\x10\x01r\x03\x03uris\x04names\x07\
options\x11\x04\0\x08resource\x03\0\x12\x01k\x07\x01r\x02\x04meta\x09\x0bnext-cu\
rsor\x14\x04\0\x07options\x03\0\x15\x04\0\x06writer\x03\x01\x01h\x17\x01j\x01y\x01\
\x03\x01@\x01\x04self\x18\0\x19\x04\0\x1a[method]writer.check-write\x01\x1a\x01j\
\0\x01\x03\x01@\x02\x04self\x18\x08resource\x13\0\x1b\x04\0\x14[method]writer.wr\
ite\x01\x1c\x01k\x16\x01@\x02\x04self\x18\x07options\x1d\0\x1b\x04\0\x14[method]\
writer.close\x01\x1e\x01i\x01\x01p\x13\x01@\x04\x02id\x05\x06output\x1f\x09resou\
rces\x20\x07options\x1d\0\x1b\x04\0\x05write\x01!\x01i\x17\x01j\x01\"\x01\x03\x01\
@\x03\x02id\x05\x06output\x1f\x07initial\x13\0#\x04\0\x04open\x01$\x04\0/wasmcp:\
mcp/resources-list-result@0.3.0-alpha.59\x05\x0d\x01B#\x02\x03\x02\x01\x08\x04\0\
\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0cstream-error\x03\0\x02\x02\
\x03\x02\x01\x0a\x04\0\x02id\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x04meta\x03\0\x06\
\x01ks\x01r\x02\x09mime-type\x08\x04meta\x07\x04\0\x10contents-options\x03\0\x09\
\x01p}\x01k\x0a\x01r\x03\x03uris\x04data\x0b\x07options\x0c\x04\0\x08contents\x03\
\0\x0d\x01r\x01\x04meta\x07\x04\0\x07options\x03\0\x0f\x04\0\x06writer\x03\x01\x01\
h\x11\x01j\x01w\x01\x03\x01@\x01\x04self\x12\0\x13\x04\0\x1a[method]writer.check\
-write\x01\x14\x01j\0\x01\x03\x01@\x02\x04self\x12\x08contents\x0b\0\x15\x04\0\x14\
[method]writer.write\x01\x16\x01k\x10\x01@\x02\x04self\x12\x07options\x17\0\x15\x04\
\0\x14[method]writer.close\x01\x18\x01i\x01\x01@\x04\x02id\x05\x06output\x19\x08\
contents\x0e\x07options\x17\0\x15\x04\0\x05write\x01\x1a\x01i\x11\x01j\x01\x1b\x01\
\x03\x01@\x03\x02id\x05\x06output\x19\x07initial\x0e\0\x1c\x04\0\x04open\x01\x1d\
\x04\0/wasmcp:mcp/resources-read-result@0.3.0-alpha.59\x05\x0e\x01B)\x02\x03\x02\
\x01\x08\x04\0\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0cstream-erro\
r\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x02id\x03\0\x04\x02\x03\x02\x01\x0b\x04\0\x06\
cursor\x03\0\x06\x02\x03\x02\x01\x06\x04\0\x04meta\x03\0\x08\x02\x03\x02\x01\x0c\
\x04\0\x0bannotations\x03\0\x0a\x01ks\x01k\x0b\x01r\x05\x0bdescription\x0c\x05ti\
tle\x0c\x09mime-type\x0c\x0bannotations\x0d\x04meta\x09\x04\0\x10template-option\
s\x03\0\x0e\x01k\x0f\x01r\x03\x0curi-templates\x04names\x07options\x10\x04\0\x08\
template\x03\0\x11\x01k\x07\x01r\x02\x04meta\x09\x0bnext-cursor\x13\x04\0\x07opt\
ions\x03\0\x14\x04\0\x06writer\x03\x01\x01h\x16\x01j\x01y\x01\x03\x01@\x01\x04se\
lf\x17\0\x18\x04\0\x1a[method]writer.check-write\x01\x19\x01j\0\x01\x03\x01@\x02\
\x04self\x17\x08template\x12\0\x1a\x04\0\x14[method]writer.write\x01\x1b\x01k\x15\
\x01@\x02\x04self\x17\x07options\x1c\0\x1a\x04\0\x14[method]writer.close\x01\x1d\
\x01i\x01\x01p\x12\x01@\x04\x02id\x05\x06output\x1e\x09templates\x1f\x07options\x1c\
\0\x1a\x04\0\x05write\x01\x20\x01i\x16\x01j\x01!\x01\x03\x01@\x02\x02id\x05\x06o\
utput\x1e\0\"\x04\0\x04open\x01#\x04\08wasmcp:mcp/resource-templates-list-result\
@0.3.0-alpha.59\x05\x0f\x04\0*wasmcp:mcp/resources-writer@0.3.0-alpha.59\x04\0\x0b\
\x16\x01\0\x10resources-writer\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
