// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod io {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod error {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Error {
                handle: _rt::Resource<Error>,
            }
            impl Error {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Error {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]error"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Error {
                #[allow(unused_unsafe, clippy::all)]
                pub fn to_debug_string(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/error@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]error.to-debug-string"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod streams {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::wasi::io::error::Error;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub enum StreamError {
                LastOperationFailed(Error),
                Closed,
            }
            impl ::core::fmt::Debug for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StreamError::LastOperationFailed(e) => {
                            f.debug_tuple("StreamError::LastOperationFailed")
                                .field(e)
                                .finish()
                        }
                        StreamError::Closed => {
                            f.debug_tuple("StreamError::Closed").finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for StreamError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for StreamError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InputStream {
                handle: _rt::Resource<InputStream>,
            }
            impl InputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]input-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct OutputStream {
                handle: _rt::Resource<OutputStream>,
            }
            impl OutputStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for OutputStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]output-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(&self, len: u64) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_read(
                    &self,
                    len: u64,
                ) -> Result<_rt::Vec<u8>, StreamError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-read"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result9 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l6 {
                                        0 => {
                                            let e8 = {
                                                let l7 = *ptr0
                                                    .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l7 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e8)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_skip(&self, len: u64) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.blocking-skip"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl InputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]input-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn check_write(&self) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.check-write"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write(&self, contents: &[u8]) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_and_flush(
                    &self,
                    contents: &[u8],
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = contents;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-and-flush"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr1.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_flush(&self) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-flush"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn write_zeroes(&self, len: u64) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.write-zeroes"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_write_zeroes_and_flush(
                    &self,
                    len: u64,
                ) -> Result<(), StreamError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
                            fn wit_import1(_: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i64(&len), ptr0)
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => {
                                            let e5 = {
                                                let l4 = *ptr0.add(8).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l4 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e5)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl OutputStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_splice(
                    &self,
                    src: &InputStream,
                    len: u64,
                ) -> Result<u64, StreamError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/streams@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]output-stream.blocking-splice"]
                            fn wit_import1(_: i32, _: i32, _: i64, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                (src).handle() as i32,
                                _rt::as_i64(&len),
                                ptr0,
                            )
                        };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result7 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr0.add(8).cast::<i64>();
                                    l3 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v6 = match l4 {
                                        0 => {
                                            let e6 = {
                                                let l5 = *ptr0.add(12).cast::<i32>();
                                                unsafe {
                                                    super::super::super::wasi::io::error::Error::from_handle(
                                                        l5 as u32,
                                                    )
                                                }
                                            };
                                            StreamError::LastOperationFailed(e6)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            StreamError::Closed
                                        }
                                    };
                                    v6
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasmcp {
    pub mod mcp {
        /// Core MCP data types and aliases
        ///
        /// <https://modelcontextprotocol.io/specification/2025-06-18/schema>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Optional metadata for vendor-specific extensions.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
            pub type Meta = Option<_rt::Vec<(_rt::String, _rt::String)>>;
            /// Opaque pagination token.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#cursor>
            pub type Cursor = _rt::String;
            /// JSON-encoded data as a string.
            pub type Json = _rt::String;
            /// Uniform Resource Identifier.
            pub type Uri = _rt::String;
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Client capabilities (extensible)."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#clientcapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ClientCapabilities : u8 { const ELICITATION = 1 << 0; const ROOTS
                = 1 << 1; const SAMPLING = 1 << 2; const EXPERIMENTAL = 1 << 3; }
            }
            wit_bindgen_rt::bitflags::bitflags! {
                #[doc = " Capabilities that a server supports."] #[doc =
                " <https://modelcontextprotocol.io/specification/2025-06-18/schema#servercapabilities>"]
                #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub
                struct ServerCapabilities : u8 { #[doc = " Argument autocompletion"]
                const COMPLETIONS = 1 << 0; #[doc = " Prompts"] const PROMPTS = 1 << 1;
                #[doc = " Resources"] const RESOURCES = 1 << 2; #[doc = " Tools"] const
                TOOLS = 1 << 3; #[doc = " Experimental features"] const EXPERIMENTAL = 1
                << 4; }
            }
            /// MCP protocol versions.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ProtocolVersion {
                /// Version 2025-06-18
                V20250618,
                /// Version 2025-03-26
                V20250326,
                /// Version 2024-11-05
                V20241105,
            }
            impl ::core::fmt::Debug for ProtocolVersion {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProtocolVersion::V20250618 => {
                            f.debug_tuple("ProtocolVersion::V20250618").finish()
                        }
                        ProtocolVersion::V20250326 => {
                            f.debug_tuple("ProtocolVersion::V20250326").finish()
                        }
                        ProtocolVersion::V20241105 => {
                            f.debug_tuple("ProtocolVersion::V20241105").finish()
                        }
                    }
                }
            }
            impl ProtocolVersion {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ProtocolVersion {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ProtocolVersion::V20250618,
                        1 => ProtocolVersion::V20250326,
                        2 => ProtocolVersion::V20241105,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// MCP implementation metadata.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#implementation>
            #[derive(Clone)]
            pub struct Implementation {
                pub name: _rt::String,
                pub title: Option<_rt::String>,
                pub version: _rt::String,
            }
            impl ::core::fmt::Debug for Implementation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Implementation")
                        .field("name", &self.name)
                        .field("title", &self.title)
                        .field("version", &self.version)
                        .finish()
                }
            }
            /// JSON-RPC request ID (string or number).
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#requestid>
            #[derive(Clone)]
            pub enum Id {
                Number(i64),
                String(_rt::String),
            }
            impl ::core::fmt::Debug for Id {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Id::Number(e) => f.debug_tuple("Id::Number").field(e).finish(),
                        Id::String(e) => f.debug_tuple("Id::String").field(e).finish(),
                    }
                }
            }
        }
        /// Content types and structures for MCP messages.
        ///
        /// This interface defines the content blocks that can be included in MCP messages,
        /// mapping directly to the ContentBlock type union in the MCP specification.
        ///
        /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod content {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Meta = super::super::super::wasmcp::mcp::types::Meta;
            /// Role in a conversation.
            ///
            /// Maps to the Role type in the MCP spec:
            /// "The sender or recipient of messages and data in a conversation."
            /// Valid values: "user" | "assistant"
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#role>
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Role {
                User,
                Assistant,
            }
            impl ::core::fmt::Debug for Role {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Role::User => f.debug_tuple("Role::User").finish(),
                        Role::Assistant => f.debug_tuple("Role::Assistant").finish(),
                    }
                }
            }
            impl Role {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Role {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Role::User,
                        1 => Role::Assistant,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Optional annotations for the client.
            ///
            /// The client can use annotations to inform how objects are used or displayed.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#annotations>
            #[derive(Clone)]
            pub struct Annotations {
                /// Describes who the intended customer of this object or data is.
                ///
                /// It can include multiple entries to indicate content useful for multiple audiences (e.g., [“user”, “assistant”]).
                pub audience: Option<_rt::Vec<Role>>,
                /// The moment the resource was last modified, as an ISO 8601 formatted string.
                ///
                /// Should be an ISO 8601 formatted string (e.g., “2025-01-12T15:00:58Z”).
                ///
                /// Examples: last activity timestamp in an open file, timestamp when the resource was attached, etc.
                pub last_modified: Option<_rt::String>,
                /// Describes how important this data is for operating the server.
                ///
                /// A value of 1 means “most important,” and indicates that the data is effectively required, while 0 means “least important,” and indicates that the data is entirely optional.
                pub priority: f64,
            }
            impl ::core::fmt::Debug for Annotations {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Annotations")
                        .field("audience", &self.audience)
                        .field("last-modified", &self.last_modified)
                        .field("priority", &self.priority)
                        .finish()
                }
            }
            /// Options for content blocks.
            #[derive(Clone)]
            pub struct ContentOptions {
                /// Optional annotations for the client.
                pub annotations: Option<Annotations>,
                /// Optional metadata.
                ///
                /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for ContentOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ContentOptions")
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Text provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#textcontent>
            #[derive(Clone)]
            pub struct TextContent {
                /// The text content of the message.
                pub text: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("text", &self.text)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// An image provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#imagecontent>
            #[derive(Clone)]
            pub struct ImageContent {
                /// The base64-encoded image data.
                pub data: _rt::Vec<u8>,
                /// The MIME type of the image. Different providers may support different image types.
                pub mime_type: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Audio provided to or from an LLM.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#audiocontent>
            #[derive(Clone)]
            pub struct AudioContent {
                /// The base64-encoded audio data.
                pub data: _rt::Vec<u8>,
                /// The MIME type of the audio. Different providers may support different audio types.
                pub mime_type: _rt::String,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Options for resource link content.
            #[derive(Clone)]
            pub struct ResourceLinkContentOptions {
                pub title: Option<_rt::String>,
                pub description: Option<_rt::String>,
                pub size: Option<u64>,
                pub mime_type: Option<_rt::String>,
                /// Optional annotations for the client.
                pub annotations: Option<Annotations>,
                /// Optional metadata.
                ///
                /// See: <https://modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for ResourceLinkContentOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLinkContentOptions")
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("size", &self.size)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// A resource that the server is capable of reading, included in a prompt or tool call result.
            ///
            /// Note: resource links returned by tools are not guaranteed to appear in the results of resources/list requests.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#resourcelink>
            #[derive(Clone)]
            pub struct ResourceLinkContent {
                /// The URI of this resource.
                pub uri: _rt::String,
                /// Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn’t present).
                pub name: _rt::String,
                pub options: Option<ResourceLinkContentOptions>,
            }
            impl ::core::fmt::Debug for ResourceLinkContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceLinkContent")
                        .field("uri", &self.uri)
                        .field("name", &self.name)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Options for embedded resources.
            #[derive(Clone)]
            pub struct EmbeddedResourceOptions {
                pub mime_type: Option<_rt::String>,
                pub meta: Meta,
            }
            impl ::core::fmt::Debug for EmbeddedResourceOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResourceOptions")
                        .field("mime-type", &self.mime_type)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            /// Text resource contents.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#textresourcecontents>
            #[derive(Clone)]
            pub struct TextResourceContents {
                pub uri: _rt::String,
                pub text: _rt::String,
                pub options: Option<EmbeddedResourceOptions>,
            }
            impl ::core::fmt::Debug for TextResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextResourceContents")
                        .field("uri", &self.uri)
                        .field("text", &self.text)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Binary resource contents.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#blobresourcecontents>
            #[derive(Clone)]
            pub struct BlobResourceContents {
                pub uri: _rt::String,
                pub blob: _rt::Vec<u8>,
                pub options: Option<EmbeddedResourceOptions>,
            }
            impl ::core::fmt::Debug for BlobResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BlobResourceContents")
                        .field("uri", &self.uri)
                        .field("blob", &self.blob)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Embedded resource data.
            #[derive(Clone)]
            pub enum EmbeddedResource {
                Text(TextResourceContents),
                Blob(BlobResourceContents),
            }
            impl ::core::fmt::Debug for EmbeddedResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        EmbeddedResource::Text(e) => {
                            f.debug_tuple("EmbeddedResource::Text").field(e).finish()
                        }
                        EmbeddedResource::Blob(e) => {
                            f.debug_tuple("EmbeddedResource::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Embedded resource with content options.
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#embeddedresource>
            #[derive(Clone)]
            pub struct EmbeddedResourceContent {
                pub resource: EmbeddedResource,
                pub options: Option<ContentOptions>,
            }
            impl ::core::fmt::Debug for EmbeddedResourceContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EmbeddedResourceContent")
                        .field("resource", &self.resource)
                        .field("options", &self.options)
                        .finish()
                }
            }
            /// Content blocks that can be included in messages.
            ///
            /// See: <https://modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
            #[derive(Clone)]
            pub enum ContentBlock {
                Text(TextContent),
                Image(ImageContent),
                Audio(AudioContent),
                ResourceLink(ResourceLinkContent),
                EmbeddedResource(EmbeddedResourceContent),
            }
            impl ::core::fmt::Debug for ContentBlock {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentBlock::Text(e) => {
                            f.debug_tuple("ContentBlock::Text").field(e).finish()
                        }
                        ContentBlock::Image(e) => {
                            f.debug_tuple("ContentBlock::Image").field(e).finish()
                        }
                        ContentBlock::Audio(e) => {
                            f.debug_tuple("ContentBlock::Audio").field(e).finish()
                        }
                        ContentBlock::ResourceLink(e) => {
                            f.debug_tuple("ContentBlock::ResourceLink").field(e).finish()
                        }
                        ContentBlock::EmbeddedResource(e) => {
                            f.debug_tuple("ContentBlock::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasmcp {
        pub mod mcp {
            /// Writes tools/list results to an output stream.
            ///
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-list>
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod tools_list_result {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type StreamError = super::super::super::super::wasi::io::streams::StreamError;
                pub type Id = super::super::super::super::wasmcp::mcp::types::Id;
                pub type Cursor = super::super::super::super::wasmcp::mcp::types::Cursor;
                pub type Meta = super::super::super::super::wasmcp::mcp::types::Meta;
                pub type Json = super::super::super::super::wasmcp::mcp::types::Json;
                wit_bindgen_rt::bitflags::bitflags! {
                    #[doc = " Hints about tool behavior."] #[derive(PartialEq, Eq,
                    PartialOrd, Ord, Hash, Debug, Clone, Copy)] pub struct ToolHints : u8
                    { const DESTRUCTIVE = 1 << 0; const IDEMPOTENT = 1 << 1; const
                    OPEN_WORLD = 1 << 2; const READ_ONLY = 1 << 3; }
                }
                /// Annotations for tool capabilities.
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations>
                #[derive(Clone)]
                pub struct ToolAnnotations {
                    pub hints: ToolHints,
                    pub title: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for ToolAnnotations {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ToolAnnotations")
                            .field("hints", &self.hints)
                            .field("title", &self.title)
                            .finish()
                    }
                }
                /// Optional properties for tool definitions.
                #[derive(Clone)]
                pub struct ToolOptions {
                    pub meta: Meta,
                    pub annotations: Option<ToolAnnotations>,
                    pub description: Option<_rt::String>,
                    pub output_schema: Option<Json>,
                    pub title: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for ToolOptions {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ToolOptions")
                            .field("meta", &self.meta)
                            .field("annotations", &self.annotations)
                            .field("description", &self.description)
                            .field("output-schema", &self.output_schema)
                            .field("title", &self.title)
                            .finish()
                    }
                }
                /// Tool definition.
                /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tool>
                #[derive(Clone)]
                pub struct Tool {
                    pub name: _rt::String,
                    pub input_schema: _rt::String,
                    pub options: Option<ToolOptions>,
                }
                impl ::core::fmt::Debug for Tool {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Tool")
                            .field("name", &self.name)
                            .field("input-schema", &self.input_schema)
                            .field("options", &self.options)
                            .finish()
                    }
                }
                /// Options for list-tools results.
                #[derive(Clone)]
                pub struct Options {
                    pub meta: Meta,
                    pub next_cursor: Option<Cursor>,
                }
                impl ::core::fmt::Debug for Options {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Options")
                            .field("meta", &self.meta)
                            .field("next-cursor", &self.next_cursor)
                            .finish()
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Writer {
                    handle: _rt::Resource<Writer>,
                }
                type _WriterRep<T> = Option<T>;
                impl Writer {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Writer`.
                    pub fn new<T: GuestWriter>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _WriterRep<T> = Some(val);
                        let ptr: *mut _WriterRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestWriter>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestWriter>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _WriterRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestWriter>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Writer`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct WriterBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Writer>,
                }
                impl<'a> WriterBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Writer {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/tools-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]writer"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_check_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::check_write(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V2;
                            match e {
                                V2::LastOperationFailed(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr1.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V2::Closed => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l2 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l5 = *arg0
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = i32::from(
                        *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let result36 = T::write(
                        unsafe { WriterBorrow::lift(l0 as u32 as usize) }.get(),
                        Tool {
                            name: _rt::string_lift(bytes3),
                            input_schema: _rt::string_lift(bytes6),
                            options: match l7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l8 = i32::from(
                                            *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l18 = i32::from(
                                            *arg0
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l24 = i32::from(
                                            *arg0
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l28 = i32::from(
                                            *arg0
                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l32 = i32::from(
                                            *arg0
                                                .add(20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        ToolOptions {
                                            meta: match l8 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l9 = *arg0
                                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l10 = *arg0
                                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base17 = l9;
                                                        let len17 = l10;
                                                        let mut result17 = _rt::Vec::with_capacity(len17);
                                                        for i in 0..len17 {
                                                            let base = base17
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e17 = {
                                                                let l11 = *base.add(0).cast::<*mut u8>();
                                                                let l12 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len13 = l12;
                                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                                    l11.cast(),
                                                                    len13,
                                                                    len13,
                                                                );
                                                                let l14 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l15 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len16 = l15;
                                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                                    l14.cast(),
                                                                    len16,
                                                                    len16,
                                                                );
                                                                (_rt::string_lift(bytes13), _rt::string_lift(bytes16))
                                                            };
                                                            result17.push(e17);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base17,
                                                            len17 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        result17
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            annotations: match l18 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l19 = i32::from(
                                                            *arg0
                                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l20 = i32::from(
                                                            *arg0
                                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        ToolAnnotations {
                                                            hints: ToolHints::empty()
                                                                | ToolHints::from_bits_retain(((l19 as u8) << 0) as _),
                                                            title: match l20 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l21 = *arg0
                                                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l22 = *arg0
                                                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len23 = l22;
                                                                        let bytes23 = _rt::Vec::from_raw_parts(
                                                                            l21.cast(),
                                                                            len23,
                                                                            len23,
                                                                        );
                                                                        _rt::string_lift(bytes23)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            description: match l24 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l25 = *arg0
                                                            .add(15 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l26 = *arg0
                                                            .add(16 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len27 = l26;
                                                        let bytes27 = _rt::Vec::from_raw_parts(
                                                            l25.cast(),
                                                            len27,
                                                            len27,
                                                        );
                                                        _rt::string_lift(bytes27)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            output_schema: match l28 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l29 = *arg0
                                                            .add(18 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l30 = *arg0
                                                            .add(19 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        _rt::string_lift(bytes31)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            title: match l32 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l33 = *arg0
                                                            .add(21 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l34 = *arg0
                                                            .add(22 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len35 = l34;
                                                        let bytes35 = _rt::Vec::from_raw_parts(
                                                            l33.cast(),
                                                            len35,
                                                            len35,
                                                        );
                                                        _rt::string_lift(bytes35)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        23 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr37 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result36 {
                        Ok(_) => {
                            *ptr37.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr37.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V38;
                            match e {
                                V38::LastOperationFailed(e) => {
                                    *ptr37.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr37.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V38::Closed => {
                                    *ptr37.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr37
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_close_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result8 = T::close(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    meta: match arg2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base6 = arg3;
                                                let len6 = arg4;
                                                let mut result6 = _rt::Vec::with_capacity(len6);
                                                for i in 0..len6 {
                                                    let base = base6
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e6 = {
                                                        let l0 = *base.add(0).cast::<*mut u8>();
                                                        let l1 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len2 = l1;
                                                        let bytes2 = _rt::Vec::from_raw_parts(
                                                            l0.cast(),
                                                            len2,
                                                            len2,
                                                        );
                                                        let l3 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l4 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len5 = l4;
                                                        let bytes5 = _rt::Vec::from_raw_parts(
                                                            l3.cast(),
                                                            len5,
                                                            len5,
                                                        );
                                                        (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                                                    };
                                                    result6.push(e6);
                                                }
                                                _rt::cabi_dealloc(
                                                    base6,
                                                    len6 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result6
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    next_cursor: match arg5 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let len7 = arg7;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    arg6.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr9 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result8 {
                        Ok(_) => {
                            *ptr9.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr9.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V10;
                            match e {
                                V10::LastOperationFailed(e) => {
                                    *ptr9.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr9.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V10::Closed => {
                                    *ptr9.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr9
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: i32,
                    arg11: *mut u8,
                    arg12: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let base37 = arg4;
                    let len37 = arg5;
                    let mut result37 = _rt::Vec::with_capacity(len37);
                    for i in 0..len37 {
                        let base = base37
                            .add(i * (22 * ::core::mem::size_of::<*const u8>()));
                        let e37 = {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len4 = l3;
                            let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                            let l5 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            Tool {
                                name: _rt::string_lift(bytes4),
                                input_schema: _rt::string_lift(bytes7),
                                options: match l8 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l9 = i32::from(
                                                *base
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l19 = i32::from(
                                                *base
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l25 = i32::from(
                                                *base
                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l29 = i32::from(
                                                *base
                                                    .add(16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l33 = i32::from(
                                                *base
                                                    .add(19 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            ToolOptions {
                                                meta: match l9 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l10 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l11 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base18 = l10;
                                                            let len18 = l11;
                                                            let mut result18 = _rt::Vec::with_capacity(len18);
                                                            for i in 0..len18 {
                                                                let base = base18
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e18 = {
                                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                                    let l13 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len14 = l13;
                                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                                        l12.cast(),
                                                                        len14,
                                                                        len14,
                                                                    );
                                                                    let l15 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l16 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len17 = l16;
                                                                    let bytes17 = _rt::Vec::from_raw_parts(
                                                                        l15.cast(),
                                                                        len17,
                                                                        len17,
                                                                    );
                                                                    (_rt::string_lift(bytes14), _rt::string_lift(bytes17))
                                                                };
                                                                result18.push(e18);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base18,
                                                                len18 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result18
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                annotations: match l19 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l20 = i32::from(
                                                                *base
                                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l21 = i32::from(
                                                                *base
                                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            ToolAnnotations {
                                                                hints: ToolHints::empty()
                                                                    | ToolHints::from_bits_retain(((l20 as u8) << 0) as _),
                                                                title: match l21 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l22 = *base
                                                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l23 = *base
                                                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len24 = l23;
                                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                                l22.cast(),
                                                                                len24,
                                                                                len24,
                                                                            );
                                                                            _rt::string_lift(bytes24)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                description: match l25 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l26 = *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                output_schema: match l29 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l30 = *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l31 = *base
                                                                .add(18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len32 = l31;
                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                l30.cast(),
                                                                len32,
                                                                len32,
                                                            );
                                                            _rt::string_lift(bytes32)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                title: match l33 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l34 = *base
                                                                .add(20 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l35 = *base
                                                                .add(21 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len36 = l35;
                                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                                l34.cast(),
                                                                len36,
                                                                len36,
                                                            );
                                                            _rt::string_lift(bytes36)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result37.push(e37);
                    }
                    _rt::cabi_dealloc(
                        base37,
                        len37 * (22 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result46 = T::write(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        result37,
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    meta: match arg7 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base44 = arg8;
                                                let len44 = arg9;
                                                let mut result44 = _rt::Vec::with_capacity(len44);
                                                for i in 0..len44 {
                                                    let base = base44
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e44 = {
                                                        let l38 = *base.add(0).cast::<*mut u8>();
                                                        let l39 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len40 = l39;
                                                        let bytes40 = _rt::Vec::from_raw_parts(
                                                            l38.cast(),
                                                            len40,
                                                            len40,
                                                        );
                                                        let l41 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l42 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len43 = l42;
                                                        let bytes43 = _rt::Vec::from_raw_parts(
                                                            l41.cast(),
                                                            len43,
                                                            len43,
                                                        );
                                                        (_rt::string_lift(bytes40), _rt::string_lift(bytes43))
                                                    };
                                                    result44.push(e44);
                                                }
                                                _rt::cabi_dealloc(
                                                    base44,
                                                    len44 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result44
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    next_cursor: match arg10 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let len45 = arg12;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    arg11.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr47 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result46 {
                        Ok(_) => {
                            *ptr47.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr47.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V48;
                            match e {
                                V48::LastOperationFailed(e) => {
                                    *ptr47.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr47.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V48::Closed => {
                                    *ptr47.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr47
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_open_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let base37 = arg4;
                    let len37 = arg5;
                    let mut result37 = _rt::Vec::with_capacity(len37);
                    for i in 0..len37 {
                        let base = base37
                            .add(i * (22 * ::core::mem::size_of::<*const u8>()));
                        let e37 = {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len4 = l3;
                            let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                            let l5 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            Tool {
                                name: _rt::string_lift(bytes4),
                                input_schema: _rt::string_lift(bytes7),
                                options: match l8 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l9 = i32::from(
                                                *base
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l19 = i32::from(
                                                *base
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l25 = i32::from(
                                                *base
                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l29 = i32::from(
                                                *base
                                                    .add(16 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l33 = i32::from(
                                                *base
                                                    .add(19 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            ToolOptions {
                                                meta: match l9 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l10 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l11 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base18 = l10;
                                                            let len18 = l11;
                                                            let mut result18 = _rt::Vec::with_capacity(len18);
                                                            for i in 0..len18 {
                                                                let base = base18
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e18 = {
                                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                                    let l13 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len14 = l13;
                                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                                        l12.cast(),
                                                                        len14,
                                                                        len14,
                                                                    );
                                                                    let l15 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l16 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len17 = l16;
                                                                    let bytes17 = _rt::Vec::from_raw_parts(
                                                                        l15.cast(),
                                                                        len17,
                                                                        len17,
                                                                    );
                                                                    (_rt::string_lift(bytes14), _rt::string_lift(bytes17))
                                                                };
                                                                result18.push(e18);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base18,
                                                                len18 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result18
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                annotations: match l19 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l20 = i32::from(
                                                                *base
                                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l21 = i32::from(
                                                                *base
                                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            ToolAnnotations {
                                                                hints: ToolHints::empty()
                                                                    | ToolHints::from_bits_retain(((l20 as u8) << 0) as _),
                                                                title: match l21 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l22 = *base
                                                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l23 = *base
                                                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len24 = l23;
                                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                                l22.cast(),
                                                                                len24,
                                                                                len24,
                                                                            );
                                                                            _rt::string_lift(bytes24)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                description: match l25 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l26 = *base
                                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                output_schema: match l29 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l30 = *base
                                                                .add(17 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l31 = *base
                                                                .add(18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len32 = l31;
                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                l30.cast(),
                                                                len32,
                                                                len32,
                                                            );
                                                            _rt::string_lift(bytes32)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                title: match l33 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l34 = *base
                                                                .add(20 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l35 = *base
                                                                .add(21 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len36 = l35;
                                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                                l34.cast(),
                                                                len36,
                                                                len36,
                                                            );
                                                            _rt::string_lift(bytes36)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result37.push(e37);
                    }
                    _rt::cabi_dealloc(
                        base37,
                        len37 * (22 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result38 = T::open(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        result37,
                    );
                    let ptr39 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result38 {
                        Ok(e) => {
                            *ptr39.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr39.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr39.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V40;
                            match e {
                                V40::LastOperationFailed(e) => {
                                    *ptr39.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr39.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V40::Closed => {
                                    *ptr39.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr39
                }
                pub trait Guest {
                    type Writer: GuestWriter;
                    fn write(
                        id: Id,
                        output: OutputStream,
                        tools: _rt::Vec<Tool>,
                        options: Option<Options>,
                    ) -> Result<(), StreamError>;
                    fn open(
                        id: Id,
                        output: OutputStream,
                        initial: _rt::Vec<Tool>,
                    ) -> Result<Writer, StreamError>;
                }
                pub trait GuestWriter: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/tools-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]writer"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/tools-list-result@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]writer"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn check_write(&self) -> Result<u32, StreamError>;
                    fn write(&self, tool: Tool) -> Result<(), StreamError>;
                    fn close(&self, options: Option<Options>) -> Result<(), StreamError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_tools_list_result_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/tools-list-result@0.3.0-alpha.59#[method]writer.check-write")]
                        unsafe extern "C" fn export_method_writer_check_write(arg0 : *
                        mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_check_write_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/tools-list-result@0.3.0-alpha.59#[method]writer.write")]
                        unsafe extern "C" fn export_method_writer_write(arg0 : * mut u8,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_write_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Writer > (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/tools-list-result@0.3.0-alpha.59#[method]writer.close")]
                        unsafe extern "C" fn export_method_writer_close(arg0 : * mut u8,
                        arg1 : i32, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 :
                        i32, arg6 : * mut u8, arg7 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_writer_close_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7) } } #[unsafe (export_name =
                        "wasmcp:mcp/tools-list-result@0.3.0-alpha.59#write")] unsafe
                        extern "C" fn export_write(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize, arg6 : i32, arg7 : i32, arg8 : * mut
                        u8, arg9 : usize, arg10 : i32, arg11 : * mut u8, arg12 : usize,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_write_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5,
                        arg6, arg7, arg8, arg9, arg10, arg11, arg12) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/tools-list-result@0.3.0-alpha.59#open")] unsafe
                        extern "C" fn export_open(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_open_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4, arg5) } } const _ : () = { #[doc(hidden)] #[unsafe
                        (export_name =
                        "wasmcp:mcp/tools-list-result@0.3.0-alpha.59#[dtor]writer")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Writer::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Writer > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_tools_list_result_0_3_0_alpha_59_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
            /// Writes tools/call content results (unstructured).
            ///
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-call>
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod tools_call_content {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type StreamError = super::super::super::super::wasi::io::streams::StreamError;
                pub type ContentBlock = super::super::super::super::wasmcp::mcp::content::ContentBlock;
                pub type Id = super::super::super::super::wasmcp::mcp::types::Id;
                pub type Meta = super::super::super::super::wasmcp::mcp::types::Meta;
                #[derive(Clone)]
                pub struct Options {
                    pub is_error: bool,
                    pub meta: Meta,
                }
                impl ::core::fmt::Debug for Options {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Options")
                            .field("is-error", &self.is_error)
                            .field("meta", &self.meta)
                            .finish()
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Writer {
                    handle: _rt::Resource<Writer>,
                }
                type _WriterRep<T> = Option<T>;
                impl Writer {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Writer`.
                    pub fn new<T: GuestWriter>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _WriterRep<T> = Some(val);
                        let ptr: *mut _WriterRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestWriter>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestWriter>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _WriterRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestWriter>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Writer`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct WriterBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Writer>,
                }
                impl<'a> WriterBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestWriter>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _WriterRep<T> {
                        Writer::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Writer {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/tools-call-content@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]writer"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_check_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::check_write(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V2;
                            match e {
                                V2::LastOperationFailed(e) => {
                                    *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                                    *ptr1.add(12).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V2::Closed => {
                                    *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_write_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::write(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V3;
                            match e {
                                V3::LastOperationFailed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr2.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V3::Closed => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_next_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = i32::from(*arg0.add(8).cast::<u8>());
                    use super::super::super::super::wasmcp::mcp::content::ContentBlock as V191;
                    let v191 = match l1 {
                        0 => {
                            let e191 = {
                                let l2 = *arg0.add(16).cast::<*mut u8>();
                                let l3 = *arg0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    l2.cast(),
                                    len4,
                                    len4,
                                );
                                let l5 = i32::from(
                                    *arg0
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::TextContent {
                                    text: _rt::string_lift(bytes4),
                                    options: match l5 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l6 = i32::from(
                                                    *arg0
                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l17 = i32::from(
                                                    *arg0
                                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l6 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l7 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l12 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l16 = *arg0
                                                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l7 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l8 = *arg0
                                                                                    .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l9 = *arg0
                                                                                    .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base11 = l8;
                                                                                let len11 = l9;
                                                                                let mut result11 = _rt::Vec::with_capacity(len11);
                                                                                for i in 0..len11 {
                                                                                    let base = base11.add(i * 1);
                                                                                    let e11 = {
                                                                                        let l10 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l10 as u8,
                                                                                        )
                                                                                    };
                                                                                    result11.push(e11);
                                                                                }
                                                                                _rt::cabi_dealloc(base11, len11 * 1, 1);
                                                                                result11
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l12 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l13 = *arg0
                                                                                    .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l14 = *arg0
                                                                                    .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len15 = l14;
                                                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                                                    l13.cast(),
                                                                                    len15,
                                                                                    len15,
                                                                                );
                                                                                _rt::string_lift(bytes15)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l16,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l17 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l18 = *arg0
                                                                    .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l19 = *arg0
                                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base26 = l18;
                                                                let len26 = l19;
                                                                let mut result26 = _rt::Vec::with_capacity(len26);
                                                                for i in 0..len26 {
                                                                    let base = base26
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e26 = {
                                                                        let l20 = *base.add(0).cast::<*mut u8>();
                                                                        let l21 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len22 = l21;
                                                                        let bytes22 = _rt::Vec::from_raw_parts(
                                                                            l20.cast(),
                                                                            len22,
                                                                            len22,
                                                                        );
                                                                        let l23 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l24 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len25 = l24;
                                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                                            l23.cast(),
                                                                            len25,
                                                                            len25,
                                                                        );
                                                                        (_rt::string_lift(bytes22), _rt::string_lift(bytes25))
                                                                    };
                                                                    result26.push(e26);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base26,
                                                                    len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result26
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V191::Text(e191)
                        }
                        1 => {
                            let e191 = {
                                let l27 = *arg0.add(16).cast::<*mut u8>();
                                let l28 = *arg0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len29 = l28;
                                let l30 = *arg0
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l31 = *arg0
                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len32 = l31;
                                let bytes32 = _rt::Vec::from_raw_parts(
                                    l30.cast(),
                                    len32,
                                    len32,
                                );
                                let l33 = i32::from(
                                    *arg0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::ImageContent {
                                    data: _rt::Vec::from_raw_parts(l27.cast(), len29, len29),
                                    mime_type: _rt::string_lift(bytes32),
                                    options: match l33 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l34 = i32::from(
                                                    *arg0
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l45 = i32::from(
                                                    *arg0
                                                        .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l34 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l35 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l40 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l44 = *arg0
                                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l35 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l36 = *arg0
                                                                                    .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l37 = *arg0
                                                                                    .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base39 = l36;
                                                                                let len39 = l37;
                                                                                let mut result39 = _rt::Vec::with_capacity(len39);
                                                                                for i in 0..len39 {
                                                                                    let base = base39.add(i * 1);
                                                                                    let e39 = {
                                                                                        let l38 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l38 as u8,
                                                                                        )
                                                                                    };
                                                                                    result39.push(e39);
                                                                                }
                                                                                _rt::cabi_dealloc(base39, len39 * 1, 1);
                                                                                result39
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l40 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l41 = *arg0
                                                                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l42 = *arg0
                                                                                    .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len43 = l42;
                                                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                                                    l41.cast(),
                                                                                    len43,
                                                                                    len43,
                                                                                );
                                                                                _rt::string_lift(bytes43)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l44,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l45 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l46 = *arg0
                                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l47 = *arg0
                                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base54 = l46;
                                                                let len54 = l47;
                                                                let mut result54 = _rt::Vec::with_capacity(len54);
                                                                for i in 0..len54 {
                                                                    let base = base54
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e54 = {
                                                                        let l48 = *base.add(0).cast::<*mut u8>();
                                                                        let l49 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len50 = l49;
                                                                        let bytes50 = _rt::Vec::from_raw_parts(
                                                                            l48.cast(),
                                                                            len50,
                                                                            len50,
                                                                        );
                                                                        let l51 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l52 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len53 = l52;
                                                                        let bytes53 = _rt::Vec::from_raw_parts(
                                                                            l51.cast(),
                                                                            len53,
                                                                            len53,
                                                                        );
                                                                        (_rt::string_lift(bytes50), _rt::string_lift(bytes53))
                                                                    };
                                                                    result54.push(e54);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base54,
                                                                    len54 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result54
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V191::Image(e191)
                        }
                        2 => {
                            let e191 = {
                                let l55 = *arg0.add(16).cast::<*mut u8>();
                                let l56 = *arg0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len57 = l56;
                                let l58 = *arg0
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l59 = *arg0
                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len60 = l59;
                                let bytes60 = _rt::Vec::from_raw_parts(
                                    l58.cast(),
                                    len60,
                                    len60,
                                );
                                let l61 = i32::from(
                                    *arg0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::AudioContent {
                                    data: _rt::Vec::from_raw_parts(l55.cast(), len57, len57),
                                    mime_type: _rt::string_lift(bytes60),
                                    options: match l61 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l62 = i32::from(
                                                    *arg0
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l73 = i32::from(
                                                    *arg0
                                                        .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l62 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l63 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l68 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l72 = *arg0
                                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l63 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l64 = *arg0
                                                                                    .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l65 = *arg0
                                                                                    .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base67 = l64;
                                                                                let len67 = l65;
                                                                                let mut result67 = _rt::Vec::with_capacity(len67);
                                                                                for i in 0..len67 {
                                                                                    let base = base67.add(i * 1);
                                                                                    let e67 = {
                                                                                        let l66 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l66 as u8,
                                                                                        )
                                                                                    };
                                                                                    result67.push(e67);
                                                                                }
                                                                                _rt::cabi_dealloc(base67, len67 * 1, 1);
                                                                                result67
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l68 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l69 = *arg0
                                                                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l70 = *arg0
                                                                                    .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len71 = l70;
                                                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                                                    l69.cast(),
                                                                                    len71,
                                                                                    len71,
                                                                                );
                                                                                _rt::string_lift(bytes71)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l72,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l73 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l74 = *arg0
                                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l75 = *arg0
                                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base82 = l74;
                                                                let len82 = l75;
                                                                let mut result82 = _rt::Vec::with_capacity(len82);
                                                                for i in 0..len82 {
                                                                    let base = base82
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e82 = {
                                                                        let l76 = *base.add(0).cast::<*mut u8>();
                                                                        let l77 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len78 = l77;
                                                                        let bytes78 = _rt::Vec::from_raw_parts(
                                                                            l76.cast(),
                                                                            len78,
                                                                            len78,
                                                                        );
                                                                        let l79 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l80 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len81 = l80;
                                                                        let bytes81 = _rt::Vec::from_raw_parts(
                                                                            l79.cast(),
                                                                            len81,
                                                                            len81,
                                                                        );
                                                                        (_rt::string_lift(bytes78), _rt::string_lift(bytes81))
                                                                    };
                                                                    result82.push(e82);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base82,
                                                                    len82 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result82
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V191::Audio(e191)
                        }
                        3 => {
                            let e191 = {
                                let l83 = *arg0.add(16).cast::<*mut u8>();
                                let l84 = *arg0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len85 = l84;
                                let bytes85 = _rt::Vec::from_raw_parts(
                                    l83.cast(),
                                    len85,
                                    len85,
                                );
                                let l86 = *arg0
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l87 = *arg0
                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len88 = l87;
                                let bytes88 = _rt::Vec::from_raw_parts(
                                    l86.cast(),
                                    len88,
                                    len88,
                                );
                                let l89 = i32::from(
                                    *arg0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::ResourceLinkContent {
                                    uri: _rt::string_lift(bytes85),
                                    name: _rt::string_lift(bytes88),
                                    options: match l89 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l90 = i32::from(
                                                    *arg0
                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l94 = i32::from(
                                                    *arg0
                                                        .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l98 = i32::from(
                                                    *arg0
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l100 = i32::from(
                                                    *arg0
                                                        .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l104 = i32::from(
                                                    *arg0
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l115 = i32::from(
                                                    *arg0
                                                        .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ResourceLinkContentOptions {
                                                    title: match l90 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l91 = *arg0
                                                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l92 = *arg0
                                                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len93 = l92;
                                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                                    l91.cast(),
                                                                    len93,
                                                                    len93,
                                                                );
                                                                _rt::string_lift(bytes93)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    description: match l94 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l95 = *arg0
                                                                    .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l96 = *arg0
                                                                    .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len97 = l96;
                                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                                    l95.cast(),
                                                                    len97,
                                                                    len97,
                                                                );
                                                                _rt::string_lift(bytes97)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    size: match l98 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l99 = *arg0
                                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l99 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    mime_type: match l100 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l101 = *arg0
                                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l102 = *arg0
                                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len103 = l102;
                                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                                    l101.cast(),
                                                                    len103,
                                                                    len103,
                                                                );
                                                                _rt::string_lift(bytes103)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    annotations: match l104 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l105 = i32::from(
                                                                    *arg0
                                                                        .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l110 = i32::from(
                                                                    *arg0
                                                                        .add(56 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l114 = *arg0
                                                                    .add(56 + 18 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l105 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l106 = *arg0
                                                                                    .add(56 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l107 = *arg0
                                                                                    .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base109 = l106;
                                                                                let len109 = l107;
                                                                                let mut result109 = _rt::Vec::with_capacity(len109);
                                                                                for i in 0..len109 {
                                                                                    let base = base109.add(i * 1);
                                                                                    let e109 = {
                                                                                        let l108 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l108 as u8,
                                                                                        )
                                                                                    };
                                                                                    result109.push(e109);
                                                                                }
                                                                                _rt::cabi_dealloc(base109, len109 * 1, 1);
                                                                                result109
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l110 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l111 = *arg0
                                                                                    .add(56 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l112 = *arg0
                                                                                    .add(56 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len113 = l112;
                                                                                let bytes113 = _rt::Vec::from_raw_parts(
                                                                                    l111.cast(),
                                                                                    len113,
                                                                                    len113,
                                                                                );
                                                                                _rt::string_lift(bytes113)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l114,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l115 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l116 = *arg0
                                                                    .add(64 + 19 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l117 = *arg0
                                                                    .add(64 + 20 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base124 = l116;
                                                                let len124 = l117;
                                                                let mut result124 = _rt::Vec::with_capacity(len124);
                                                                for i in 0..len124 {
                                                                    let base = base124
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e124 = {
                                                                        let l118 = *base.add(0).cast::<*mut u8>();
                                                                        let l119 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len120 = l119;
                                                                        let bytes120 = _rt::Vec::from_raw_parts(
                                                                            l118.cast(),
                                                                            len120,
                                                                            len120,
                                                                        );
                                                                        let l121 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l122 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len123 = l122;
                                                                        let bytes123 = _rt::Vec::from_raw_parts(
                                                                            l121.cast(),
                                                                            len123,
                                                                            len123,
                                                                        );
                                                                        (_rt::string_lift(bytes120), _rt::string_lift(bytes123))
                                                                    };
                                                                    result124.push(e124);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base124,
                                                                    len124 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result124
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V191::ResourceLink(e191)
                        }
                        n => {
                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                            let e191 = {
                                let l125 = i32::from(*arg0.add(16).cast::<u8>());
                                use super::super::super::super::wasmcp::mcp::content::EmbeddedResource as V168;
                                let v168 = match l125 {
                                    0 => {
                                        let e168 = {
                                            let l126 = *arg0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l127 = *arg0
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len128 = l127;
                                            let bytes128 = _rt::Vec::from_raw_parts(
                                                l126.cast(),
                                                len128,
                                                len128,
                                            );
                                            let l129 = *arg0
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l130 = *arg0
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len131 = l130;
                                            let bytes131 = _rt::Vec::from_raw_parts(
                                                l129.cast(),
                                                len131,
                                                len131,
                                            );
                                            let l132 = i32::from(
                                                *arg0
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::super::wasmcp::mcp::content::TextResourceContents {
                                                uri: _rt::string_lift(bytes128),
                                                text: _rt::string_lift(bytes131),
                                                options: match l132 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l133 = i32::from(
                                                                *arg0
                                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l137 = i32::from(
                                                                *arg0
                                                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                                mime_type: match l133 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l134 = *arg0
                                                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l135 = *arg0
                                                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len136 = l135;
                                                                            let bytes136 = _rt::Vec::from_raw_parts(
                                                                                l134.cast(),
                                                                                len136,
                                                                                len136,
                                                                            );
                                                                            _rt::string_lift(bytes136)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                meta: match l137 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l138 = *arg0
                                                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l139 = *arg0
                                                                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base146 = l138;
                                                                            let len146 = l139;
                                                                            let mut result146 = _rt::Vec::with_capacity(len146);
                                                                            for i in 0..len146 {
                                                                                let base = base146
                                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                let e146 = {
                                                                                    let l140 = *base.add(0).cast::<*mut u8>();
                                                                                    let l141 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len142 = l141;
                                                                                    let bytes142 = _rt::Vec::from_raw_parts(
                                                                                        l140.cast(),
                                                                                        len142,
                                                                                        len142,
                                                                                    );
                                                                                    let l143 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l144 = *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len145 = l144;
                                                                                    let bytes145 = _rt::Vec::from_raw_parts(
                                                                                        l143.cast(),
                                                                                        len145,
                                                                                        len145,
                                                                                    );
                                                                                    (_rt::string_lift(bytes142), _rt::string_lift(bytes145))
                                                                                };
                                                                                result146.push(e146);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base146,
                                                                                len146 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            result146
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V168::Text(e168)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e168 = {
                                            let l147 = *arg0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l148 = *arg0
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len149 = l148;
                                            let bytes149 = _rt::Vec::from_raw_parts(
                                                l147.cast(),
                                                len149,
                                                len149,
                                            );
                                            let l150 = *arg0
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l151 = *arg0
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len152 = l151;
                                            let l153 = i32::from(
                                                *arg0
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::super::wasmcp::mcp::content::BlobResourceContents {
                                                uri: _rt::string_lift(bytes149),
                                                blob: _rt::Vec::from_raw_parts(l150.cast(), len152, len152),
                                                options: match l153 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l154 = i32::from(
                                                                *arg0
                                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l158 = i32::from(
                                                                *arg0
                                                                    .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                                mime_type: match l154 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l155 = *arg0
                                                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l156 = *arg0
                                                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len157 = l156;
                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                l155.cast(),
                                                                                len157,
                                                                                len157,
                                                                            );
                                                                            _rt::string_lift(bytes157)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                meta: match l158 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l159 = *arg0
                                                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l160 = *arg0
                                                                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base167 = l159;
                                                                            let len167 = l160;
                                                                            let mut result167 = _rt::Vec::with_capacity(len167);
                                                                            for i in 0..len167 {
                                                                                let base = base167
                                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                let e167 = {
                                                                                    let l161 = *base.add(0).cast::<*mut u8>();
                                                                                    let l162 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len163 = l162;
                                                                                    let bytes163 = _rt::Vec::from_raw_parts(
                                                                                        l161.cast(),
                                                                                        len163,
                                                                                        len163,
                                                                                    );
                                                                                    let l164 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l165 = *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len166 = l165;
                                                                                    let bytes166 = _rt::Vec::from_raw_parts(
                                                                                        l164.cast(),
                                                                                        len166,
                                                                                        len166,
                                                                                    );
                                                                                    (_rt::string_lift(bytes163), _rt::string_lift(bytes166))
                                                                                };
                                                                                result167.push(e167);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base167,
                                                                                len167 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            result167
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V168::Blob(e168)
                                    }
                                };
                                let l169 = i32::from(
                                    *arg0
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::EmbeddedResourceContent {
                                    resource: v168,
                                    options: match l169 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l170 = i32::from(
                                                    *arg0
                                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l181 = i32::from(
                                                    *arg0
                                                        .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l170 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l171 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l176 = i32::from(
                                                                    *arg0
                                                                        .add(32 + 15 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l180 = *arg0
                                                                    .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l171 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l172 = *arg0
                                                                                    .add(32 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l173 = *arg0
                                                                                    .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base175 = l172;
                                                                                let len175 = l173;
                                                                                let mut result175 = _rt::Vec::with_capacity(len175);
                                                                                for i in 0..len175 {
                                                                                    let base = base175.add(i * 1);
                                                                                    let e175 = {
                                                                                        let l174 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l174 as u8,
                                                                                        )
                                                                                    };
                                                                                    result175.push(e175);
                                                                                }
                                                                                _rt::cabi_dealloc(base175, len175 * 1, 1);
                                                                                result175
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l176 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l177 = *arg0
                                                                                    .add(32 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l178 = *arg0
                                                                                    .add(32 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len179 = l178;
                                                                                let bytes179 = _rt::Vec::from_raw_parts(
                                                                                    l177.cast(),
                                                                                    len179,
                                                                                    len179,
                                                                                );
                                                                                _rt::string_lift(bytes179)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l180,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l181 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l182 = *arg0
                                                                    .add(40 + 19 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l183 = *arg0
                                                                    .add(40 + 20 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base190 = l182;
                                                                let len190 = l183;
                                                                let mut result190 = _rt::Vec::with_capacity(len190);
                                                                for i in 0..len190 {
                                                                    let base = base190
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e190 = {
                                                                        let l184 = *base.add(0).cast::<*mut u8>();
                                                                        let l185 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len186 = l185;
                                                                        let bytes186 = _rt::Vec::from_raw_parts(
                                                                            l184.cast(),
                                                                            len186,
                                                                            len186,
                                                                        );
                                                                        let l187 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l188 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len189 = l188;
                                                                        let bytes189 = _rt::Vec::from_raw_parts(
                                                                            l187.cast(),
                                                                            len189,
                                                                            len189,
                                                                        );
                                                                        (_rt::string_lift(bytes186), _rt::string_lift(bytes189))
                                                                    };
                                                                    result190.push(e190);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base190,
                                                                    len190 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result190
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V191::EmbeddedResource(e191)
                        }
                    };
                    let result192 = T::next(
                        unsafe { WriterBorrow::lift(l0 as u32 as usize) }.get(),
                        v191,
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        72 + 20 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr193 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result192 {
                        Ok(_) => {
                            *ptr193.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr193.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V194;
                            match e {
                                V194::LastOperationFailed(e) => {
                                    *ptr193.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr193.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V194::Closed => {
                                    *ptr193.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr193
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_writer_close_cabi<T: GuestWriter>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result7 = T::close(
                        unsafe { WriterBorrow::lift(arg0 as u32 as usize) }.get(),
                        match arg1 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    is_error: _rt::bool_lift(arg2 as u8),
                                    meta: match arg3 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base6 = arg4;
                                                let len6 = arg5;
                                                let mut result6 = _rt::Vec::with_capacity(len6);
                                                for i in 0..len6 {
                                                    let base = base6
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e6 = {
                                                        let l0 = *base.add(0).cast::<*mut u8>();
                                                        let l1 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len2 = l1;
                                                        let bytes2 = _rt::Vec::from_raw_parts(
                                                            l0.cast(),
                                                            len2,
                                                            len2,
                                                        );
                                                        let l3 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l4 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len5 = l4;
                                                        let bytes5 = _rt::Vec::from_raw_parts(
                                                            l3.cast(),
                                                            len5,
                                                            len5,
                                                        );
                                                        (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                                                    };
                                                    result6.push(e6);
                                                }
                                                _rt::cabi_dealloc(
                                                    base6,
                                                    len6 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result6
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr8 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result7 {
                        Ok(_) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V9;
                            match e {
                                V9::LastOperationFailed(e) => {
                                    *ptr8.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr8.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V9::Closed => {
                                    *ptr8.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_text_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result10 = T::write_text(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        _rt::string_lift(bytes2),
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    is_error: _rt::bool_lift(arg7 as u8),
                                    meta: match arg8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base9 = arg9;
                                                let len9 = arg10;
                                                let mut result9 = _rt::Vec::with_capacity(len9);
                                                for i in 0..len9 {
                                                    let base = base9
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e9 = {
                                                        let l3 = *base.add(0).cast::<*mut u8>();
                                                        let l4 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len5 = l4;
                                                        let bytes5 = _rt::Vec::from_raw_parts(
                                                            l3.cast(),
                                                            len5,
                                                            len5,
                                                        );
                                                        let l6 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l7 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len8 = l7;
                                                        let bytes8 = _rt::Vec::from_raw_parts(
                                                            l6.cast(),
                                                            len8,
                                                            len8,
                                                        );
                                                        (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                                                    };
                                                    result9.push(e9);
                                                }
                                                _rt::cabi_dealloc(
                                                    base9,
                                                    len9 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result9
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr11 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result10 {
                        Ok(_) => {
                            *ptr11.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr11.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V12;
                            match e {
                                V12::LastOperationFailed(e) => {
                                    *ptr11.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr11.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V12::Closed => {
                                    *ptr11.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr11
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_error_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result3 = T::write_error(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        _rt::string_lift(bytes2),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(_) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V5;
                            match e {
                                V5::LastOperationFailed(e) => {
                                    *ptr4.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr4.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V5::Closed => {
                                    *ptr4.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let base193 = arg4;
                    let len193 = arg5;
                    let mut result193 = _rt::Vec::with_capacity(len193);
                    for i in 0..len193 {
                        let base = base193
                            .add(i * (64 + 20 * ::core::mem::size_of::<*const u8>()));
                        let e193 = {
                            let l2 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::wasmcp::mcp::content::ContentBlock as V192;
                            let v192 = match l2 {
                                0 => {
                                    let e192 = {
                                        let l3 = *base.add(8).cast::<*mut u8>();
                                        let l4 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len5 = l4;
                                        let bytes5 = _rt::Vec::from_raw_parts(
                                            l3.cast(),
                                            len5,
                                            len5,
                                        );
                                        let l6 = i32::from(
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::content::TextContent {
                                            text: _rt::string_lift(bytes5),
                                            options: match l6 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l7 = i32::from(
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l18 = i32::from(
                                                            *base
                                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                            annotations: match l7 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l8 = i32::from(
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l13 = i32::from(
                                                                            *base
                                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l17 = *base
                                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                            audience: match l8 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l9 = *base
                                                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l10 = *base
                                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let base12 = l9;
                                                                                        let len12 = l10;
                                                                                        let mut result12 = _rt::Vec::with_capacity(len12);
                                                                                        for i in 0..len12 {
                                                                                            let base = base12.add(i * 1);
                                                                                            let e12 = {
                                                                                                let l11 = i32::from(*base.add(0).cast::<u8>());
                                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                                    l11 as u8,
                                                                                                )
                                                                                            };
                                                                                            result12.push(e12);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base12, len12 * 1, 1);
                                                                                        result12
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            last_modified: match l13 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l14 = *base
                                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l15 = *base
                                                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len16 = l15;
                                                                                        let bytes16 = _rt::Vec::from_raw_parts(
                                                                                            l14.cast(),
                                                                                            len16,
                                                                                            len16,
                                                                                        );
                                                                                        _rt::string_lift(bytes16)
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            priority: l17,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            meta: match l18 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l19 = *base
                                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l20 = *base
                                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base27 = l19;
                                                                        let len27 = l20;
                                                                        let mut result27 = _rt::Vec::with_capacity(len27);
                                                                        for i in 0..len27 {
                                                                            let base = base27
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e27 = {
                                                                                let l21 = *base.add(0).cast::<*mut u8>();
                                                                                let l22 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len23 = l22;
                                                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                                                    l21.cast(),
                                                                                    len23,
                                                                                    len23,
                                                                                );
                                                                                let l24 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l25 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len26 = l25;
                                                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                                                    l24.cast(),
                                                                                    len26,
                                                                                    len26,
                                                                                );
                                                                                (_rt::string_lift(bytes23), _rt::string_lift(bytes26))
                                                                            };
                                                                            result27.push(e27);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base27,
                                                                            len27 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result27
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V192::Text(e192)
                                }
                                1 => {
                                    let e192 = {
                                        let l28 = *base.add(8).cast::<*mut u8>();
                                        let l29 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len30 = l29;
                                        let l31 = *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l32 = *base
                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len33 = l32;
                                        let bytes33 = _rt::Vec::from_raw_parts(
                                            l31.cast(),
                                            len33,
                                            len33,
                                        );
                                        let l34 = i32::from(
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::content::ImageContent {
                                            data: _rt::Vec::from_raw_parts(l28.cast(), len30, len30),
                                            mime_type: _rt::string_lift(bytes33),
                                            options: match l34 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l35 = i32::from(
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l46 = i32::from(
                                                            *base
                                                                .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                            annotations: match l35 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l36 = i32::from(
                                                                            *base
                                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l41 = i32::from(
                                                                            *base
                                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l45 = *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                            audience: match l36 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l37 = *base
                                                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l38 = *base
                                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let base40 = l37;
                                                                                        let len40 = l38;
                                                                                        let mut result40 = _rt::Vec::with_capacity(len40);
                                                                                        for i in 0..len40 {
                                                                                            let base = base40.add(i * 1);
                                                                                            let e40 = {
                                                                                                let l39 = i32::from(*base.add(0).cast::<u8>());
                                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                                    l39 as u8,
                                                                                                )
                                                                                            };
                                                                                            result40.push(e40);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base40, len40 * 1, 1);
                                                                                        result40
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            last_modified: match l41 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l42 = *base
                                                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l43 = *base
                                                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len44 = l43;
                                                                                        let bytes44 = _rt::Vec::from_raw_parts(
                                                                                            l42.cast(),
                                                                                            len44,
                                                                                            len44,
                                                                                        );
                                                                                        _rt::string_lift(bytes44)
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            priority: l45,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            meta: match l46 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l47 = *base
                                                                            .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l48 = *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base55 = l47;
                                                                        let len55 = l48;
                                                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                                                        for i in 0..len55 {
                                                                            let base = base55
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e55 = {
                                                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                                                let l50 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len51 = l50;
                                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                                    l49.cast(),
                                                                                    len51,
                                                                                    len51,
                                                                                );
                                                                                let l52 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l53 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len54 = l53;
                                                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                                                    l52.cast(),
                                                                                    len54,
                                                                                    len54,
                                                                                );
                                                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                                                            };
                                                                            result55.push(e55);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base55,
                                                                            len55 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result55
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V192::Image(e192)
                                }
                                2 => {
                                    let e192 = {
                                        let l56 = *base.add(8).cast::<*mut u8>();
                                        let l57 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len58 = l57;
                                        let l59 = *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l60 = *base
                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len61 = l60;
                                        let bytes61 = _rt::Vec::from_raw_parts(
                                            l59.cast(),
                                            len61,
                                            len61,
                                        );
                                        let l62 = i32::from(
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::content::AudioContent {
                                            data: _rt::Vec::from_raw_parts(l56.cast(), len58, len58),
                                            mime_type: _rt::string_lift(bytes61),
                                            options: match l62 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l63 = i32::from(
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l74 = i32::from(
                                                            *base
                                                                .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                            annotations: match l63 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l64 = i32::from(
                                                                            *base
                                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l69 = i32::from(
                                                                            *base
                                                                                .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l73 = *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                            audience: match l64 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l65 = *base
                                                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l66 = *base
                                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let base68 = l65;
                                                                                        let len68 = l66;
                                                                                        let mut result68 = _rt::Vec::with_capacity(len68);
                                                                                        for i in 0..len68 {
                                                                                            let base = base68.add(i * 1);
                                                                                            let e68 = {
                                                                                                let l67 = i32::from(*base.add(0).cast::<u8>());
                                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                                    l67 as u8,
                                                                                                )
                                                                                            };
                                                                                            result68.push(e68);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base68, len68 * 1, 1);
                                                                                        result68
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            last_modified: match l69 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l70 = *base
                                                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l71 = *base
                                                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len72 = l71;
                                                                                        let bytes72 = _rt::Vec::from_raw_parts(
                                                                                            l70.cast(),
                                                                                            len72,
                                                                                            len72,
                                                                                        );
                                                                                        _rt::string_lift(bytes72)
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            priority: l73,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            meta: match l74 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l75 = *base
                                                                            .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l76 = *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base83 = l75;
                                                                        let len83 = l76;
                                                                        let mut result83 = _rt::Vec::with_capacity(len83);
                                                                        for i in 0..len83 {
                                                                            let base = base83
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e83 = {
                                                                                let l77 = *base.add(0).cast::<*mut u8>();
                                                                                let l78 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len79 = l78;
                                                                                let bytes79 = _rt::Vec::from_raw_parts(
                                                                                    l77.cast(),
                                                                                    len79,
                                                                                    len79,
                                                                                );
                                                                                let l80 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l81 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len82 = l81;
                                                                                let bytes82 = _rt::Vec::from_raw_parts(
                                                                                    l80.cast(),
                                                                                    len82,
                                                                                    len82,
                                                                                );
                                                                                (_rt::string_lift(bytes79), _rt::string_lift(bytes82))
                                                                            };
                                                                            result83.push(e83);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base83,
                                                                            len83 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result83
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V192::Audio(e192)
                                }
                                3 => {
                                    let e192 = {
                                        let l84 = *base.add(8).cast::<*mut u8>();
                                        let l85 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len86 = l85;
                                        let bytes86 = _rt::Vec::from_raw_parts(
                                            l84.cast(),
                                            len86,
                                            len86,
                                        );
                                        let l87 = *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l88 = *base
                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len89 = l88;
                                        let bytes89 = _rt::Vec::from_raw_parts(
                                            l87.cast(),
                                            len89,
                                            len89,
                                        );
                                        let l90 = i32::from(
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::content::ResourceLinkContent {
                                            uri: _rt::string_lift(bytes86),
                                            name: _rt::string_lift(bytes89),
                                            options: match l90 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l91 = i32::from(
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l95 = i32::from(
                                                            *base
                                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l99 = i32::from(
                                                            *base
                                                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l101 = i32::from(
                                                            *base
                                                                .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l105 = i32::from(
                                                            *base
                                                                .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l116 = i32::from(
                                                            *base
                                                                .add(56 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::super::wasmcp::mcp::content::ResourceLinkContentOptions {
                                                            title: match l91 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l92 = *base
                                                                            .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l93 = *base
                                                                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len94 = l93;
                                                                        let bytes94 = _rt::Vec::from_raw_parts(
                                                                            l92.cast(),
                                                                            len94,
                                                                            len94,
                                                                        );
                                                                        _rt::string_lift(bytes94)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            description: match l95 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l96 = *base
                                                                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l97 = *base
                                                                            .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len98 = l97;
                                                                        let bytes98 = _rt::Vec::from_raw_parts(
                                                                            l96.cast(),
                                                                            len98,
                                                                            len98,
                                                                        );
                                                                        _rt::string_lift(bytes98)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            size: match l99 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l100 = *base
                                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l100 as u64
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            mime_type: match l101 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l102 = *base
                                                                            .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l103 = *base
                                                                            .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len104 = l103;
                                                                        let bytes104 = _rt::Vec::from_raw_parts(
                                                                            l102.cast(),
                                                                            len104,
                                                                            len104,
                                                                        );
                                                                        _rt::string_lift(bytes104)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            annotations: match l105 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l106 = i32::from(
                                                                            *base
                                                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l111 = i32::from(
                                                                            *base
                                                                                .add(48 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l115 = *base
                                                                            .add(48 + 18 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                            audience: match l106 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l107 = *base
                                                                                            .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l108 = *base
                                                                                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let base110 = l107;
                                                                                        let len110 = l108;
                                                                                        let mut result110 = _rt::Vec::with_capacity(len110);
                                                                                        for i in 0..len110 {
                                                                                            let base = base110.add(i * 1);
                                                                                            let e110 = {
                                                                                                let l109 = i32::from(*base.add(0).cast::<u8>());
                                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                                    l109 as u8,
                                                                                                )
                                                                                            };
                                                                                            result110.push(e110);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base110, len110 * 1, 1);
                                                                                        result110
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            last_modified: match l111 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l112 = *base
                                                                                            .add(48 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l113 = *base
                                                                                            .add(48 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len114 = l113;
                                                                                        let bytes114 = _rt::Vec::from_raw_parts(
                                                                                            l112.cast(),
                                                                                            len114,
                                                                                            len114,
                                                                                        );
                                                                                        _rt::string_lift(bytes114)
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            priority: l115,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            meta: match l116 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l117 = *base
                                                                            .add(56 + 19 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l118 = *base
                                                                            .add(56 + 20 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base125 = l117;
                                                                        let len125 = l118;
                                                                        let mut result125 = _rt::Vec::with_capacity(len125);
                                                                        for i in 0..len125 {
                                                                            let base = base125
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e125 = {
                                                                                let l119 = *base.add(0).cast::<*mut u8>();
                                                                                let l120 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len121 = l120;
                                                                                let bytes121 = _rt::Vec::from_raw_parts(
                                                                                    l119.cast(),
                                                                                    len121,
                                                                                    len121,
                                                                                );
                                                                                let l122 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l123 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len124 = l123;
                                                                                let bytes124 = _rt::Vec::from_raw_parts(
                                                                                    l122.cast(),
                                                                                    len124,
                                                                                    len124,
                                                                                );
                                                                                (_rt::string_lift(bytes121), _rt::string_lift(bytes124))
                                                                            };
                                                                            result125.push(e125);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base125,
                                                                            len125 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result125
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V192::ResourceLink(e192)
                                }
                                n => {
                                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                                    let e192 = {
                                        let l126 = i32::from(*base.add(8).cast::<u8>());
                                        use super::super::super::super::wasmcp::mcp::content::EmbeddedResource as V169;
                                        let v169 = match l126 {
                                            0 => {
                                                let e169 = {
                                                    let l127 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l128 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len129 = l128;
                                                    let bytes129 = _rt::Vec::from_raw_parts(
                                                        l127.cast(),
                                                        len129,
                                                        len129,
                                                    );
                                                    let l130 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l131 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len132 = l131;
                                                    let bytes132 = _rt::Vec::from_raw_parts(
                                                        l130.cast(),
                                                        len132,
                                                        len132,
                                                    );
                                                    let l133 = i32::from(
                                                        *base
                                                            .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::super::wasmcp::mcp::content::TextResourceContents {
                                                        uri: _rt::string_lift(bytes129),
                                                        text: _rt::string_lift(bytes132),
                                                        options: match l133 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l134 = i32::from(
                                                                        *base
                                                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l138 = i32::from(
                                                                        *base
                                                                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                                        mime_type: match l134 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l135 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l136 = *base
                                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len137 = l136;
                                                                                    let bytes137 = _rt::Vec::from_raw_parts(
                                                                                        l135.cast(),
                                                                                        len137,
                                                                                        len137,
                                                                                    );
                                                                                    _rt::string_lift(bytes137)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        meta: match l138 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l139 = *base
                                                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l140 = *base
                                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base147 = l139;
                                                                                    let len147 = l140;
                                                                                    let mut result147 = _rt::Vec::with_capacity(len147);
                                                                                    for i in 0..len147 {
                                                                                        let base = base147
                                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e147 = {
                                                                                            let l141 = *base.add(0).cast::<*mut u8>();
                                                                                            let l142 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len143 = l142;
                                                                                            let bytes143 = _rt::Vec::from_raw_parts(
                                                                                                l141.cast(),
                                                                                                len143,
                                                                                                len143,
                                                                                            );
                                                                                            let l144 = *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l145 = *base
                                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len146 = l145;
                                                                                            let bytes146 = _rt::Vec::from_raw_parts(
                                                                                                l144.cast(),
                                                                                                len146,
                                                                                                len146,
                                                                                            );
                                                                                            (_rt::string_lift(bytes143), _rt::string_lift(bytes146))
                                                                                        };
                                                                                        result147.push(e147);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base147,
                                                                                        len147 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result147
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V169::Text(e169)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e169 = {
                                                    let l148 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l149 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len150 = l149;
                                                    let bytes150 = _rt::Vec::from_raw_parts(
                                                        l148.cast(),
                                                        len150,
                                                        len150,
                                                    );
                                                    let l151 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l152 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len153 = l152;
                                                    let l154 = i32::from(
                                                        *base
                                                            .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::super::wasmcp::mcp::content::BlobResourceContents {
                                                        uri: _rt::string_lift(bytes150),
                                                        blob: _rt::Vec::from_raw_parts(l151.cast(), len153, len153),
                                                        options: match l154 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l155 = i32::from(
                                                                        *base
                                                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l159 = i32::from(
                                                                        *base
                                                                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                                        mime_type: match l155 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l156 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l157 = *base
                                                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len158 = l157;
                                                                                    let bytes158 = _rt::Vec::from_raw_parts(
                                                                                        l156.cast(),
                                                                                        len158,
                                                                                        len158,
                                                                                    );
                                                                                    _rt::string_lift(bytes158)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        meta: match l159 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l160 = *base
                                                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l161 = *base
                                                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base168 = l160;
                                                                                    let len168 = l161;
                                                                                    let mut result168 = _rt::Vec::with_capacity(len168);
                                                                                    for i in 0..len168 {
                                                                                        let base = base168
                                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e168 = {
                                                                                            let l162 = *base.add(0).cast::<*mut u8>();
                                                                                            let l163 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len164 = l163;
                                                                                            let bytes164 = _rt::Vec::from_raw_parts(
                                                                                                l162.cast(),
                                                                                                len164,
                                                                                                len164,
                                                                                            );
                                                                                            let l165 = *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l166 = *base
                                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len167 = l166;
                                                                                            let bytes167 = _rt::Vec::from_raw_parts(
                                                                                                l165.cast(),
                                                                                                len167,
                                                                                                len167,
                                                                                            );
                                                                                            (_rt::string_lift(bytes164), _rt::string_lift(bytes167))
                                                                                        };
                                                                                        result168.push(e168);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base168,
                                                                                        len168 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result168
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V169::Blob(e169)
                                            }
                                        };
                                        let l170 = i32::from(
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::wasmcp::mcp::content::EmbeddedResourceContent {
                                            resource: v169,
                                            options: match l170 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l171 = i32::from(
                                                            *base
                                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l182 = i32::from(
                                                            *base
                                                                .add(32 + 18 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                            annotations: match l171 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l172 = i32::from(
                                                                            *base
                                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l177 = i32::from(
                                                                            *base
                                                                                .add(24 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l181 = *base
                                                                            .add(24 + 18 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                            audience: match l172 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l173 = *base
                                                                                            .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l174 = *base
                                                                                            .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let base176 = l173;
                                                                                        let len176 = l174;
                                                                                        let mut result176 = _rt::Vec::with_capacity(len176);
                                                                                        for i in 0..len176 {
                                                                                            let base = base176.add(i * 1);
                                                                                            let e176 = {
                                                                                                let l175 = i32::from(*base.add(0).cast::<u8>());
                                                                                                super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                                    l175 as u8,
                                                                                                )
                                                                                            };
                                                                                            result176.push(e176);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base176, len176 * 1, 1);
                                                                                        result176
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            last_modified: match l177 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l178 = *base
                                                                                            .add(24 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l179 = *base
                                                                                            .add(24 + 17 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len180 = l179;
                                                                                        let bytes180 = _rt::Vec::from_raw_parts(
                                                                                            l178.cast(),
                                                                                            len180,
                                                                                            len180,
                                                                                        );
                                                                                        _rt::string_lift(bytes180)
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                            priority: l181,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            meta: match l182 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l183 = *base
                                                                            .add(32 + 19 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l184 = *base
                                                                            .add(32 + 20 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base191 = l183;
                                                                        let len191 = l184;
                                                                        let mut result191 = _rt::Vec::with_capacity(len191);
                                                                        for i in 0..len191 {
                                                                            let base = base191
                                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                            let e191 = {
                                                                                let l185 = *base.add(0).cast::<*mut u8>();
                                                                                let l186 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len187 = l186;
                                                                                let bytes187 = _rt::Vec::from_raw_parts(
                                                                                    l185.cast(),
                                                                                    len187,
                                                                                    len187,
                                                                                );
                                                                                let l188 = *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l189 = *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len190 = l189;
                                                                                let bytes190 = _rt::Vec::from_raw_parts(
                                                                                    l188.cast(),
                                                                                    len190,
                                                                                    len190,
                                                                                );
                                                                                (_rt::string_lift(bytes187), _rt::string_lift(bytes190))
                                                                            };
                                                                            result191.push(e191);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base191,
                                                                            len191 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                            ::core::mem::size_of::<*const u8>(),
                                                                        );
                                                                        result191
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V192::EmbeddedResource(e192)
                                }
                            };
                            v192
                        };
                        result193.push(e193);
                    }
                    _rt::cabi_dealloc(
                        base193,
                        len193 * (64 + 20 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result201 = T::write(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        result193,
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    is_error: _rt::bool_lift(arg7 as u8),
                                    meta: match arg8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base200 = arg9;
                                                let len200 = arg10;
                                                let mut result200 = _rt::Vec::with_capacity(len200);
                                                for i in 0..len200 {
                                                    let base = base200
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e200 = {
                                                        let l194 = *base.add(0).cast::<*mut u8>();
                                                        let l195 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len196 = l195;
                                                        let bytes196 = _rt::Vec::from_raw_parts(
                                                            l194.cast(),
                                                            len196,
                                                            len196,
                                                        );
                                                        let l197 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l198 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len199 = l198;
                                                        let bytes199 = _rt::Vec::from_raw_parts(
                                                            l197.cast(),
                                                            len199,
                                                            len199,
                                                        );
                                                        (_rt::string_lift(bytes196), _rt::string_lift(bytes199))
                                                    };
                                                    result200.push(e200);
                                                }
                                                _rt::cabi_dealloc(
                                                    base200,
                                                    len200 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result200
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr202 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result201 {
                        Ok(_) => {
                            *ptr202.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr202.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V203;
                            match e {
                                V203::LastOperationFailed(e) => {
                                    *ptr202.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr202.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V203::Closed => {
                                    *ptr202.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr202
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_open_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    use super::super::super::super::wasmcp::mcp::types::Id as V5;
                    let v5 = match l0 {
                        0 => {
                            let e5 = {
                                let l1 = *arg0.add(8).cast::<i64>();
                                l1
                            };
                            V5::Number(e5)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e5 = {
                                let l2 = *arg0.add(8).cast::<*mut u8>();
                                let l3 = *arg0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    l2.cast(),
                                    len4,
                                    len4,
                                );
                                _rt::string_lift(bytes4)
                            };
                            V5::String(e5)
                        }
                    };
                    let l6 = *arg0
                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l7 = i32::from(
                        *arg0
                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    use super::super::super::super::wasmcp::mcp::content::ContentBlock as V197;
                    let v197 = match l7 {
                        0 => {
                            let e197 = {
                                let l8 = *arg0
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l9 = *arg0
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                let l11 = i32::from(
                                    *arg0
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::TextContent {
                                    text: _rt::string_lift(bytes10),
                                    options: match l11 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l12 = i32::from(
                                                    *arg0
                                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l23 = i32::from(
                                                    *arg0
                                                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l12 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l13 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l18 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l22 = *arg0
                                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l13 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l14 = *arg0
                                                                                    .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l15 = *arg0
                                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base17 = l14;
                                                                                let len17 = l15;
                                                                                let mut result17 = _rt::Vec::with_capacity(len17);
                                                                                for i in 0..len17 {
                                                                                    let base = base17.add(i * 1);
                                                                                    let e17 = {
                                                                                        let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l16 as u8,
                                                                                        )
                                                                                    };
                                                                                    result17.push(e17);
                                                                                }
                                                                                _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                                result17
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l18 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l19 = *arg0
                                                                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l20 = *arg0
                                                                                    .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len21 = l20;
                                                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                                                    l19.cast(),
                                                                                    len21,
                                                                                    len21,
                                                                                );
                                                                                _rt::string_lift(bytes21)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l22,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l23 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l24 = *arg0
                                                                    .add(48 + 11 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l25 = *arg0
                                                                    .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base32 = l24;
                                                                let len32 = l25;
                                                                let mut result32 = _rt::Vec::with_capacity(len32);
                                                                for i in 0..len32 {
                                                                    let base = base32
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e32 = {
                                                                        let l26 = *base.add(0).cast::<*mut u8>();
                                                                        let l27 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len28 = l27;
                                                                        let bytes28 = _rt::Vec::from_raw_parts(
                                                                            l26.cast(),
                                                                            len28,
                                                                            len28,
                                                                        );
                                                                        let l29 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l30 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len31 = l30;
                                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                                            l29.cast(),
                                                                            len31,
                                                                            len31,
                                                                        );
                                                                        (_rt::string_lift(bytes28), _rt::string_lift(bytes31))
                                                                    };
                                                                    result32.push(e32);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base32,
                                                                    len32 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result32
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V197::Text(e197)
                        }
                        1 => {
                            let e197 = {
                                let l33 = *arg0
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l34 = *arg0
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len35 = l34;
                                let l36 = *arg0
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l37 = *arg0
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len38 = l37;
                                let bytes38 = _rt::Vec::from_raw_parts(
                                    l36.cast(),
                                    len38,
                                    len38,
                                );
                                let l39 = i32::from(
                                    *arg0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::ImageContent {
                                    data: _rt::Vec::from_raw_parts(l33.cast(), len35, len35),
                                    mime_type: _rt::string_lift(bytes38),
                                    options: match l39 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l40 = i32::from(
                                                    *arg0
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l51 = i32::from(
                                                    *arg0
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l40 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l41 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l46 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l50 = *arg0
                                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l41 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l42 = *arg0
                                                                                    .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l43 = *arg0
                                                                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base45 = l42;
                                                                                let len45 = l43;
                                                                                let mut result45 = _rt::Vec::with_capacity(len45);
                                                                                for i in 0..len45 {
                                                                                    let base = base45.add(i * 1);
                                                                                    let e45 = {
                                                                                        let l44 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l44 as u8,
                                                                                        )
                                                                                    };
                                                                                    result45.push(e45);
                                                                                }
                                                                                _rt::cabi_dealloc(base45, len45 * 1, 1);
                                                                                result45
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l46 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l47 = *arg0
                                                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l48 = *arg0
                                                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len49 = l48;
                                                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                                                    l47.cast(),
                                                                                    len49,
                                                                                    len49,
                                                                                );
                                                                                _rt::string_lift(bytes49)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l50,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l51 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l52 = *arg0
                                                                    .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *arg0
                                                                    .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base60 = l52;
                                                                let len60 = l53;
                                                                let mut result60 = _rt::Vec::with_capacity(len60);
                                                                for i in 0..len60 {
                                                                    let base = base60
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e60 = {
                                                                        let l54 = *base.add(0).cast::<*mut u8>();
                                                                        let l55 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len56 = l55;
                                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                                            l54.cast(),
                                                                            len56,
                                                                            len56,
                                                                        );
                                                                        let l57 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l58 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len59 = l58;
                                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                                            l57.cast(),
                                                                            len59,
                                                                            len59,
                                                                        );
                                                                        (_rt::string_lift(bytes56), _rt::string_lift(bytes59))
                                                                    };
                                                                    result60.push(e60);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base60,
                                                                    len60 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result60
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V197::Image(e197)
                        }
                        2 => {
                            let e197 = {
                                let l61 = *arg0
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l62 = *arg0
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len63 = l62;
                                let l64 = *arg0
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l65 = *arg0
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len66 = l65;
                                let bytes66 = _rt::Vec::from_raw_parts(
                                    l64.cast(),
                                    len66,
                                    len66,
                                );
                                let l67 = i32::from(
                                    *arg0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::AudioContent {
                                    data: _rt::Vec::from_raw_parts(l61.cast(), len63, len63),
                                    mime_type: _rt::string_lift(bytes66),
                                    options: match l67 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l68 = i32::from(
                                                    *arg0
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l79 = i32::from(
                                                    *arg0
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l68 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l69 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l74 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l78 = *arg0
                                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l69 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l70 = *arg0
                                                                                    .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l71 = *arg0
                                                                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base73 = l70;
                                                                                let len73 = l71;
                                                                                let mut result73 = _rt::Vec::with_capacity(len73);
                                                                                for i in 0..len73 {
                                                                                    let base = base73.add(i * 1);
                                                                                    let e73 = {
                                                                                        let l72 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l72 as u8,
                                                                                        )
                                                                                    };
                                                                                    result73.push(e73);
                                                                                }
                                                                                _rt::cabi_dealloc(base73, len73 * 1, 1);
                                                                                result73
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l74 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l75 = *arg0
                                                                                    .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l76 = *arg0
                                                                                    .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len77 = l76;
                                                                                let bytes77 = _rt::Vec::from_raw_parts(
                                                                                    l75.cast(),
                                                                                    len77,
                                                                                    len77,
                                                                                );
                                                                                _rt::string_lift(bytes77)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l78,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l79 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l80 = *arg0
                                                                    .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l81 = *arg0
                                                                    .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base88 = l80;
                                                                let len88 = l81;
                                                                let mut result88 = _rt::Vec::with_capacity(len88);
                                                                for i in 0..len88 {
                                                                    let base = base88
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e88 = {
                                                                        let l82 = *base.add(0).cast::<*mut u8>();
                                                                        let l83 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len84 = l83;
                                                                        let bytes84 = _rt::Vec::from_raw_parts(
                                                                            l82.cast(),
                                                                            len84,
                                                                            len84,
                                                                        );
                                                                        let l85 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l86 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len87 = l86;
                                                                        let bytes87 = _rt::Vec::from_raw_parts(
                                                                            l85.cast(),
                                                                            len87,
                                                                            len87,
                                                                        );
                                                                        (_rt::string_lift(bytes84), _rt::string_lift(bytes87))
                                                                    };
                                                                    result88.push(e88);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base88,
                                                                    len88 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result88
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V197::Audio(e197)
                        }
                        3 => {
                            let e197 = {
                                let l89 = *arg0
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l90 = *arg0
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len91 = l90;
                                let bytes91 = _rt::Vec::from_raw_parts(
                                    l89.cast(),
                                    len91,
                                    len91,
                                );
                                let l92 = *arg0
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l93 = *arg0
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len94 = l93;
                                let bytes94 = _rt::Vec::from_raw_parts(
                                    l92.cast(),
                                    len94,
                                    len94,
                                );
                                let l95 = i32::from(
                                    *arg0
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::ResourceLinkContent {
                                    uri: _rt::string_lift(bytes91),
                                    name: _rt::string_lift(bytes94),
                                    options: match l95 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l96 = i32::from(
                                                    *arg0
                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l100 = i32::from(
                                                    *arg0
                                                        .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l104 = i32::from(
                                                    *arg0
                                                        .add(32 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l106 = i32::from(
                                                    *arg0
                                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l110 = i32::from(
                                                    *arg0
                                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l121 = i32::from(
                                                    *arg0
                                                        .add(72 + 20 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ResourceLinkContentOptions {
                                                    title: match l96 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l97 = *arg0
                                                                    .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l98 = *arg0
                                                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len99 = l98;
                                                                let bytes99 = _rt::Vec::from_raw_parts(
                                                                    l97.cast(),
                                                                    len99,
                                                                    len99,
                                                                );
                                                                _rt::string_lift(bytes99)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    description: match l100 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l101 = *arg0
                                                                    .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l102 = *arg0
                                                                    .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len103 = l102;
                                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                                    l101.cast(),
                                                                    len103,
                                                                    len103,
                                                                );
                                                                _rt::string_lift(bytes103)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    size: match l104 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l105 = *arg0
                                                                    .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l105 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    mime_type: match l106 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l107 = *arg0
                                                                    .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l108 = *arg0
                                                                    .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len109 = l108;
                                                                let bytes109 = _rt::Vec::from_raw_parts(
                                                                    l107.cast(),
                                                                    len109,
                                                                    len109,
                                                                );
                                                                _rt::string_lift(bytes109)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    annotations: match l110 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l111 = i32::from(
                                                                    *arg0
                                                                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l116 = i32::from(
                                                                    *arg0
                                                                        .add(64 + 17 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l120 = *arg0
                                                                    .add(64 + 20 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l111 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l112 = *arg0
                                                                                    .add(64 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l113 = *arg0
                                                                                    .add(64 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base115 = l112;
                                                                                let len115 = l113;
                                                                                let mut result115 = _rt::Vec::with_capacity(len115);
                                                                                for i in 0..len115 {
                                                                                    let base = base115.add(i * 1);
                                                                                    let e115 = {
                                                                                        let l114 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l114 as u8,
                                                                                        )
                                                                                    };
                                                                                    result115.push(e115);
                                                                                }
                                                                                _rt::cabi_dealloc(base115, len115 * 1, 1);
                                                                                result115
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l116 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l117 = *arg0
                                                                                    .add(64 + 18 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l118 = *arg0
                                                                                    .add(64 + 19 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len119 = l118;
                                                                                let bytes119 = _rt::Vec::from_raw_parts(
                                                                                    l117.cast(),
                                                                                    len119,
                                                                                    len119,
                                                                                );
                                                                                _rt::string_lift(bytes119)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l120,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l121 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l122 = *arg0
                                                                    .add(72 + 21 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l123 = *arg0
                                                                    .add(72 + 22 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base130 = l122;
                                                                let len130 = l123;
                                                                let mut result130 = _rt::Vec::with_capacity(len130);
                                                                for i in 0..len130 {
                                                                    let base = base130
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e130 = {
                                                                        let l124 = *base.add(0).cast::<*mut u8>();
                                                                        let l125 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len126 = l125;
                                                                        let bytes126 = _rt::Vec::from_raw_parts(
                                                                            l124.cast(),
                                                                            len126,
                                                                            len126,
                                                                        );
                                                                        let l127 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l128 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len129 = l128;
                                                                        let bytes129 = _rt::Vec::from_raw_parts(
                                                                            l127.cast(),
                                                                            len129,
                                                                            len129,
                                                                        );
                                                                        (_rt::string_lift(bytes126), _rt::string_lift(bytes129))
                                                                    };
                                                                    result130.push(e130);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base130,
                                                                    len130 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result130
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V197::ResourceLink(e197)
                        }
                        n => {
                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                            let e197 = {
                                let l131 = i32::from(
                                    *arg0
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                use super::super::super::super::wasmcp::mcp::content::EmbeddedResource as V174;
                                let v174 = match l131 {
                                    0 => {
                                        let e174 = {
                                            let l132 = *arg0
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l133 = *arg0
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len134 = l133;
                                            let bytes134 = _rt::Vec::from_raw_parts(
                                                l132.cast(),
                                                len134,
                                                len134,
                                            );
                                            let l135 = *arg0
                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l136 = *arg0
                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len137 = l136;
                                            let bytes137 = _rt::Vec::from_raw_parts(
                                                l135.cast(),
                                                len137,
                                                len137,
                                            );
                                            let l138 = i32::from(
                                                *arg0
                                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::super::wasmcp::mcp::content::TextResourceContents {
                                                uri: _rt::string_lift(bytes134),
                                                text: _rt::string_lift(bytes137),
                                                options: match l138 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l139 = i32::from(
                                                                *arg0
                                                                    .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l143 = i32::from(
                                                                *arg0
                                                                    .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                                mime_type: match l139 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l140 = *arg0
                                                                                .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l141 = *arg0
                                                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len142 = l141;
                                                                            let bytes142 = _rt::Vec::from_raw_parts(
                                                                                l140.cast(),
                                                                                len142,
                                                                                len142,
                                                                            );
                                                                            _rt::string_lift(bytes142)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                meta: match l143 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l144 = *arg0
                                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l145 = *arg0
                                                                                .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base152 = l144;
                                                                            let len152 = l145;
                                                                            let mut result152 = _rt::Vec::with_capacity(len152);
                                                                            for i in 0..len152 {
                                                                                let base = base152
                                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                let e152 = {
                                                                                    let l146 = *base.add(0).cast::<*mut u8>();
                                                                                    let l147 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len148 = l147;
                                                                                    let bytes148 = _rt::Vec::from_raw_parts(
                                                                                        l146.cast(),
                                                                                        len148,
                                                                                        len148,
                                                                                    );
                                                                                    let l149 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l150 = *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len151 = l150;
                                                                                    let bytes151 = _rt::Vec::from_raw_parts(
                                                                                        l149.cast(),
                                                                                        len151,
                                                                                        len151,
                                                                                    );
                                                                                    (_rt::string_lift(bytes148), _rt::string_lift(bytes151))
                                                                                };
                                                                                result152.push(e152);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base152,
                                                                                len152 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            result152
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V174::Text(e174)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e174 = {
                                            let l153 = *arg0
                                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l154 = *arg0
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len155 = l154;
                                            let bytes155 = _rt::Vec::from_raw_parts(
                                                l153.cast(),
                                                len155,
                                                len155,
                                            );
                                            let l156 = *arg0
                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l157 = *arg0
                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len158 = l157;
                                            let l159 = i32::from(
                                                *arg0
                                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            super::super::super::super::wasmcp::mcp::content::BlobResourceContents {
                                                uri: _rt::string_lift(bytes155),
                                                blob: _rt::Vec::from_raw_parts(l156.cast(), len158, len158),
                                                options: match l159 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l160 = i32::from(
                                                                *arg0
                                                                    .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l164 = i32::from(
                                                                *arg0
                                                                    .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            super::super::super::super::wasmcp::mcp::content::EmbeddedResourceOptions {
                                                                mime_type: match l160 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l161 = *arg0
                                                                                .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l162 = *arg0
                                                                                .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len163 = l162;
                                                                            let bytes163 = _rt::Vec::from_raw_parts(
                                                                                l161.cast(),
                                                                                len163,
                                                                                len163,
                                                                            );
                                                                            _rt::string_lift(bytes163)
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                                meta: match l164 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l165 = *arg0
                                                                                .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l166 = *arg0
                                                                                .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base173 = l165;
                                                                            let len173 = l166;
                                                                            let mut result173 = _rt::Vec::with_capacity(len173);
                                                                            for i in 0..len173 {
                                                                                let base = base173
                                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                                let e173 = {
                                                                                    let l167 = *base.add(0).cast::<*mut u8>();
                                                                                    let l168 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len169 = l168;
                                                                                    let bytes169 = _rt::Vec::from_raw_parts(
                                                                                        l167.cast(),
                                                                                        len169,
                                                                                        len169,
                                                                                    );
                                                                                    let l170 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l171 = *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len172 = l171;
                                                                                    let bytes172 = _rt::Vec::from_raw_parts(
                                                                                        l170.cast(),
                                                                                        len172,
                                                                                        len172,
                                                                                    );
                                                                                    (_rt::string_lift(bytes169), _rt::string_lift(bytes172))
                                                                                };
                                                                                result173.push(e173);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base173,
                                                                                len173 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            result173
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        V174::Blob(e174)
                                    }
                                };
                                let l175 = i32::from(
                                    *arg0
                                        .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::super::wasmcp::mcp::content::EmbeddedResourceContent {
                                    resource: v174,
                                    options: match l175 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l176 = i32::from(
                                                    *arg0
                                                        .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l187 = i32::from(
                                                    *arg0
                                                        .add(48 + 20 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::super::wasmcp::mcp::content::ContentOptions {
                                                    annotations: match l176 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l177 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l182 = i32::from(
                                                                    *arg0
                                                                        .add(40 + 17 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                let l186 = *arg0
                                                                    .add(40 + 20 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::wasmcp::mcp::content::Annotations {
                                                                    audience: match l177 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l178 = *arg0
                                                                                    .add(40 + 15 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l179 = *arg0
                                                                                    .add(40 + 16 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let base181 = l178;
                                                                                let len181 = l179;
                                                                                let mut result181 = _rt::Vec::with_capacity(len181);
                                                                                for i in 0..len181 {
                                                                                    let base = base181.add(i * 1);
                                                                                    let e181 = {
                                                                                        let l180 = i32::from(*base.add(0).cast::<u8>());
                                                                                        super::super::super::super::wasmcp::mcp::content::Role::_lift(
                                                                                            l180 as u8,
                                                                                        )
                                                                                    };
                                                                                    result181.push(e181);
                                                                                }
                                                                                _rt::cabi_dealloc(base181, len181 * 1, 1);
                                                                                result181
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    last_modified: match l182 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l183 = *arg0
                                                                                    .add(40 + 18 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l184 = *arg0
                                                                                    .add(40 + 19 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len185 = l184;
                                                                                let bytes185 = _rt::Vec::from_raw_parts(
                                                                                    l183.cast(),
                                                                                    len185,
                                                                                    len185,
                                                                                );
                                                                                _rt::string_lift(bytes185)
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                    priority: l186,
                                                                }
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    meta: match l187 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l188 = *arg0
                                                                    .add(48 + 21 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l189 = *arg0
                                                                    .add(48 + 22 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base196 = l188;
                                                                let len196 = l189;
                                                                let mut result196 = _rt::Vec::with_capacity(len196);
                                                                for i in 0..len196 {
                                                                    let base = base196
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e196 = {
                                                                        let l190 = *base.add(0).cast::<*mut u8>();
                                                                        let l191 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len192 = l191;
                                                                        let bytes192 = _rt::Vec::from_raw_parts(
                                                                            l190.cast(),
                                                                            len192,
                                                                            len192,
                                                                        );
                                                                        let l193 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l194 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len195 = l194;
                                                                        let bytes195 = _rt::Vec::from_raw_parts(
                                                                            l193.cast(),
                                                                            len195,
                                                                            len195,
                                                                        );
                                                                        (_rt::string_lift(bytes192), _rt::string_lift(bytes195))
                                                                    };
                                                                    result196.push(e196);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base196,
                                                                    len196 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                result196
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            V197::EmbeddedResource(e197)
                        }
                    };
                    let result198 = T::open(
                        v5,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                l6 as u32,
                            )
                        },
                        v197,
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        80 + 22 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr199 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result198 {
                        Ok(e) => {
                            *ptr199.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr199.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr199.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V200;
                            match e {
                                V200::LastOperationFailed(e) => {
                                    *ptr199.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr199.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V200::Closed => {
                                    *ptr199.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr199
                }
                pub trait Guest {
                    type Writer: GuestWriter;
                    fn write_text(
                        id: Id,
                        output: OutputStream,
                        text: _rt::String,
                        options: Option<Options>,
                    ) -> Result<(), StreamError>;
                    fn write_error(
                        id: Id,
                        output: OutputStream,
                        reason: _rt::String,
                    ) -> Result<(), StreamError>;
                    fn write(
                        id: Id,
                        output: OutputStream,
                        content: _rt::Vec<ContentBlock>,
                        options: Option<Options>,
                    ) -> Result<(), StreamError>;
                    fn open(
                        id: Id,
                        output: OutputStream,
                        initial: ContentBlock,
                    ) -> Result<Writer, StreamError>;
                }
                pub trait GuestWriter: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/tools-call-content@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]writer"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]wasmcp:mcp/tools-call-content@0.3.0-alpha.59"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]writer"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn check_write(&self) -> Result<u64, StreamError>;
                    fn write(&self, contents: _rt::Vec<u8>) -> Result<(), StreamError>;
                    fn next(&self, content: ContentBlock) -> Result<(), StreamError>;
                    fn close(&self, options: Option<Options>) -> Result<(), StreamError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_tools_call_content_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#[method]writer.check-write")]
                        unsafe extern "C" fn export_method_writer_check_write(arg0 : *
                        mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_check_write_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0) } } #[unsafe
                        (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#[method]writer.write")]
                        unsafe extern "C" fn export_method_writer_write(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_writer_write_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Writer > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#[method]writer.next")]
                        unsafe extern "C" fn export_method_writer_next(arg0 : * mut u8,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_next_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Writer > (arg0) } } #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#[method]writer.close")]
                        unsafe extern "C" fn export_method_writer_close(arg0 : * mut u8,
                        arg1 : i32, arg2 : i32, arg3 : i32, arg4 : * mut u8, arg5 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_writer_close_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Writer > (arg0, arg1, arg2, arg3, arg4, arg5) } }
                        #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#write-text")]
                        unsafe extern "C" fn export_write_text(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize, arg6 : i32, arg7 : i32, arg8 : i32,
                        arg9 : * mut u8, arg10 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_write_text_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) } }
                        #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#write-error")]
                        unsafe extern "C" fn export_write_error(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_write_error_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4, arg5) } } #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#write")] unsafe
                        extern "C" fn export_write(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize, arg6 : i32, arg7 : i32, arg8 : i32,
                        arg9 : * mut u8, arg10 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_write_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) } }
                        #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#open")] unsafe
                        extern "C" fn export_open(arg0 : * mut u8,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_open_cabi::<$ty > (arg0) } } const
                        _ : () = { #[doc(hidden)] #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-content@0.3.0-alpha.59#[dtor]writer")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Writer::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Writer > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_tools_call_content_0_3_0_alpha_59_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16],
                );
            }
            /// Writes tools/call structured results.
            ///
            /// <https://modelcontextprotocol.io/specification/2025-06-18/schema#tools-call>
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod tools_call_structured {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type OutputStream = super::super::super::super::wasi::io::streams::OutputStream;
                pub type StreamError = super::super::super::super::wasi::io::streams::StreamError;
                pub type Id = super::super::super::super::wasmcp::mcp::types::Id;
                pub type Meta = super::super::super::super::wasmcp::mcp::types::Meta;
                pub type Json = super::super::super::super::wasmcp::mcp::types::Json;
                #[derive(Clone)]
                pub struct Options {
                    pub is_error: bool,
                    pub meta: Meta,
                }
                impl ::core::fmt::Debug for Options {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Options")
                            .field("is-error", &self.is_error)
                            .field("meta", &self.meta)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::wasmcp::mcp::types::Id as V1;
                    let v1 = match arg0 {
                        0 => {
                            let e1 = arg1.assume_init() as i64;
                            V1::Number(e1)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e1 = {
                                let len0 = arg2;
                                let bytes0 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len0,
                                    len0,
                                );
                                _rt::string_lift(bytes0)
                            };
                            V1::String(e1)
                        }
                    };
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result10 = T::write(
                        v1,
                        unsafe {
                            super::super::super::super::wasi::io::streams::OutputStream::from_handle(
                                arg3 as u32,
                            )
                        },
                        _rt::string_lift(bytes2),
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = Options {
                                    is_error: _rt::bool_lift(arg7 as u8),
                                    meta: match arg8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let base9 = arg9;
                                                let len9 = arg10;
                                                let mut result9 = _rt::Vec::with_capacity(len9);
                                                for i in 0..len9 {
                                                    let base = base9
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e9 = {
                                                        let l3 = *base.add(0).cast::<*mut u8>();
                                                        let l4 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len5 = l4;
                                                        let bytes5 = _rt::Vec::from_raw_parts(
                                                            l3.cast(),
                                                            len5,
                                                            len5,
                                                        );
                                                        let l6 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l7 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len8 = l7;
                                                        let bytes8 = _rt::Vec::from_raw_parts(
                                                            l6.cast(),
                                                            len8,
                                                            len8,
                                                        );
                                                        (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                                                    };
                                                    result9.push(e9);
                                                }
                                                _rt::cabi_dealloc(
                                                    base9,
                                                    len9 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result9
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr11 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result10 {
                        Ok(_) => {
                            *ptr11.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr11.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::wasi::io::streams::StreamError as V12;
                            match e {
                                V12::LastOperationFailed(e) => {
                                    *ptr11.add(4).cast::<u8>() = (0i32) as u8;
                                    *ptr11.add(8).cast::<i32>() = (e).take_handle() as i32;
                                }
                                V12::Closed => {
                                    *ptr11.add(4).cast::<u8>() = (1i32) as u8;
                                }
                            }
                        }
                    };
                    ptr11
                }
                pub trait Guest {
                    fn write(
                        id: Id,
                        output: OutputStream,
                        structured: Json,
                        options: Option<Options>,
                    ) -> Result<(), StreamError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasmcp_mcp_tools_call_structured_0_3_0_alpha_59_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasmcp:mcp/tools-call-structured@0.3.0-alpha.59#write")] unsafe
                        extern "C" fn export_write(arg0 : i32, arg1 :
                        ::core::mem::MaybeUninit::< u64 >, arg2 : usize, arg3 : i32, arg4
                        : * mut u8, arg5 : usize, arg6 : i32, arg7 : i32, arg8 : i32,
                        arg9 : * mut u8, arg10 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_write_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasmcp_mcp_tools_call_structured_0_3_0_alpha_59_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_tools_writer_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasmcp::mcp::tools_list_result::__export_wasmcp_mcp_tools_list_result_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasmcp::mcp::tools_list_result);
        $($path_to_types_root)*::
        exports::wasmcp::mcp::tools_call_content::__export_wasmcp_mcp_tools_call_content_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::wasmcp::mcp::tools_call_content); $($path_to_types_root)*::
        exports::wasmcp::mcp::tools_call_structured::__export_wasmcp_mcp_tools_call_structured_0_3_0_alpha_59_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::wasmcp::mcp::tools_call_structured);
    };
}
#[doc(inline)]
pub(crate) use __export_tools_writer_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasmcp:mcp@0.3.0-alpha.59:tools-writer:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4096] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfd\x1e\x01A\x02\x01\
A\x19\x01B\x04\x04\0\x05error\x03\x01\x01h\0\x01@\x01\x04self\x01\0s\x04\0\x1d[m\
ethod]error.to-debug-string\x01\x02\x03\0\x13wasi:io/error@0.2.3\x05\0\x01B\x0a\x04\
\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[method]pollab\
le.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollable.block\x01\x03\
\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\0\x12wasi:io/\
poll@0.2.3\x05\x01\x02\x03\0\0\x05error\x02\x03\0\x01\x08pollable\x01B(\x02\x03\x02\
\x01\x02\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\x02\x01\
i\x01\x01q\x02\x15last-operation-failed\x01\x04\0\x06closed\0\0\x04\0\x0cstream-\
error\x03\0\x05\x04\0\x0cinput-stream\x03\x01\x04\0\x0doutput-stream\x03\x01\x01\
h\x07\x01p}\x01j\x01\x0a\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0b\x04\0\x19[me\
thod]input-stream.read\x01\x0c\x04\0\"[method]input-stream.blocking-read\x01\x0c\
\x01j\x01w\x01\x06\x01@\x02\x04self\x09\x03lenw\0\x0d\x04\0\x19[method]input-str\
eam.skip\x01\x0e\x04\0\"[method]input-stream.blocking-skip\x01\x0e\x01i\x03\x01@\
\x01\x04self\x09\0\x0f\x04\0\x1e[method]input-stream.subscribe\x01\x10\x01h\x08\x01\
@\x01\x04self\x11\0\x0d\x04\0![method]output-stream.check-write\x01\x12\x01j\0\x01\
\x06\x01@\x02\x04self\x11\x08contents\x0a\0\x13\x04\0\x1b[method]output-stream.w\
rite\x01\x14\x04\0.[method]output-stream.blocking-write-and-flush\x01\x14\x01@\x01\
\x04self\x11\0\x13\x04\0\x1b[method]output-stream.flush\x01\x15\x04\0$[method]ou\
tput-stream.blocking-flush\x01\x15\x01@\x01\x04self\x11\0\x0f\x04\0\x1f[method]o\
utput-stream.subscribe\x01\x16\x01@\x02\x04self\x11\x03lenw\0\x13\x04\0\"[method\
]output-stream.write-zeroes\x01\x17\x04\05[method]output-stream.blocking-write-z\
eroes-and-flush\x01\x17\x01@\x03\x04self\x11\x03src\x09\x03lenw\0\x0d\x04\0\x1c[\
method]output-stream.splice\x01\x18\x04\0%[method]output-stream.blocking-splice\x01\
\x18\x03\0\x15wasi:io/streams@0.2.3\x05\x04\x01B\x15\x01o\x02ss\x01p\0\x01k\x01\x04\
\0\x04meta\x03\0\x02\x01s\x04\0\x06cursor\x03\0\x04\x01s\x04\0\x04json\x03\0\x06\
\x01s\x04\0\x03uri\x03\0\x08\x01n\x04\x0belicitation\x05roots\x08sampling\x0cexp\
erimental\x04\0\x13client-capabilities\x03\0\x0a\x01n\x05\x0bcompletions\x07prom\
pts\x09resources\x05tools\x0cexperimental\x04\0\x13server-capabilities\x03\0\x0c\
\x01m\x03\x09v20250618\x09v20250326\x09v20241105\x04\0\x10protocol-version\x03\0\
\x0e\x01ks\x01r\x03\x04names\x05title\x10\x07versions\x04\0\x0eimplementation\x03\
\0\x11\x01q\x02\x06number\x01x\0\x06string\x01s\0\x04\0\x02id\x03\0\x13\x03\0\x1f\
wasmcp:mcp/types@0.3.0-alpha.59\x05\x05\x02\x03\0\x03\x04meta\x01B'\x02\x03\x02\x01\
\x06\x04\0\x04meta\x03\0\0\x01m\x02\x04user\x09assistant\x04\0\x04role\x03\0\x02\
\x01p\x03\x01k\x04\x01ks\x01r\x03\x08audience\x05\x0dlast-modified\x06\x08priori\
tyu\x04\0\x0bannotations\x03\0\x07\x01k\x08\x01r\x02\x0bannotations\x09\x04meta\x01\
\x04\0\x0fcontent-options\x03\0\x0a\x01k\x0b\x01r\x02\x04texts\x07options\x0c\x04\
\0\x0ctext-content\x03\0\x0d\x01p}\x01r\x03\x04data\x0f\x09mime-types\x07options\
\x0c\x04\0\x0dimage-content\x03\0\x10\x01r\x03\x04data\x0f\x09mime-types\x07opti\
ons\x0c\x04\0\x0daudio-content\x03\0\x12\x01kw\x01r\x06\x05title\x06\x0bdescript\
ion\x06\x04size\x14\x09mime-type\x06\x0bannotations\x09\x04meta\x01\x04\0\x1dres\
ource-link-content-options\x03\0\x15\x01k\x16\x01r\x03\x03uris\x04names\x07optio\
ns\x17\x04\0\x15resource-link-content\x03\0\x18\x01r\x02\x09mime-type\x06\x04met\
a\x01\x04\0\x19embedded-resource-options\x03\0\x1a\x01k\x1b\x01r\x03\x03uris\x04\
texts\x07options\x1c\x04\0\x16text-resource-contents\x03\0\x1d\x01r\x03\x03uris\x04\
blob\x0f\x07options\x1c\x04\0\x16blob-resource-contents\x03\0\x1f\x01q\x02\x04te\
xt\x01\x1e\0\x04blob\x01\x20\0\x04\0\x11embedded-resource\x03\0!\x01r\x02\x08res\
ource\"\x07options\x0c\x04\0\x19embedded-resource-content\x03\0#\x01q\x05\x04tex\
t\x01\x0e\0\x05image\x01\x11\0\x05audio\x01\x13\0\x0dresource-link\x01\x19\0\x11\
embedded-resource\x01$\0\x04\0\x0dcontent-block\x03\0%\x03\0!wasmcp:mcp/content@\
0.3.0-alpha.59\x05\x07\x02\x03\0\x02\x0doutput-stream\x02\x03\0\x02\x0cstream-er\
ror\x02\x03\0\x03\x02id\x02\x03\0\x03\x06cursor\x02\x03\0\x03\x04json\x01B.\x02\x03\
\x02\x01\x08\x04\0\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0cstream-\
error\x03\0\x02\x02\x03\x02\x01\x0a\x04\0\x02id\x03\0\x04\x02\x03\x02\x01\x0b\x04\
\0\x06cursor\x03\0\x06\x02\x03\x02\x01\x06\x04\0\x04meta\x03\0\x08\x02\x03\x02\x01\
\x0c\x04\0\x04json\x03\0\x0a\x01n\x04\x0bdestructive\x0aidempotent\x0aopen-world\
\x09read-only\x04\0\x0atool-hints\x03\0\x0c\x01ks\x01r\x02\x05hints\x0d\x05title\
\x0e\x04\0\x10tool-annotations\x03\0\x0f\x01k\x10\x01k\x0b\x01r\x05\x04meta\x09\x0b\
annotations\x11\x0bdescription\x0e\x0doutput-schema\x12\x05title\x0e\x04\0\x0cto\
ol-options\x03\0\x13\x01k\x14\x01r\x03\x04names\x0cinput-schemas\x07options\x15\x04\
\0\x04tool\x03\0\x16\x01k\x07\x01r\x02\x04meta\x09\x0bnext-cursor\x18\x04\0\x07o\
ptions\x03\0\x19\x04\0\x06writer\x03\x01\x01h\x1b\x01j\x01y\x01\x03\x01@\x01\x04\
self\x1c\0\x1d\x04\0\x1a[method]writer.check-write\x01\x1e\x01j\0\x01\x03\x01@\x02\
\x04self\x1c\x04tool\x17\0\x1f\x04\0\x14[method]writer.write\x01\x20\x01k\x1a\x01\
@\x02\x04self\x1c\x07options!\0\x1f\x04\0\x14[method]writer.close\x01\"\x01i\x01\
\x01p\x17\x01@\x04\x02id\x05\x06output#\x05tools$\x07options!\0\x1f\x04\0\x05wri\
te\x01%\x01i\x1b\x01j\x01&\x01\x03\x01@\x03\x02id\x05\x06output#\x07initial$\0'\x04\
\0\x04open\x01(\x04\0+wasmcp:mcp/tools-list-result@0.3.0-alpha.59\x05\x0d\x02\x03\
\0\x04\x0dcontent-block\x01B&\x02\x03\x02\x01\x08\x04\0\x0doutput-stream\x03\0\0\
\x02\x03\x02\x01\x09\x04\0\x0cstream-error\x03\0\x02\x02\x03\x02\x01\x0e\x04\0\x0d\
content-block\x03\0\x04\x02\x03\x02\x01\x0a\x04\0\x02id\x03\0\x06\x02\x03\x02\x01\
\x06\x04\0\x04meta\x03\0\x08\x01r\x02\x08is-error\x7f\x04meta\x09\x04\0\x07optio\
ns\x03\0\x0a\x04\0\x06writer\x03\x01\x01h\x0c\x01j\x01w\x01\x03\x01@\x01\x04self\
\x0d\0\x0e\x04\0\x1a[method]writer.check-write\x01\x0f\x01p}\x01j\0\x01\x03\x01@\
\x02\x04self\x0d\x08contents\x10\0\x11\x04\0\x14[method]writer.write\x01\x12\x01\
@\x02\x04self\x0d\x07content\x05\0\x11\x04\0\x13[method]writer.next\x01\x13\x01k\
\x0b\x01@\x02\x04self\x0d\x07options\x14\0\x11\x04\0\x14[method]writer.close\x01\
\x15\x01i\x01\x01@\x04\x02id\x07\x06output\x16\x04texts\x07options\x14\0\x11\x04\
\0\x0awrite-text\x01\x17\x01@\x03\x02id\x07\x06output\x16\x06reasons\0\x11\x04\0\
\x0bwrite-error\x01\x18\x01p\x05\x01@\x04\x02id\x07\x06output\x16\x07content\x19\
\x07options\x14\0\x11\x04\0\x05write\x01\x1a\x01i\x0c\x01j\x01\x1b\x01\x03\x01@\x03\
\x02id\x07\x06output\x16\x07initial\x05\0\x1c\x04\0\x04open\x01\x1d\x04\0,wasmcp\
:mcp/tools-call-content@0.3.0-alpha.59\x05\x0f\x01B\x11\x02\x03\x02\x01\x08\x04\0\
\x0doutput-stream\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0cstream-error\x03\0\x02\x02\
\x03\x02\x01\x0a\x04\0\x02id\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x04meta\x03\0\x06\
\x02\x03\x02\x01\x0c\x04\0\x04json\x03\0\x08\x01r\x02\x08is-error\x7f\x04meta\x07\
\x04\0\x07options\x03\0\x0a\x01i\x01\x01k\x0b\x01j\0\x01\x03\x01@\x04\x02id\x05\x06\
output\x0c\x0astructured\x09\x07options\x0d\0\x0e\x04\0\x05write\x01\x0f\x04\0/w\
asmcp:mcp/tools-call-structured@0.3.0-alpha.59\x05\x10\x04\0&wasmcp:mcp/tools-wr\
iter@0.3.0-alpha.59\x04\0\x0b\x12\x01\0\x0ctools-writer\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
